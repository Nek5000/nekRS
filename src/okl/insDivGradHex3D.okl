/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// Compute Gradient in strong form, multiply with coefficient
// not that it is multiplied with JW
@kernel void insDivGradGradientHex3D(const dlong Nelements,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  D,
                                    const dlong offset,
                                    @restrict const  dfloat *  Q,
                                    @restrict const  dfloat *  COND,
                                          @restrict dfloat *   gradQ){

  for(dlong e=0;e<Nelements;e++;@outer(0)){  // for all elements

    @shared dfloat s_Q[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];

    for(int k=0;k<p_Nq;++k;@inner(2)){ 
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
        for(int i=0;i<p_Nq;++i;@inner(0)){    
          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq+i;

          s_Q[k][j][i]  = Q[id];

          if (k==0)
            s_D[j][i] = D[j*p_Nq+i];
        }
      }
    }

    @barrier("local");

    for(int k=0;k<p_Nq;++k;@inner(2)){ 
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
        for(int i=0;i<p_Nq;++i;@inner(0)){  
          const dlong gid = e*p_Np*p_Nvgeo +k*p_Nq*p_Nq +j*p_Nq +i;
          const dfloat drdx = vgeo[gid + p_RXID*p_Np];
          const dfloat drdy = vgeo[gid + p_RYID*p_Np];
          const dfloat drdz = vgeo[gid + p_RZID*p_Np];
          const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID*p_Np];
          const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID*p_Np];
          const dfloat JW   = vgeo[gid + p_JWID*p_Np];  
          
          const dlong id   = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          const dfloat con = COND[id];
          // compute 'r' and 's' derivatives of (q_m) at node n
          dfloat dpdr  = 0.f, dpds  = 0.f, dpdt  = 0.f;
          #pragma unroll p_Nq
            for(int n=0;n<p_Nq;++n){                            
              dpdr += s_D[i][n]*s_Q[k][j][n];
              dpds += s_D[j][n]*s_Q[k][n][i];
              dpdt += s_D[k][n]*s_Q[n][j][i];
            }
          gradQ[id+0*offset] = con*JW*(drdx*dpdr + dsdx*dpds + dtdx*dpdt);
          gradQ[id+1*offset] = con*JW*(drdy*dpdr + dsdy*dpds + dtdy*dpdt);
          gradQ[id+2*offset] = con*JW*(drdz*dpdr + dsdz*dpds + dtdz*dpdt);
        }
      }
    }
  }  
}


// Compute Gradient in weak Form
@kernel void insDivGradDivergenceHex3D(const dlong Nelements,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  D,
                                    const dlong offset,
                                    @restrict const  dfloat *  gradQ,
                                    @restrict const  dfloat *  Q,
                                    @restrict const  dfloat *  RHOCP,
                                    @restrict const  dfloat *  SRC,
                                    @restrict dfloat *  QTL){
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {
    @shared dfloat s_U[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq][p_Nq];

    @shared dfloat s_D[p_Nq][p_Nq];

    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
  for(int i=0;i<p_Nq;++i;@inner(0)){
    dlong id = i+j*p_Nq;
    if(k==0)
      s_D[0][id] = D[id];

    id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

    const dfloat Un = gradQ[id+0*offset];
    const dfloat Vn = gradQ[id+1*offset];
    const dfloat Wn = gradQ[id+2*offset];

    s_U[k][j][i] = Un;
    s_V[k][j][i] = Vn;
    s_W[k][j][i] = Wn;
  }
      }
    }

    @barrier("local");

    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
  for(int i=0;i<p_Nq;++i;@inner(0)){

    const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
    const dfloat drdx = vgeo[gid + p_RXID*p_Np];
    const dfloat drdy = vgeo[gid + p_RYID*p_Np];
    const dfloat drdz = vgeo[gid + p_RZID*p_Np];
    const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
    const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
    const dfloat dsdz = vgeo[gid + p_SZID*p_Np];
    const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
    const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
    const dfloat dtdz = vgeo[gid + p_TZID*p_Np];

    const dfloat JW   = vgeo[gid + p_JWID*p_Np];  

    dfloat dudr = 0, duds = 0, dudt = 0;
    dfloat dvdr = 0, dvds = 0, dvdt = 0;
    dfloat dwdr = 0, dwds = 0, dwdt = 0;
    dfloat div = 0.f; 
#pragma unroll p_Nq
    for (int n=0;n<p_Nq;n++) {
      const dfloat Dr = s_D[i][n];
      const dfloat Ds = s_D[j][n];
      const dfloat Dt = s_D[k][n];
      dudr += Dr*s_U[k][j][n];
      duds += Ds*s_U[k][n][i];
      dudt += Dt*s_U[n][j][i];

      dvdr += Dr*s_V[k][j][n];
      dvds += Ds*s_V[k][n][i];
      dvdt += Dt*s_V[n][j][i];

      dwdr += Dr*s_W[k][j][n];
      dwds += Ds*s_W[k][n][i];
      dwdt += Dt*s_W[n][j][i];
    }

    div  = (drdx*dudr + dsdx*duds + dtdx*dudt);
    div += (drdy*dvdr + dsdy*dvds + dtdy*dvdt);
    div += (drdz*dwdr + dsdz*dwds + dtdz*dwdt);
  
    const dlong id =e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
    
    // this is not good...
    const dfloat iRhoCpT = 1.f/(RHOCP[id]*Q[id]); 

    const dfloat qvol    = SRC[id];

     QTL[id] = JW*iRhoCpT*(div + qvol);  
     // QTL[id] = iRhoCpT*(div + qvol);  
  }
      }
    }
  }
}


