// compute the average value of a field
// on a specified BID

// pre: result (length: p_Nfaces * Nelements * (Nfields+1))

// Assumes p_blockSize > p_Nfp

#define p_maxFieldsPerLoop 3

@kernel void avgBIDValue(const dlong Nelements,
                         const dlong BID,
                         const dlong Nfields,
                         const dlong fieldOffset,
                         const dlong offset,
                         @ restrict const dfloat *sgeo,
                         @ restrict const dlong *EToB,
                         @ restrict const dlong *vmapM,
                         @ restrict const dfloat *field,
                         @ restrict dfloat *result)
{

  for (dlong e = 0; e < Nelements; e++; @outer(0)) {

    // first reduction: compute surface area
    for (int f = 0; f < p_Nfaces; f++) {

      @shared dfloat s_area[p_blockSize];

      for (int m = 0; m < p_blockSize; ++m; @inner(0)) {
        if (m < p_Nfp) {
          if (EToB[f + p_Nfaces * e] == BID) {
            const int n = m + f * p_Nfp;
            const int sk = e * p_Nfp * p_Nfaces + n;
            const dfloat WsJ = sgeo[sk * p_Nsgeo + p_WSJID];
            s_area[m] = WsJ;
          }
          else {
            s_area[m] = 0.0;
          }
        }
        else {
          s_area[m] = 0.0;
        }
      }

      // compute reduction
      @barrier();

#if p_blockSize > 512
      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 512) {
          s_area[t] += s_area[t + 512];
        }
      }
      @barrier();
#endif

#if p_blockSize > 256
      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 256) {
          s_area[t] += s_area[t + 256];
        }
      }
      @barrier();
#endif

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 128) {
          s_area[t] += s_area[t + 128];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 64) {
          s_area[t] += s_area[t + 64];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 32) {
          s_area[t] += s_area[t + 32];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 16) {
          s_area[t] += s_area[t + 16];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 8) {
          s_area[t] += s_area[t + 8];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 4) {
          s_area[t] += s_area[t + 4];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 2) {
          s_area[t] += s_area[t + 2];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 1) {
          result[f + p_Nfaces * e + Nfields * offset] = s_area[0] + s_area[1];
        }
      }

      @barrier();
    }

    // second reduction: compute sum for each field

    for (int fldStart = 0; fldStart < Nfields; fldStart += p_maxFieldsPerLoop) {
      for (int f = 0; f < p_Nfaces; f++) {

        @shared dfloat s_sum[p_maxFieldsPerLoop][p_blockSize];

        for (int m = 0; m < p_blockSize; ++m; @inner(0)) {

#pragma unroll p_maxFieldsPerLoop
          for (int fld = 0; fld < p_maxFieldsPerLoop; fld++) {
            const int fldId = fldStart + fld;
            if (m < p_Nfp && fldId < Nfields) {
              if (EToB[f + p_Nfaces * e] == BID) {
                const int n = m + f * p_Nfp;
                const int sk = e * p_Nfp * p_Nfaces + n;
                const dfloat WsJ = sgeo[sk * p_Nsgeo + p_WSJID];
                const dlong idM = vmapM[sk];
                s_sum[fld][m] = field[idM + fldId * fieldOffset] * WsJ;
              }
              else {
                s_sum[fld][m] = 0.0;
              }
            }
            else {
              s_sum[fld][m] = 0.0;
            }
          }
        }

        // compute reduction
        @barrier();

#if p_blockSize > 512
        for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
          if (t < 512) {
#pragma unroll p_maxFieldsPerLoop
            for (int fld = 0; fld < p_maxFieldsPerLoop; fld++) {
              s_sum[fld][t] += s_sum[fld][t + 512];
            }
          }
        }
        @barrier();
#endif

#if p_blockSize > 256
        for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
          if (t < 256) {
#pragma unroll p_maxFieldsPerLoop
            for (int fld = 0; fld < p_maxFieldsPerLoop; fld++) {
              s_sum[fld][t] += s_sum[fld][t + 256];
            }
          }
        }
        @barrier();
#endif

        for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
          if (t < 128) {
#pragma unroll p_maxFieldsPerLoop
            for (int fld = 0; fld < p_maxFieldsPerLoop; fld++) {
              s_sum[fld][t] += s_sum[fld][t + 128];
            }
          }
        }
        @barrier();

        for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
          if (t < 64) {
#pragma unroll p_maxFieldsPerLoop
            for (int fld = 0; fld < p_maxFieldsPerLoop; fld++) {
              s_sum[fld][t] += s_sum[fld][t + 64];
            }
          }
        }
        @barrier();

        for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
          if (t < 32) {
#pragma unroll p_maxFieldsPerLoop
            for (int fld = 0; fld < p_maxFieldsPerLoop; fld++) {
              s_sum[fld][t] += s_sum[fld][t + 32];
            }
          }
        }
        @barrier();

        for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
          if (t < 16) {
#pragma unroll p_maxFieldsPerLoop
            for (int fld = 0; fld < p_maxFieldsPerLoop; fld++) {
              s_sum[fld][t] += s_sum[fld][t + 16];
            }
          }
        }
        @barrier();

        for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
          if (t < 8) {
#pragma unroll p_maxFieldsPerLoop
            for (int fld = 0; fld < p_maxFieldsPerLoop; fld++) {
              s_sum[fld][t] += s_sum[fld][t + 8];
            }
          }
        }
        @barrier();

        for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
          if (t < 4) {
#pragma unroll p_maxFieldsPerLoop
            for (int fld = 0; fld < p_maxFieldsPerLoop; fld++) {
              s_sum[fld][t] += s_sum[fld][t + 4];
            }
          }
        }
        @barrier();

        for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
          if (t < 2) {
#pragma unroll p_maxFieldsPerLoop
            for (int fld = 0; fld < p_maxFieldsPerLoop; fld++) {
              s_sum[fld][t] += s_sum[fld][t + 2];
            }
          }
        }
        @barrier();

        for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
          if (t < 1) {
#pragma unroll p_maxFieldsPerLoop
            for (int fld = 0; fld < p_maxFieldsPerLoop; fld++) {
              const int fldId = fldStart + fld;
              if (fldId < Nfields) {
                result[f + p_Nfaces * e + fldId * offset] = s_sum[fld][0] + s_sum[fld][1];
              }
            }
          }
        }

        @barrier();
      }
    }
  }
}
