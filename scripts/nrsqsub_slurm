#!/bin/bash -l
#
#SBATCH --job-name="nekRS"
#SBATCH --constraint=gpu
#SBATCH --gres=gpu:4              # Number of GPU(s) per node
#SBATCH --ntasks-per-node=4       # Number of MPI process
#SBATCH --cpus-per-task=2         # CPU cores per MPI process
#SBATCH --cpu-bind=core
#SBATCH --account=<project>

module load cmake
module load gcc
module load cuda

ulimit -s unlimited 
export $NEKRS_HOME=${HOME}/.local/nekRS
export OCCA_CXX=g++
export OCCA_CXXFLAGS="-O2 -ftree-vectorize -funroll-loops -march=native -mtune=native"

module load openmpi 
export OMPI_MCA_pml=ucx
export OMPI_MCA_btl="^vader,tcp,openib,smcuda"
export OMPI_MCA_osc=ucx
export OMPI_MCA_io=romio321

export ROMIO_HINTS="$(pwd)/.romio_hint"
if [ ! -f "$ROMIO_HINTS" ]; then
  echo "romio_no_indep_rw true"   >$ROMIO_HINTS
  echo "romio_cb_write enable"   >>$ROMIO_HINTS
  echo "romio_ds_write enable"   >>$ROMIO_HINTS
  echo "romio_cb_read enable"    >>$ROMIO_HINTS
  echo "romio_ds_read enable"    >>$ROMIO_HINTS
  echo "cb_buffer_size 16777216" >>$ROMIO_HINTS
  echo "cb_config_list *:1"      >>$ROMIO_HINTS
fi

NICS=(mlx5_0 mlx5_1 mlx5_2 mlx5_3 mlx5_6 mlx5_7 mlx5_8 mlx5_9)
NIC=${NICS[$SLURM_PROCID]}
export UCX_NET_DEVICES=$NIC:1
export UCX_TLS=rc,sm,cuda
export UCX_RNDV_SCHEME=put_zcopy
export UCX_RNDV_THRESH=1024
export OGS_MPI_SUPPORT=1 

# precompile
srun ${NEKRS_HOME}/nekrs --setup $1 --backend CUDA --build-only $SLURM_NTASKS

# actual run
srun ${NEKRS_HOME}/nekrs --setup $1 --backend CUDA --device-id $SLURM_PROCID 
