/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

// Computes local [lap(u) + lambda*u] = [-(grad(u), grad(phi)) + lambda*u] operation
@kernel void insPressureAxHex3D(const dlong Nelements,
                        const dlong offset,
		        @restrict const  dfloat *  ggeo,
		        @restrict const  dfloat *  D,
		        @restrict const  dfloat *  S,
		        @restrict const  dfloat *  q,
		        @restrict const  dfloat *  lambda,
		        @restrict dfloat *  Aq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
    @exclusive dfloat lambda0, lambda1;

    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

        // load pencil of u into register
        const dlong base = i + j*p_Nq + e*p_Np;
        for(int k = 0; k < p_Nq; k++) {
          r_q[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
          r_Aq[k] = 0.f; // zero the accumulator
        }
      }
    }

    // Layer by layer
//    #pragma unroll p_Nq
      for(int k = 0;k < p_Nq; k++){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            // prefetch geometric factors
            const dlong gbase = e*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

            r_G00 = ggeo[gbase+p_G00ID*p_Np];
            r_G01 = ggeo[gbase+p_G01ID*p_Np];
            r_G02 = ggeo[gbase+p_G02ID*p_Np];

            r_G11 = ggeo[gbase+p_G11ID*p_Np];
            r_G12 = ggeo[gbase+p_G12ID*p_Np];
            r_G22 = ggeo[gbase+p_G22ID*p_Np];

            r_GwJ = ggeo[gbase+p_GWJID*p_Np];

            const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            lambda0 = lambda[0*offset + id];
            lambda1 = lambda[1*offset + id];
          }
        }

        @barrier("local");

        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            // share u(:,:,k)
            s_q[j][i] = r_q[k];

            r_qt = 0;

            #pragma unroll p_Nq
              for(int m = 0; m < p_Nq; m++) {
                r_qt += s_D[k][m]*r_q[m];
              }
          }
        }

        @barrier("local");

        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            dfloat qr = 0.f;
            dfloat qs = 0.f;

//            #pragma unroll p_Nq
              for(int m = 0; m < p_Nq; m++) {
                qr += s_D[i][m]*s_q[j][m];
                qs += s_D[j][m]*s_q[m][i];
              }

            s_Gqs[j][i] = lambda0*(r_G01*qr + r_G11*qs + r_G12*r_qt);
            s_Gqr[j][i] = lambda0*(r_G00*qr + r_G01*qs + r_G02*r_qt);

            // put this here for a performance bump
            r_Gqt = lambda0*(r_G02*qr + r_G12*qs + r_G22*r_qt);
            // note the change in sign !!!!
            r_Auk = -r_GwJ*lambda1*r_q[k];
          }
        }

        @barrier("local");

        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

//            #pragma unroll p_Nq
              for(int m = 0; m < p_Nq; m++){
                r_Auk   += s_D[m][j]*s_Gqs[m][i];
                r_Aq[m] += s_D[k][m]*r_Gqt; // DT(m,k)*ut(i,j,k,e)
                r_Auk   += s_D[m][i]*s_Gqr[j][m];
              }

            r_Aq[k] += r_Auk;
          }
        }
      }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
//        #pragma unroll p_Nq
          for(int k = 0; k < p_Nq; k++){
            const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
            Aq[id] += (-r_Aq[k]); // Add to Rhs
          }
      }
    }
  }
}
