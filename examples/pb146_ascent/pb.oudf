// Boundary conditions
void velocityDirichletConditions(bcData *bc)
{
  bc->u = 0.0;
  bc->v = 0.0;
  bc->w = 1.0;
}

// Stabilized outflow (Dong et al)
void pressureDirichletConditions(bcData *bc)
{
  const dfloat iU0delta = 20.0;
  const dfloat un = bc->u * bc->nx + bc->v * bc->ny + bc->w * bc->nz;
  const dfloat s0 = 0.5 * (1.0 - tanh(un * iU0delta));
  bc->p = -0.5 * (bc->u * bc->u + bc->v * bc->v + bc->w * bc->w) * s0;
}

void scalarDirichletConditions(bcData *bc)
{
  bc->s = 0.0;
}

void scalarNeumannConditions(bcData *bc)
{
  bc->flux = 1.0;
}

// Kernels
@kernel void compRad(const dlong Ntotal,
                    @ restrict const dfloat *X,
                    @ restrict const dfloat *Y,
                    @ restrict dfloat *R)
{
  for (dlong n = 0; n < Ntotal; ++n; @tile(p_blockSize, @outer, @inner)) {
    if (n < Ntotal) {
      R[n] = sqrt(X[n]*X[n] + Y[n]*Y[n]);
    }
  }
}
