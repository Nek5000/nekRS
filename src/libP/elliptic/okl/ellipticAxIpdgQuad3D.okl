/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

// increments gradients of pressure with pseudo-gradients at faces and
// increments rhs with pseudo-gradient/penalty terms at faces (need to double check scaling with tau)

// sgeo stores dfloat4s with nx,ny,nz,(sJ/J)*(w1*w2*w3/(ws1*ws2))

// nx,ny,nz,sJ,invJ - need WsJ

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!This Kenrel is not completed !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void surfaceTerms(const int element,
                  const int sk,
                  const int face,
                  const int i,
                  const int j,
                  const dfloat tau,
                  @global const dfloat* sgeo,
                  @global const int* vmapM,
                  @global const int* vmapP,
                  @global const dfloat4* gradq,
                  dfloat s_dqdx[p_Nq][p_Nq],
                  dfloat s_dqdy[p_Nq][p_Nq],
                  dfloat s_dqdz[p_Nq][p_Nq],
                  dfloat s_rhsq[p_Nq][p_Nq])
{
  const dlong idM = vmapM[sk];
  const dlong idP = vmapP[sk];

  const dfloat nx = sgeo[sk * p_Nsgeo + p_NXID];
  const dfloat ny = sgeo[sk * p_Nsgeo + p_NYID];
  const dfloat nz = sgeo[sk * p_Nsgeo + p_NZID];
  const dfloat WsJ = sgeo[sk * p_Nsgeo + p_WSJID];
  const dfloat hinv = sgeo[sk * p_Nsgeo + p_IHID];

  const dfloat4 gradqM = gradq[idM];
  dfloat4 gradqP = gradq[idP];

  dfloat dq = gradqP.w - gradqM.w;

  s_dqdx[j][i] += 0.5f * WsJ * nx * dq;
  s_dqdy[j][i] += 0.5f * WsJ * ny * dq;
  s_dqdz[j][i] += 0.5f * WsJ * nz * dq;

  s_rhsq[j][i] -= 0.5f * WsJ * (nx * (gradqP.x + gradqM.x) +
                                ny * (gradqP.y + gradqM.y) +
                                nz * (gradqP.z + gradqM.z) +
                                tau * dq * hinv);
}

@kernel void ellipticAxIpdgQuad3D(const dlong Nelements,
                                  @restrict const dlong*  vmapM,
                                  @restrict const dlong*  vmapP,
                                  const dfloat lambda,
                                  const dfloat tau,
                                  @restrict const dfloat*  vgeo,
                                  @restrict const dfloat*  sgeo,
                                  @restrict const int*  EToB,
                                  @restrict const dfloat*  D,
                                  @restrict const dfloat*  LIFTT,
                                  @restrict const dfloat*  MM,
                                  @restrict const dfloat4*  gradq,
                                  @restrict dfloat*  Aq)
{
#if 0
  // assume the following are precomputed:
  // p, px, py at SEM nodes
  // +/- traces of p, px, py at SEM surface nodes

  0 <= i,j,k,m <= N AND 0 <= e < Nelements

    (phix, px) _e
  + (phiy, py)_e
  + (phix, nx* (p + -p -) / 2)_de
  + (phiy, ny* (p + -p -) / 2)_de
  - (phi -, nx* (px + +px -) / 2)_de
  - (phi -, ny* (py + +py -) / 2)_de
  - (phi -, tau* (p + -p -) / 2) _de

  // here w is one component of the product TP quadrature weights
    (phir, rx* (px + Fsc * nx * dp) + ry* (py + Fsc * ny * dp) + rz* (pz + Fsc * nz * dp)) )_e
  +   (phir, sx* (px + Fsc * nx * dp) + sy * (py + Fsc * ny * dp) + sz * (pz + Fsc * nz * dp)) )_e
  +   (phir, tx* (px + Fsc* nx* dp) + ty* (py + Fsc* ny* dp) + tz* (pz + Fsc* nz* dp)) ) _e
    (phi -,
    Fsc* (nx * (px + +px -) + ny * (py + +py -) + nz * (pz + +pz -) - tau * (p + -p -)) / 2) _e

  px = > px + Fsc * nx * dp (i.e.add pseudo - gradient at end points
                             py = > py + Fsc * ny * dp
                                  pz = > pz + Fsc * nz * dp
                                       Fsc = delta * (Js / J) * (1 / w)
                                             dp = (p + -p -) / 2;

                             // simplify
                             (phir, rx * px + ry * py + rz * pz) ) _e
       +   (phir, sx* px + sy * py + sz * pz) )_e
       +   (phir, tx* px + ty * py + tz * pz) )_e
       +   (phi -,
            Fsc* (nx * (px + +px -) + ny * (py + +py -) + nz * (pz + +pz -) - tau * (p + -p -)) /
            2)_e

#endif

  for(dlong e = 0; e < Nelements; ++e; @outer(0))
  {
    @shared dfloat s_dqdx[p_Nq][p_Nq];
    @shared dfloat s_dqdy[p_Nq][p_Nq];
    @shared dfloat s_dqdz[p_Nq][p_Nq];
    @shared dfloat s_rhsq[p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];

    @exclusive dlong element;

    // loop over slabs
    for(int j = 0; j < p_Nq; ++j)
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        element = e;

        // assume that this stores (p, px, py, pz) as dfloat4
        const dfloat4 gradqn = gradq[e * p_Np + j * p_Nq + i];

        const dlong gid = i + j * p_Nq + e * p_Np * p_Nvgeo;
        dfloat JW = vgeo[gid + p_JWID * p_Np];

        s_dqdx[j][i] = JW * gradqn.x;
        s_dqdy[j][i] = JW * gradqn.y;
        s_dqdz[j][i] = JW * gradqn.z;
        s_rhsq[j][i] = JW * lambda * gradqn.w;

        s_D[j][i] = D[j * p_Nq + i];
      }

    @barrier("local");

    // loop over faces to add pseudo-gradient

    // face 0 & 2
    for(int i = 0; i < p_Nq; ++i; @inner(0)) {
      dlong sk0 = e * p_Nfp * p_Nfaces + 0 * p_Nfp + i;
      dlong sk2 = e * p_Nfp * p_Nfaces + 2 * p_Nfp + i;

      //      surfaceTerms(sk0,0,i,0);
      surfaceTerms(e, sk0, 0, i, 0, tau, sgeo, vmapM, vmapP, gradq, s_dqdx, s_dqdy, s_dqdz, s_rhsq);

      //      surfaceTerms(sk2,2,i,p_Nq-1);
      surfaceTerms(e,
                   sk2,
                   2,
                   i,
                   p_Nq - 1,
                   tau,
                   sgeo,
                   vmapM,
                   vmapP,
                   gradq,
                   s_dqdx,
                   s_dqdy,
                   s_dqdz,
                   s_rhsq);
    }

    @barrier("local");

    // face 1 & 3
    for(int j = 0; j < p_Nq; ++j; @inner(0)) {
      dlong sk1 = e * p_Nfp * p_Nfaces + 1 * p_Nfp + j;
      dlong sk3 = e * p_Nfp * p_Nfaces + 3 * p_Nfp + j;

      //      surfaceTerms(sk1,1,p_Nq-1,j);
      surfaceTerms(e,
                   sk1,
                   1,
                   p_Nq - 1,
                   j,
                   tau,
                   sgeo,
                   vmapM,
                   vmapP,
                   gradq,
                   s_dqdx,
                   s_dqdy,
                   s_dqdz,
                   s_rhsq);

      //surfaceTerms(sk3,3,0,j);
      surfaceTerms(e, sk3, 3, 0, j, tau, sgeo, vmapM, vmapP, gradq, s_dqdx, s_dqdy, s_dqdz, s_rhsq);
    }

    @barrier("local");

    // prescale by geofacs
    for(int j = 0; j < p_Nq; ++j) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        // does need the nasty geofacs
        const dlong gid = i + j * p_Nq + e * p_Np * p_Nvgeo;

        const dfloat drdx = vgeo[gid + p_RXID * p_Np];
        const dfloat drdy = vgeo[gid + p_RYID * p_Np];
        const dfloat drdz = vgeo[gid + p_RZID * p_Np];

        const dfloat dsdx = vgeo[gid + p_SXID * p_Np];
        const dfloat dsdy = vgeo[gid + p_SYID * p_Np];
        const dfloat dsdz = vgeo[gid + p_SZID * p_Np];

        const dfloat dtdx = vgeo[gid + p_TXID * p_Np];
        const dfloat dtdy = vgeo[gid + p_TYID * p_Np];
        const dfloat dtdz = vgeo[gid + p_TZID * p_Np];

        // chain rule (need to scale by wei
        const dfloat dqdx = s_dqdx[j][i];
        const dfloat dqdy = s_dqdy[j][i];
        const dfloat dqdz = s_dqdz[j][i];

        s_dqdx[j][i] = (drdx * dqdx + drdy * dqdy + drdz * dqdz);
        s_dqdy[j][i] = (dsdx * dqdx + dsdy * dqdy + dsdz * dqdz);
#if 0
        s_dqdz[j][i] = (dtdx * dqdx + dtdy * dqdy + dtdz * dqdz);
#else
        s_dqdz[j][i] = 0;
#endif
      }
    }

    @barrier("local");

    // loop over slabs
    for(int j = 0; j < p_Nq; ++j) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        dfloat dr = 0, ds = 0, dt = s_dqdz[j][i];

#pragma unroll p_Nq
        for(int n = 0; n < p_Nq; ++n) {
          dr += s_D[n][i] * s_dqdx[j][n];
          ds += s_D[n][j] * s_dqdy[n][i];
        }

        const dlong id = e * p_Np + j * p_Nq + i;
        Aq[id] = s_rhsq[j][i]  + dr + ds + dt;
      }
    }
  }
}

@kernel void ellipticPartialAxIpdgQuad3D(const dlong Nelements,
                                         @restrict const dlong*  elementList,
                                         @restrict const dlong*  vmapM,
                                         @restrict const dlong*  vmapP,
                                         const dfloat lambda,
                                         const dfloat tau,
                                         @restrict const dfloat*  vgeo,
                                         @restrict const dfloat*  sgeo,
                                         @restrict const int*  EToB,
                                         @restrict const dfloat*  D,
                                         @restrict const dfloat*  LIFTT,
                                         @restrict const dfloat*  MM,
                                         @restrict const dfloat4*  gradq,
                                         @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_dqdx[p_Nq][p_Nq];
    @shared dfloat s_dqdy[p_Nq][p_Nq];
    @shared dfloat s_dqdz[p_Nq][p_Nq];
    @shared dfloat s_rhsq[p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];

    @exclusive dlong element;

    // loop over slabs
    for(int j = 0; j < p_Nq; ++j)
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        element = elementList[e];

        // assume that this stores (p, px, py, pz) as dfloat4
        const dfloat4 gradqn = gradq[element * p_Np + j * p_Nq + i];

        const dlong gid = i + j * p_Nq + element * p_Np * p_Nvgeo;
        dfloat JW = vgeo[gid + p_JWID * p_Np];

        s_dqdx[j][i] = JW * gradqn.x;
        s_dqdy[j][i] = JW * gradqn.y;
        s_dqdz[j][i] = JW * gradqn.z;
        s_rhsq[j][i] = JW * lambda * gradqn.w;

        s_D[j][i] = D[j * p_Nq + i];
      }

    @barrier("local");

    // loop over faces to add pseudo-gradient

    // face 0 & 2
    for(int i = 0; i < p_Nq; ++i; @inner(0)) {
      dlong sk0 = element * p_Nfp * p_Nfaces + 0 * p_Nfp + i;
      dlong sk2 = element * p_Nfp * p_Nfaces + 2 * p_Nfp + i;

      //      surfaceTerms(sk0,0,i,0);
      surfaceTerms(element,
                   sk0,
                   0,
                   i,
                   0,
                   tau,
                   sgeo,
                   vmapM,
                   vmapP,
                   gradq,
                   s_dqdx,
                   s_dqdy,
                   s_dqdz,
                   s_rhsq);

      //      surfaceTerms(sk2,2,i,p_Nq-1);
      surfaceTerms(element,
                   sk2,
                   2,
                   i,
                   p_Nq - 1,
                   tau,
                   sgeo,
                   vmapM,
                   vmapP,
                   gradq,
                   s_dqdx,
                   s_dqdy,
                   s_dqdz,
                   s_rhsq);
    }

    @barrier("local");

    // face 1 & 3
    for(int j = 0; j < p_Nq; ++j; @inner(0)) {
      dlong sk1 = element * p_Nfp * p_Nfaces + 1 * p_Nfp + j;
      dlong sk3 = element * p_Nfp * p_Nfaces + 3 * p_Nfp + j;

      //      surfaceTerms(sk1,1,p_Nq-1,j);
      surfaceTerms(element,
                   sk1,
                   1,
                   p_Nq - 1,
                   j,
                   tau,
                   sgeo,
                   vmapM,
                   vmapP,
                   gradq,
                   s_dqdx,
                   s_dqdy,
                   s_dqdz,
                   s_rhsq);

      //      surfaceTerms(sk3,3,0,j);
      surfaceTerms(element,
                   sk3,
                   3,
                   0,
                   j,
                   tau,
                   sgeo,
                   vmapM,
                   vmapP,
                   gradq,
                   s_dqdx,
                   s_dqdy,
                   s_dqdz,
                   s_rhsq);
    }

    @barrier("local");

    // prescale by geofacs
    for(int j = 0; j < p_Nq; ++j) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        // does need the nasty geofacs
        const dlong gid = i + j * p_Nq + element * p_Np * p_Nvgeo;

        const dfloat drdx = vgeo[gid + p_RXID * p_Np];
        const dfloat drdy = vgeo[gid + p_RYID * p_Np];
        const dfloat drdz = vgeo[gid + p_RZID * p_Np];

        const dfloat dsdx = vgeo[gid + p_SXID * p_Np];
        const dfloat dsdy = vgeo[gid + p_SYID * p_Np];
        const dfloat dsdz = vgeo[gid + p_SZID * p_Np];

        const dfloat dtdx = vgeo[gid + p_TXID * p_Np];
        const dfloat dtdy = vgeo[gid + p_TYID * p_Np];
        const dfloat dtdz = vgeo[gid + p_TZID * p_Np];

        // chain rule (need to scale by wei
        const dfloat dqdx = s_dqdx[j][i];
        const dfloat dqdy = s_dqdy[j][i];
        const dfloat dqdz = s_dqdz[j][i];

        s_dqdx[j][i] = (drdx * dqdx + drdy * dqdy + drdz * dqdz);
        s_dqdy[j][i] = (dsdx * dqdx + dsdy * dqdy + dsdz * dqdz);
#if 0
        s_dqdz[j][i] = (dtdx * dqdx + dtdy * dqdy + dtdz * dqdz);
#else
        s_dqdz[j][i] = 0;
#endif
      }
    }

    @barrier("local");

    // loop over slabs
    for(int j = 0; j < p_Nq; ++j) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        dfloat dr = 0, ds = 0, dt = s_dqdz[j][i];

#pragma unroll p_Nq
        for(int n = 0; n < p_Nq; ++n) {
          dr += s_D[n][i] * s_dqdx[j][n];
          ds += s_D[n][j] * s_dqdy[n][i];
        }

        const dlong id = element * p_Np + j * p_Nq + i;
        Aq[id] = s_rhsq[j][i]  + dr + ds + dt;
      }
    }
  }
}
