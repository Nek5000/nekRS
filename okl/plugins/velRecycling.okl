@kernel void setBCVectorValue(const dlong Nelements,
                              const dfloat c,
			      const dlong bcid,
			      const dlong offset,
			      @restrict dfloat *U, 
			      @restrict const  dlong *vmapM,
			      @restrict const  int   *EToB)
{
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    for(int f=0; f<p_Nfaces; f++){
      @barrier("global");
      for(int m=0;m<p_Nfp;++m;@inner(0)){
        const int n = m + f*p_Nfp; 
        const int idM = vmapM[e*p_Nfp*p_Nfaces + n];
        const int id = EToB[f + p_Nfaces*e]; 
        if(id == bcid) {
          U[idM + 0*offset] = c; 
          U[idM + 1*offset] = c; 
          U[idM + 2*offset] = c; 
        }    
      }
    }
  }
}

@kernel void getBCFlux(const dlong Nelements,
                       const  dlong bcid,
                       const  dlong offset,
                       @restrict const  dfloat *U,
                       @restrict const  dlong  *vmapM,
                       @restrict const  int    *EToB,
                       @restrict const  dfloat *sgeo,
                       @restrict        dfloat *Area,
                       @restrict        dfloat *Flux)
{
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    for(int f=0; f<p_Nfaces; f++){
      @barrier("global");
      for(int m=0;m<p_Nfp;++m;@inner(0)){
        const int n = m + f*p_Nfp; 
        const int id = EToB[f + p_Nfaces*e]; 
        const dlong sk = e*p_Nfp*p_Nfaces + n;
        const int idM  = vmapM[sk];

        const dfloat sWJ = sgeo[sk*p_Nsgeo + p_WSJID];
        const dfloat nx  = sgeo[sk*p_Nsgeo + p_NXID];
        const dfloat ny  = sgeo[sk*p_Nsgeo + p_NYID];
        const dfloat nz  = sgeo[sk*p_Nsgeo + p_NZID];
        const dfloat un  = U[idM + 0*offset]*nx + 
                           U[idM + 1*offset]*ny + 
                           U[idM + 2*offset]*nz;

        Area[sk] = 0;
        Flux[sk] = 0;
        if(id == bcid) {
          Area[sk] = sWJ;
          Flux[sk] = sWJ*un;
        }
      }
    }
  }
}

@kernel void scalarMultiply(const dlong N,
                            const dfloat scale,
                            @restrict dfloat *  W){
  
 for(dlong n=0;n<N;++n;@tile(256,@outer,@inner)){
    if(n<N){
      W[n] *= scale;
    }
  }
}

@kernel void sumReduction(const dlong N,
                          @restrict const  dfloat *  w,
                          @restrict const  dfloat *  x,
                          @restrict dfloat *  w1, 
                          @restrict dfloat *  w2){
  

  for(dlong b=0;b<(N+p_blockSize-1)/p_blockSize;++b;@outer(0)){
    
    @shared volatile dfloat s_w1[p_blockSize];
    @shared volatile dfloat s_w2[p_blockSize];
    
    for(int t=0;t<p_blockSize;++t;@inner(0)){
      const dlong id = t + p_blockSize*b;
      const dfloat xid = (id<N)?x[id]:0;
      const dfloat wid = (id<N)?w[id]:0;
      s_w1[t] = wid;
      s_w2[t] = xid;
    }
    
    @barrier("local");
#if p_blockSize>512
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<512){ 
      s_w1[t] += s_w1[t+512];
      s_w2[t] += s_w2[t+512];
    }
    @barrier("local");
#endif
#if p_blockSize>256
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<256){
      s_w1[t] += s_w1[t+256];
      s_w2[t] += s_w2[t+256];
    }
    @barrier("local");
#endif

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<128){
      s_w1[t] += s_w1[t+128];
      s_w2[t] += s_w2[t+128];
    }
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 64){
      s_w1[t] += s_w1[t+64];
      s_w2[t] += s_w2[t+64];
    }
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 32){
      s_w1[t] += s_w1[t+32];
      s_w2[t] += s_w2[t+32];
    }
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 16) {
      s_w1[t] += s_w1[t+16];
      s_w2[t] += s_w2[t+16];
    }
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  8) {
      s_w1[t] += s_w1[t+8];
      s_w2[t] += s_w2[t+8];
    }
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  4) {
      s_w1[t] += s_w1[t+4];
      s_w2[t] += s_w2[t+4];
    }
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  2) {
      s_w1[t] += s_w1[t+2];
      s_w2[t] += s_w2[t+2];
    }
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  1) {
      w1[b] = s_w1[0] + s_w1[1];
      w2[b] = s_w2[0] + s_w2[1];
    }
  }
}
