/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

// block Jacobi preconditioner with inverse of mass matrix
// (assumes mass matrix dominant)
@kernel void ellipticBlockJacobiPrecon(const dlong Nelements,
                                       const dfloat invLambda,
                                       @restrict const dfloat*  vgeo,
                                       @restrict const dfloat*  B,
                                       @restrict const dfloat*  q,
                                       @restrict dfloat*  Pq)
{
  // block partition of elements
  for(dlong eo = 0; eo < Nelements; eo += p_NblockV; @outer(0)) {
    @shared dfloat s_q[p_NblockV][p_Np];
    @shared dfloat s_scale[p_NblockV];

    for(int es = 0; es < p_NblockV; ++es; @inner(1))
      for(int n = 0; n < p_Np; ++n; @inner(0)) {
        const dlong e = es + eo;

        s_q[es][n] = 0;
        if(e < Nelements) {
          // prefetch q
          const dlong id = e * p_Np + n;
          s_q[es][n] = q[id];

          if (n == 0)
            s_scale[es] = invLambda / vgeo[e * p_Nvgeo + p_JID];
        }
      }

    @barrier("local");

    for(int es = 0; es < p_NblockV; ++es; @inner(1)) {
      for(int n = 0; n < p_Np; ++n; @inner(0)) {
        const dlong e = es + eo;

        if(e < Nelements) {
          // compute 1D derivatives
          dfloat Bqn = 0;

#pragma unroll p_Np
          for(int i = 0; i < p_Np; ++i)
            Bqn += B[n + i * p_Np] * s_q[es][i];

          const dlong id = e * p_Np + n;
          Pq[id] = Bqn * s_scale[es];
        }
      }
    }
  }
}

@kernel void ellipticPartialBlockJacobiPrecon(const dlong Nelements,
                                              @restrict const dlong*  elements,
                                              const dfloat invLambda,
                                              @restrict const dfloat*  vgeo,
                                              @restrict const dfloat*  B,
                                              @restrict const dfloat*  q,
                                              @restrict dfloat*  Pq)
{
  // block partition of elements
  for(dlong eo = 0; eo < Nelements; eo += p_NblockV; @outer(0)) {
    @shared dfloat s_q[p_NblockV][p_Np];
    @shared dfloat s_scale[p_NblockV];

    for(int es = 0; es < p_NblockV; ++es; @inner(1))
      for(int n = 0; n < p_Np; ++n; @inner(0)) {
        const dlong e = es + eo;

        s_q[es][n] = 0;
        if(e < Nelements) {
          const dlong element = elements[e];
          // prefetch q
          const dlong id = element * p_Np + n;
          s_q[es][n] = q[id];

          if (n == 0)
            s_scale[es] = invLambda / vgeo[element * p_Nvgeo + p_JID];
        }
      }

    @barrier("local");

    for(int es = 0; es < p_NblockV; ++es; @inner(1)) {
      for(int n = 0; n < p_Np; ++n; @inner(0)) {
        const dlong e = es + eo;

        if(e < Nelements) {
          const dlong element = elements[e];
          // compute 1D derivatives
          dfloat Bqn = 0;

#pragma unroll p_Np
          for(int i = 0; i < p_Np; ++i)
            Bqn += B[n + i * p_Np] * s_q[es][i];

          const dlong id = element * p_Np + n;
          Pq[id] = Bqn * s_scale[es];
        }
      }
    }
  }
}