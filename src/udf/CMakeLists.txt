project(libUDF LANGUAGES CXX)
cmake_minimum_required(VERSION 3.11)

set_property(GLOBAL PROPERTY RULE_MESSAGES OFF)

set (CMAKE_CXX_STANDARD 17)

set(NEKRS_USE_DFLOAT_FLOAT OFF CACHE BOOL "use dfloat = float")

set(CMAKE_SHARED_LIBRARY_SUFFIX ".so")

#set(CMAKE_VERBOSE_MAKEFILE on)

set(OGSDIR ${NEKRS_INSTALL_DIR}/gatherScatter)
set(FINDPTSDIR ${NEKRS_INSTALL_DIR}/pointInterpolation/findpts)
set(GSDIR ${NEKRS_INSTALL_DIR}/gslib)
set(INCLUDE_DIRS
  ${CASE_DIR}
  ${OGSDIR}
  ${OGSDIR}/include
  ${FINDPTSDIR}
  ${GSDIR}
  ${NEKRS_INSTALL_DIR}
  ${NEKRS_INSTALL_DIR}/include
  ${NEKRS_INSTALL_DIR}/include/mesh
  ${NEKRS_INSTALL_DIR}/include/io
  ${NEKRS_INSTALL_DIR}/include/core
  ${NEKRS_INSTALL_DIR}/include/utils
  ${NEKRS_INSTALL_DIR}/include/setup
  ${NEKRS_INSTALL_DIR}/include/udf
  ${NEKRS_INSTALL_DIR}/include/bdry
  ${NEKRS_INSTALL_DIR}/include/setup
  ${NEKRS_INSTALL_DIR}/include/navierStokes
  ${NEKRS_INSTALL_DIR}/include/solvers/elliptic
  ${NEKRS_INSTALL_DIR}/include/solvers/cvode
  ${NEKRS_INSTALL_DIR}/include/nekInterface
  ${NEKRS_INSTALL_DIR}/include/cds
  ${NEKRS_INSTALL_DIR}/include/linAlg
  ${NEKRS_INSTALL_DIR}/include/neknek
  ${NEKRS_INSTALL_DIR}/include/pointInterpolation
  ${NEKRS_INSTALL_DIR}/include/pointInterpolation/findpts
  ${NEKRS_INSTALL_DIR}/include/lpm
  ${NEKRS_INSTALL_DIR}/include/postProcessing
  ${NEKRS_INSTALL_DIR}/occa/include
)

# dummy
add_library(OKL EXCLUDE_FROM_ALL okl.cpp)
target_include_directories(OKL PRIVATE $ENV{NEKRS_UDF_INCLUDES} ${INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR})
target_compile_definitions(OKL PRIVATE -D__okl__)

add_library(UDF SHARED udf.cpp)
target_include_directories(UDF PRIVATE $ENV{NEKRS_UDF_INCLUDES} ${INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR})

if(NEKRS_USE_DFLOAT_FLOAT)
  target_compile_definitions(UDF PUBLIC -DNEKRS_USE_DFLOAT_FLOAT)
endif()

if(APPLE)
    target_link_libraries(UDF "-Wl,-undefined -Wl,dynamic_lookup")
endif()
target_link_libraries(UDF "$ENV{NEKRS_UDF_LDFLAGS}")
target_compile_definitions(UDF PRIVATE $ENV{NEKRS_UDF_DEFINES})

# ascent
if(DEFINED ENV{NEKRS_ENABLE_ASCENT} AND ENV{NEKRS_ENABLE_ASCENT})
find_package(Ascent REQUIRED
             NO_DEFAULT_PATH
             PATHS $ENV{NEKRS_ASCENT_INSTALL_DIR})
  if (ASCENT_FOUND)
    target_link_libraries(UDF ascent::ascent_mpi)
    target_compile_definitions(UDF PRIVATE -DENABLE_ASCENT) 
  endif()
endif() 


