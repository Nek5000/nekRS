#define INTP_NMAX 200 /* number of sample points for 1D profile */
#define TAVG_NFIELDS 8
#define PI (4.*atan(1.))

c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'CASEDATA'

      real x0(3)
      data x0 /0.0, 0.0, 0.0/ 
      save x0

      integer icalld
      save    icalld
      data    icalld /0/

      real    rwk(INTP_NMAX,ldim+1) ! r, s, t, dist2
      integer iwk(INTP_NMAX,3)      ! code, proc, el 
      save    rwk, iwk

      integer nint, intp_h
      save    nint, intp_h

      logical iffpts
      save iffpts

      real xint(INTP_NMAX),yint(INTP_NMAX),zint(INTP_NMAX)
      save xint, yint, zint
      save igs_x, igs_z

      real tavg1d(INTP_NMAX,TAVG_NFIELDS)

      real            tavg(lx1,ly1,lz1,lelt,TAVG_NFIELDS)
      COMMON /CBTAVG/ tavg

      common /gaaa/    wo1(lx1,ly1,lz1,lelv)
     &              ,  wo2(lx1,ly1,lz1,lelv)
     &              ,  wk1(lx1,ly1,lz1,lelv)
     &              ,  wk2(lx1,ly1,lz1,lelv)
     &              ,  wk3(lx1,ly1,lz1,lelv)

      integer bIDs(1)
      save iobj_wall
      n     = nx1*ny1*nz1*nelv

      if (istep.eq.0) then
         bIDs(1) = 1
         call create_obj(iobj_wall,bIDs,1)
         nm = iglsum(nmember(iobj_wall),1)
         if(nid.eq.0) write(6,*) 'obj_wall nmem:', nm 
      endif

c
c     What follows computes statistics ...
c
      if(ifoutfld) then
        if (ldimt.ge.2) call lambda2(t(1,1,1,1,2))
        if (ldimt.ge.3) call comp_vort3(t(1,1,1,1,3),wo1,wo2,vx,vy,vz)
      endif

      if(icalld.eq.0) then
        nxm = 1 ! mesh is linear
        call interp_setup(intp_h,0.0,nxm,nelt)
        nint = 0
        if (nid.eq.0) then
          nint = INTP_NMAX
          call cfill(xint,0.0,size(xint))
          do i = 1,INTP_NMAX 
             yi = (i-1.)/(INTP_NMAX-1)
             yint(i) = yi*YLEN
          enddo
          call cfill(zint,0.0,size(zint))
        endif
        iffpts = .true. ! dummy call to find points
        call interp_nfld(tavg1d,wo2,1,xint,yint,zint,nint,
     $                   iwk,rwk,INTP_NMAX,iffpts,intp_h)
        iffpts = .false.

        if(nid.eq.0) then
           open(unit=58,file='statistics.dat')
           close(58)
           open(unit=58,file='statistics.dat', access='append')
        endif

        icalld = 1
      endif

      if(ifoutfld) then
        call rzero(tavg1d, TAVG_NFIELDS*INTP_NMAX)
        do i = 1,TAVG_NFIELDS
          call interp_nfld(tavg1d(1,i),tavg(1,1,1,1,i),1,xint,yint,zint,
     $                     nint,iwk,rwk,INTP_NMAX,iffpts,intp_h)
        enddo
        if(nid.ne.0) goto 90

        write(6,*) 'Dumping statistics',time

        write(58,'(A,1pe14.7,A)') '#t=', time, 
     $    '  y <u> <w> <T> <dudy> <dwdy> <dTdy> <u''T''> <w''T''>'

        do i = 1,nint
          yy = yint(i)
          um = tavg1d(i,3)
          wm = tavg1d(i,4)
          ang= atan2(wm,um)*180./PI
          uh = sqrt(um*um+wm*wm)
          write(58,3)
     &        yy,
     &        tavg1d(i,1),
     &        tavg1d(i,2),
     &        tavg1d(i,3),
     &        tavg1d(i,4),
     &        tavg1d(i,5),
     &        tavg1d(i,6),
     &        tavg1d(i,7) - tavg1d(i,1)*tavg1d(i,3),
     &        tavg1d(i,8) - tavg1d(i,2)*tavg1d(i,3)
  3       format(1p15e17.9)
        enddo
        write(58,*)
        call flush(58)
  90  endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'CASEDATA'

      common /WFPAR/ gacc
     $              ,thts0, thts, ts_rate, ts_grad
     $              ,fcor,  bcor

      real kx, ky

      ux = 1.0
      uy = 0.0
      uz = 0.0

      ! thin boundary layer at the lower wall
      if(y.le.1.0) then
         kx  = 23
         kz  = 13
         alpha = kx * 2*PI/XLEN
         beta  = kz * 2*PI/ZLEN 

         gamma = 5e-6 ! initial thickness
         epsT  = 0.1/tref
         temp  = (thts0 - 1.)
         if(y.le.0.5) temp = temp + epsT*sin(alpha*x)*sin(beta*z)
      else
         temp = (thts0 - 1.) + ts_grad * (y-1.)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'TOTAL'     ! guarantees GLL mapping of mesh.
      include 'CASEDATA'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2   ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'
      include 'CASEDATA'
      
      common /scnrs/ sc_nrs(20)
      real           sc_nrs

      nlat              = sc_nrs(1)
      uref              = sc_nrs(2)
      lref              = sc_nrs(3)
      tref              = sc_nrs(4)
      ts0               = sc_nrs(5)
      scr               = sc_nrs(6)
      ilstrength        = sc_nrs(7)
      number_elements_x = sc_nrs(8)
      number_elements_y = sc_nrs(9)
      number_elements_z = sc_nrs(10)
      xlen              = sc_nrs(11)
      ylen              = sc_nrs(12)
      zlen              = sc_nrs(13)
      betam             = sc_nrs(14)

      call rescale_x(xm1, 0.0, XLEN)
      call rescale_x(ym1, 0.0, YLEN)
      call rescale_x(zm1, 0.0, ZLEN)

      do iel=1,nelt
      do ifc=1,2*ndim
         if (cbc(ifc,iel,1) .eq. 'W  ') boundaryID(ifc,iel) = 2
         if (cbc(ifc,iel,1) .eq. 'v  ') boundaryID(ifc,iel) = 1

         cbc(ifc,iel,2) = cbc(ifc,iel,1)
         if (cbc(ifc,iel,1) .eq. 'W  ') cbc(ifc,iel,2) = 't  '
         if (cbc(ifc,iel,1) .eq. 'v  ') cbc(ifc,iel,2) = 'f  '
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
      include 'CASEDATA'

      integer icalld
      save    icalld
      data    icalld /0/

      common /WFPAR/ gacc
     $              ,thts0, thts, ts_rate, ts_grad
     $              ,fcor,  bcor

      if(icalld.eq.0) then
        g       = 9.81 
        gacc    = LREF*g/UREF/UREF
        thts0   = TS0/TREF
        ts_rate = SCR * LREF/TREF/UREF/3600
        ts_grad = ILSTRENGTH * LREF/TREF

        Omega = 7.292e-5
        phil  = NLAT*PI/180.
        fcor  = 2.*Omega*LREF/UREF*sin(phil)
        bcor =  2.*Omega*LREF/UREF*cos(phil)

        icalld = 1
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat0
      include 'SIZE'
      include 'TOTAL'

      real            tavg(lx1,ly1,lz1,lelt,TAVG_NFIELDS)
      COMMON /CBTAVG/ tavg

      COMMON /NRSSCPTR/ nrs_scptr(3)
      integer*8         nrs_scptr

      nrs_scptr(1) = loc(tavg)

      return
      end
c-----------------------------------------------------------------------
