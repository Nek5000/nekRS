@kernel void relativeMassHighestMode(const dlong Nelements,
                                     const dlong is,
                                     const dlong offset,
                                     @ restrict const dfloat *fMT,
                                     @ restrict const dfloat *massMatrix,
                                     @ restrict const dfloat *U,
                                     @ restrict dfloat *filteredU,
                                     @ restrict dfloat *logRelativeMassHighestMode)
{
  for (dlong e = 0; e < Nelements; ++e; @outer(0)) { // for all elements
    @shared dfloat s_U[p_Nq][p_Nq];
    @shared dfloat s_FT[p_Nq][p_Nq];
    @shared dfloat s_filtered[p_blockSize];
    @shared dfloat s_unfiltered[p_blockSize];

    @exclusive dfloat r_Un[p_Nq];
    @exclusive dfloat r_U[p_Nq];

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int id = i + j * p_Nq;
        s_FT[j][i] = fMT[id];

#pragma unroll p_Nq
        for (int k = 0; k < p_Nq; ++k)
          r_Un[k] = 0.f;

        for (int k = j * p_Nq + i; k < p_blockSize; k += p_Nq * p_Nq) {
          s_filtered[k] = 0.0;
          s_unfiltered[k] = 0.0;
        }
      }
    }

    @barrier();

    // read and multiply in k
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for (int k = 0; k < p_Nq; ++k) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat uc = U[id + offset];

          // Could be hold for less global reads
          r_U[k] = uc;

#pragma unroll p_Nq
          for (int n = 0; n < p_Nq; ++n) {
            const dfloat Ik = s_FT[k][n];
            r_Un[n] += Ik * uc;
          }
        }
      }
    }

    @barrier();

#ifdef smXX
#pragma unroll p_Nq
#endif
    for (int k = 0; k < p_Nq; ++k) {
      // load slice to @shared
      for (int j = 0; j < p_Nq; ++j; @inner(1))
        for (int i = 0; i < p_Nq; ++i; @inner(0))
          s_U[j][i] = r_Un[k];

      @barrier();

      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          r_Un[k] = 0.f;
#pragma unroll p_Nq
          for (int n = 0; n < p_Nq; n++) {
            const dfloat Ii = s_FT[n][i];
            r_Un[k] += Ii * s_U[j][n];
          }
        }
      }

      @barrier();
      // load multiplied data to shared
      for (int j = 0; j < p_Nq; ++j; @inner(1))
        for (int i = 0; i < p_Nq; ++i; @inner(0))
          s_U[j][i] = r_Un[k];

      @barrier();

      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          r_Un[k] = 0.f;

#pragma unroll p_Nq
          for (int n = 0; n < p_Nq; n++) {
            const dfloat Ij = s_FT[n][j];
            r_Un[k] += Ij * s_U[n][i];
          }
        }
      }

      @barrier();
    }

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for (int k = 0; k < p_Nq; ++k) {
          const int tid = j * p_Nq + i;
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat JW = massMatrix[id];
          const dfloat unfilteredVal = r_U[k];
          const dfloat filteredDiff = unfilteredVal - r_Un[k];

          filteredU[id] = filteredDiff;

          s_filtered[tid] += JW * filteredDiff * filteredDiff;
          s_unfiltered[tid] += JW * unfilteredVal * unfilteredVal;
        }
      }
    }
    @barrier();

// reduce p_Nq * p_Nq to single value
#if p_blockSize > 512
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 512) {
          s_filtered[t] += s_filtered[t + 512];
          s_unfiltered[t] += s_unfiltered[t + 512];
        }
      }
    }
    @barrier();
#endif

#if p_blockSize > 256
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 256) {
          s_filtered[t] += s_filtered[t + 256];
          s_unfiltered[t] += s_unfiltered[t + 256];
        }
      }
    }
    @barrier();
#endif

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 128) {
          s_filtered[t] += s_filtered[t + 128];
          s_unfiltered[t] += s_unfiltered[t + 128];
        }
      }
    }
    @barrier();

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 64) {
          s_filtered[t] += s_filtered[t + 64];
          s_unfiltered[t] += s_unfiltered[t + 64];
        }
      }
    }
    @barrier();

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 32) {
          s_filtered[t] += s_filtered[t + 32];
          s_unfiltered[t] += s_unfiltered[t + 32];
        }
      }
    }
    @barrier();

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 16) {
          s_filtered[t] += s_filtered[t + 16];
          s_unfiltered[t] += s_unfiltered[t + 16];
        }
      }
    }
    @barrier();

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 8) {
          s_filtered[t] += s_filtered[t + 8];
          s_unfiltered[t] += s_unfiltered[t + 8];
        }
      }
    }
    @barrier();

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 4) {
          s_filtered[t] += s_filtered[t + 4];
          s_unfiltered[t] += s_unfiltered[t + 4];
        }
      }
    }
    @barrier();

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 2) {
          s_filtered[t] += s_filtered[t + 2];
          s_unfiltered[t] += s_unfiltered[t + 2];
        }
      }
    }
    @barrier();

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 1) {
          const dfloat filteredNorm = s_filtered[0] + s_filtered[1];
          const dfloat unfilteredNorm = s_unfiltered[0] + s_unfiltered[1];
          const dfloat S = filteredNorm / unfilteredNorm;
          logRelativeMassHighestMode[e] = log10(S);
        }
      }
    }

  }
}
