/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

@kernel void cdsStrongAdvectionVolumeHex3D(const dlong Nelements,
             @restrict const  dfloat *  vgeo,
             @restrict const  dfloat *  D,
             const dlong voffset,
             const dlong soffset,
             @restrict const  dfloat *  U,
             @restrict const  dfloat *  S,
             @restrict const  dfloat *  RHO,
             @restrict dfloat *  NS){

  for(dlong e=0; e<Nelements; ++e; @outer(0)) {
    @shared dfloat s_S[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];

    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          dlong id = i+j*p_Nq;
          if(k==0)
            s_D[0][id] = D[id];
      
          id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
      
          const dfloat Sn = S[id+soffset];
          s_S[k][j][i] = Sn;
        }
      }
    }

    @barrier("local");

    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
  for(int i=0;i<p_Nq;++i;@inner(0)){

    const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
    const dlong id =e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

    const dfloat drdx = vgeo[gid + p_RXID*p_Np];
    const dfloat drdy = vgeo[gid + p_RYID*p_Np];
    const dfloat drdz = vgeo[gid + p_RZID*p_Np];
    const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
    const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
    const dfloat dsdz = vgeo[gid + p_SZID*p_Np];
    const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
    const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
    const dfloat dtdz = vgeo[gid + p_TZID*p_Np];

    dfloat dSdr = 0, dSds = 0, dSdt = 0;

#pragma unroll p_Nq
    for (int n=0;n<p_Nq;n++) {
      const dfloat Dr = s_D[i][n];
      const dfloat Ds = s_D[j][n];
      const dfloat Dt = s_D[k][n];
      dSdr += Dr*s_S[k][j][n];
      dSds += Ds*s_S[k][n][i];
      dSdt += Dt*s_S[n][j][i];
    }

    dfloat dSdx = drdx*dSdr + dsdx*dSds + dtdx*dSdt;
    dfloat dSdy = drdy*dSdr + dsdy*dSds + dtdy*dSdt;
    dfloat dSdz = drdz*dSdr + dsdz*dSds + dtdz*dSdt;
    
    const dfloat u = U[id+0*voffset];
    const dfloat v = U[id+1*voffset];
    const dfloat w = U[id+2*voffset];
    const dfloat rhoM = RHO[id+soffset];

    NS[id] =  rhoM*(u*dSdx + v*dSdy + w*dSdz);
  }
      }
    }
  }
}

@kernel void cdsStrongAdvectionCubatureVolumeHex3D(const dlong Nelements,
                @restrict const  dfloat *  vgeo,
                @restrict const  dfloat *  cubvgeo,
                @restrict const  dfloat *  cubD,
                @restrict const  dfloat *  cubInterpT,
                @restrict const  dfloat *  cubProjectT,
                const dlong voffset,
                const dlong soffset,
                @restrict const  dfloat *  U,
                @restrict const  dfloat *  S, 
                @restrict const  dfloat *  RHO, 
                @restrict dfloat *  NS){
  
  // (phi, U.grad Ud)
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {

    
    @shared dfloat s_cubD[p_cubNq][p_cubNq];
    @shared dfloat s_cubInterpT[p_Nq][p_cubNq];
    @shared dfloat s_cubProjectT[p_cubNq][p_Nq];
    
    @shared dfloat s_U[p_cubNq][p_cubNq];
    @shared dfloat s_V[p_cubNq][p_cubNq];
    @shared dfloat s_W[p_cubNq][p_cubNq];

    @shared dfloat s_U1[p_cubNq][p_cubNq];
    @shared dfloat s_V1[p_cubNq][p_cubNq];
    @shared dfloat s_W1[p_cubNq][p_cubNq];

    @shared dfloat s_S[p_cubNq][p_cubNq];

    @shared dfloat s_S1[p_cubNq][p_cubNq];

    @exclusive dfloat r_U [p_cubNq], r_V [p_cubNq], r_W [p_cubNq];
    @exclusive dfloat r_S [p_cubNq], r_Sd[p_cubNq]; 

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        const int id = i+j*p_cubNq;
        if (id<p_Nq*p_cubNq) {
          s_cubInterpT[0][id] = cubInterpT[id];
          s_cubProjectT[0][id] = cubProjectT[id];
        }
  
        s_cubD[0][id] = cubD[id];
  
  for(int k=0;k<p_cubNq;++k){
    r_U[k]  = 0.f; r_V[k]  = 0.f; r_W[k]  = 0.f; 
    r_S[k] = 0.f; r_Sd[k] = 0.f;
  }
      }
    }

    for(int c=0;c<p_Nq;++c){

      @barrier("local");

      for(int b=0;b<p_cubNq;++b;@inner(1)){
  for(int a=0;a<p_cubNq;++a;@inner(0)){
    if(a<p_Nq && b<p_Nq){
      // this can be improved
      const dlong id = e*p_Np + c*p_Nq*p_Nq + b*p_Nq + a;
      // U.grad U
      s_U[b][a] = U[id+0*voffset]; 
      s_V[b][a] = U[id+1*voffset];
      s_W[b][a] = U[id+2*voffset];      
      s_S[b][a] = S[id+soffset];      
    }
  }
      }
      
      @barrier("local");
      
      // interpolate in 'r' 
      for(int b=0;b<p_cubNq;++b;@inner(1)){
  for(int i=0;i<p_cubNq;++i;@inner(0)){
    if(b<p_Nq){
      dfloat U1  = 0, V1 = 0,  W1 = 0, S1 = 0;
      for(int a=0;a<p_Nq;++a){
        dfloat Iia = s_cubInterpT[a][i];
        U1  += Iia*s_U[b][a];
        V1  += Iia*s_V[b][a];
        W1  += Iia*s_W[b][a];
        S1  += Iia*s_S[b][a];
      }

      s_U1[b][i] = U1;
      s_V1[b][i] = V1;
      s_W1[b][i] = W1;      
      s_S1[b][i] = S1;      
    }
  }
      }

      @barrier("local");

      // interpolate in 's' 
      for(int j=0;j<p_cubNq;++j;@inner(1)){
  for(int i=0;i<p_cubNq;++i;@inner(0)){
    dfloat U2 = 0, V2 = 0,  W2 = 0, S2 = 0; 
    // interpolate in b
    for(int b=0;b<p_Nq;++b){
      dfloat Ijb = s_cubInterpT[b][j];
      U2 += Ijb*s_U1[b][i];
      V2 += Ijb*s_V1[b][i];
      W2 += Ijb*s_W1[b][i];
      S2 += Ijb*s_S1[b][i];
    }

    // interpolate in c progressively
    for(int k=0;k<p_cubNq;++k){
      dfloat Ikc = s_cubInterpT[c][k];
      r_U[k] += Ikc*U2;
      r_V[k] += Ikc*V2;
      r_W[k] += Ikc*W2;
      r_S[k] += Ikc*S2;
    }

    for(int k=0;k<p_cubNq;++k){
      r_Sd[k] = r_S[k]; 
    }
  }
      }
    }

    for(int k=0;k<p_cubNq;++k){

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
  for(int i=0;i<p_cubNq;++i;@inner(0)){    
    s_S1[j][i] = r_Sd[k];
    }
      }

      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
  for(int i=0;i<p_cubNq;++i;@inner(0)){

    dfloat  Sdr = 0, Sds = 0, Sdt = 0;

    for(int n=0;n<p_cubNq;++n){
      dfloat Din = s_cubD[i][n];
      dfloat Djn = s_cubD[j][n];
      dfloat Dkn = s_cubD[k][n];
      //
      Sdr += Din*s_S1[j][n];
      Sds += Djn*s_S1[n][i];
      Sdt += Dkn*r_Sd[n];
    }
   
          const dlong gid = e*p_cubNp*p_Nvgeo+ k*p_cubNq*p_cubNq + j*p_cubNq +i;
          const dfloat drdx = cubvgeo[gid + p_RXID*p_cubNp];
          const dfloat drdy = cubvgeo[gid + p_RYID*p_cubNp];
          const dfloat drdz = cubvgeo[gid + p_RZID*p_cubNp];
          const dfloat dsdx = cubvgeo[gid + p_SXID*p_cubNp];
          const dfloat dsdy = cubvgeo[gid + p_SYID*p_cubNp];
          const dfloat dsdz = cubvgeo[gid + p_SZID*p_cubNp];
          const dfloat dtdx = cubvgeo[gid + p_TXID*p_cubNp];
          const dfloat dtdy = cubvgeo[gid + p_TYID*p_cubNp];
          const dfloat dtdz = cubvgeo[gid + p_TZID*p_cubNp];
          const dfloat JW   = cubvgeo[gid + p_JWID*p_cubNp];
    
          const dfloat Un = r_U[k];
          const dfloat Vn = r_V[k];
          const dfloat Wn = r_W[k];

          const dfloat Uhat = JW*(Un*drdx + Vn*drdy + Wn*drdz);
          const dfloat Vhat = JW*(Un*dsdx + Vn*dsdy + Wn*dsdz);
          const dfloat What = JW*(Un*dtdx + Vn*dtdy + Wn*dtdz);

          // I_f^t*(J_f*C_f^t)*G_f*\hat{D}_f*I_f*u
          r_S[k] = Uhat*Sdr + Vhat*Sds + What*Sdt;
  }
      }
    }
    
    // now project back in t
    for(int c=0;c<p_Nq;++c){

      @barrier("local");
      
      for(int j=0;j<p_cubNq;++j;@inner(1)){
  for(int i=0;i<p_cubNq;++i;@inner(0)){
    
    dfloat rhsS = 0;

    for(int k=0;k<p_cubNq;++k){
      dfloat Ikc = s_cubInterpT[c][k];
      rhsS += Ikc*r_S[k];
    }
    
    s_S[j][i] = rhsS;
  }
      }

      @barrier("local");
      
      for(int b=0;b<p_cubNq;++b;@inner(1)){
  for(int i=0;i<p_cubNq;++i;@inner(0)){
    if(b<p_Nq){
      dfloat rhsS = 0; 

      for(int j=0;j<p_cubNq;++j){
        dfloat Ijb = s_cubInterpT[b][j];
        rhsS += Ijb*s_S[j][i];
      }

      s_S1[b][i] = rhsS;
    }
  }
      }
      
      @barrier("local");
      
      for(int b=0;b<p_cubNq;++b;@inner(1)){
  for(int a=0;a<p_cubNq;++a;@inner(0)){
    if(a<p_Nq && b<p_Nq){
      dfloat rhsS = 0; 

      for(int i=0;i<p_cubNq;++i){
        dfloat Iia = s_cubInterpT[a][i];
        rhsS += Iia*s_S1[b][i];
      }
            const dlong gid = e*p_Np*p_Nvgeo+ c*p_Nq*p_Nq + b*p_Nq +a;
            const dlong id = e*p_Np + c*p_Nq*p_Nq + b*p_Nq + a;
            
            const dfloat IJW   = vgeo[gid + p_IJWID*p_Np];
            const dfloat rhoM = RHO[id+soffset];
            
            NS[id] = rhoM * IJW*rhsS;
          }
        }
      }
    }
  }
}
