/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

// AK: a very simple implementation, will be modified later
@kernel void ellipticBuildDiagonalHex3D(const dlong Nelements,
                                        const dlong offset,
                                        const dlong loffset,
                                        const int allNeumann,
                                        const dfloat allNeumannScale,
                                        @restrict const int*  mapB,
                                        @restrict const dfloat*  ggeo,
                                        @restrict const dfloat*  D,
                                        @restrict const dfloat*  S,
                                        @restrict const dfloat*  MM,
                                        @restrict const dfloat*  lambda,
                                        @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];

    @shared dfloat s_lambda0[p_Nq][p_Nq];
    @shared dfloat s_Grr[p_Nq][p_Nq];
    @shared dfloat s_Gss[p_Nq][p_Nq];
    @exclusive dfloat s_Gtt[p_Nq];
    @exclusive dfloat s_lambdat[p_Nq];

    // prefetch lamda 0
    #pragma unroll p_Nq
    for(int k = 0; k < p_Nq; ++k){
      for(int j = 0; j < p_Nq; ++j; @inner(1)){
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id    = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          const dlong base = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          if(k == 0)
            s_D[j][i] = D[i + p_Nq * j]; // column major

          s_lambda0[j][i] = lambda[id + 0 * offset];
          s_Grr[j][i]     = ggeo[base + p_G00ID * p_Np];
          s_Gss[j][i]     = ggeo[base + p_G11ID * p_Np];
          if(k==0){
            #pragma unroll p_Nq
            for(int l = 0 ; l < p_Nq; ++l){
              const dlong other_base = e * p_Nggeo * p_Np + l * p_Nq * p_Nq + j * p_Nq + i;
              const dlong other_id    = e * p_Np + l * p_Nq * p_Nq + j * p_Nq + i;
              s_Gtt[l]     = ggeo[other_base + p_G22ID * p_Np];
              s_lambdat[l]     = lambda[other_id + 0 * offset];
            }
          }
        }
      }
      @barrier("local");

      // loop over slabs
      for(int j = 0; j < p_Nq; ++j; @inner(1)){
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id          = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          dfloat r_q              = 1.0f;
          const int if_not_masked = (mapB[id] != 1 ) ? 1:0;

          if(if_not_masked) {
            r_q = 0.f; // first make it zero
            const dlong base = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

            dfloat grs      = ggeo[base + p_G01ID * p_Np];
            dfloat grt      = ggeo[base + p_G02ID * p_Np];
            dfloat gst      = ggeo[base + p_G12ID * p_Np];
            dfloat gwJ      = ggeo[base + p_GWJID * p_Np];

            dfloat lambda_1 = lambda[id + 1 * offset];
            dfloat lambda_0 = s_lambda0[j][i];

            r_q += 2.f * grs * lambda_0 * s_D[i][i] * s_D[j][j];
            r_q += 2.f * grt * lambda_0 * s_D[i][i] * s_D[k][k];
            r_q += 2.f * gst * lambda_0 * s_D[j][j] * s_D[k][k];
            //
            for(int m = 0; m < p_Nq; m++) {
              r_q += s_Grr[j][m] * s_lambda0[j][m] * s_D[m][i] * s_D[m][i];
              r_q += s_Gss[m][i] * s_lambda0[m][i] * s_D[m][j] * s_D[m][j];
              r_q += s_Gtt[m] * s_lambdat[m] * s_D[m][k] * s_D[m][k];
            }

            r_q  += gwJ * lambda_1;

            if(allNeumann)
              r_q += allNeumannScale;
          }
          Aq[id] = r_q;
        }
      }
      @barrier("local");
    }
  }
}

// AK: a very simple implementation, will be modified later
@kernel void ellipticBuildDiagonalHex3D_0(const dlong Nelements,
                                          const dlong offset,
                                          const int allNeumann,
                                          const dfloat allNeumannScale,
                                          @restrict const int*  mapB,
                                          @restrict const dfloat*  ggeo,
                                          @restrict const dfloat*  D,
                                          @restrict const dfloat*  S,
                                          @restrict const dfloat*  MM,
                                          @restrict const dfloat*  lambda,
                                          @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];

    @shared dfloat s_lambda0[p_Nq][p_Nq];
    @shared dfloat s_Grr[p_Nq][p_Nq];
    @shared dfloat s_Gss[p_Nq][p_Nq];
    @exclusive dfloat s_Gtt[p_Nq];
    @exclusive dfloat s_lambdat[p_Nq];

    @exclusive dfloat r_q;
    @exclusive int r_masked;

    // prefetch lamda 0
    #pragma unroll p_Nq
    for(int k = 0; k < p_Nq; ++k){
      for(int j = 0; j < p_Nq; ++j; @inner(1)){
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id    = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          const dlong base = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          if(k == 0)
            s_D[j][i] = D[i + p_Nq * j]; // column major

          s_lambda0[j][i] = lambda[id + 0 * offset];
          s_Grr[j][i]     = ggeo[base + p_G00ID * p_Np];
          s_Gss[j][i]     = ggeo[base + p_G11ID * p_Np];
          if( k == 0 ) {
            #pragma unroll p_Nq
            for(int l = 0 ; l < p_Nq; ++l){
              const dlong other_base = e * p_Nggeo * p_Np + l * p_Nq * p_Nq + j * p_Nq + i;
              const dlong other_id    = e * p_Np + l * p_Nq * p_Nq + j * p_Nq + i;
              s_Gtt[l]     = ggeo[other_base + p_G22ID * p_Np];
              s_lambdat[l]     = lambda[other_id + 0 * offset];
            }
          }

          // true if the node is not masked
          r_masked          = (mapB[id] != 1 ) ? 1:0;
          // if the node is masked, initialize to one to make diag invertable
          r_q               = 1.f;
        }
      }
      @barrier("local");
      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id   = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          if(r_masked) {
            r_q = 0.f; // first make it zero
            const dlong base = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

            dfloat grs      = ggeo[base + p_G01ID * p_Np];
            dfloat grt      = ggeo[base + p_G02ID * p_Np];
            dfloat gst      = ggeo[base + p_G12ID * p_Np];
            dfloat gwJ      = ggeo[base + p_GWJID * p_Np];

            dfloat lambda_1 = lambda[id + 1 * offset];
            dfloat lambda_0 = s_lambda0[j][i];

            r_q += 2.f * grs * lambda_0 * s_D[i][i] * s_D[j][j];
            r_q += 2.f * grt * lambda_0 * s_D[i][i] * s_D[k][k];
            r_q += 2.f * gst * lambda_0 * s_D[j][j] * s_D[k][k];
            //
            for(int m = 0; m < p_Nq; m++) {
              r_q += s_Grr[j][m] * s_lambda0[j][m] * s_D[m][i] * s_D[m][i];
              r_q += s_Gss[m][i] * s_lambda0[m][i] * s_D[m][j] * s_D[m][j];
              r_q += s_Gtt[m] * s_lambdat[m] * s_D[m][k] * s_D[m][k];
            }

            r_q  += gwJ * lambda_1;

            if(allNeumann)
              r_q += allNeumannScale;
          }
          Aq[id] = r_q;
        }
      }
    }
  }
}

@kernel void ellipticBlockBuildDiagonalHex3D(const dlong Nelements,
                                             const dlong offset,
                                             const dlong loffset,
                                             const int allNeumann,
                                             const dfloat allNeumannScale,
                                             @restrict const int*  mapB,
                                             @restrict const dfloat*  ggeo,
                                             @restrict const dfloat*  D,
                                             @restrict const dfloat*  S,
                                             @restrict const dfloat*  MM,
                                             @restrict const dfloat*  lambda,
                                             @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];

    @shared dfloat s_lambda0[p_eNfields][p_Nq][p_Nq];
    @shared dfloat s_Grr[p_Nq][p_Nq];
    @shared dfloat s_Gss[p_Nq][p_Nq];
    @exclusive dfloat s_Gtt[p_Nq];
    @exclusive dfloat s_lambdat[p_eNfields][p_Nq];
    // prefetch lamda 0
    #pragma unroll p_Nq
    for(int k = 0; k < p_Nq; ++k){
      for(int j = 0; j < p_Nq; ++j; @inner(1)){
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id    = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          const dlong base = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          if(k == 0)
            s_D[j][i] = D[i + p_Nq * j]; // column major
          //
          s_Grr[j][i]     = ggeo[base + p_G00ID * p_Np];
          s_Gss[j][i]     = ggeo[base + p_G11ID * p_Np];

          for(int l = 0; l < p_eNfields; l++)
            s_lambda0[l][j][i] = lambda[id + 0 * offset + l * loffset];
          if( k == 0 ) {
            #pragma unroll p_Nq
            for(int l = 0 ; l < p_Nq; ++l){
              const dlong other_base = e * p_Nggeo * p_Np + l * p_Nq * p_Nq + j * p_Nq + i;
              const dlong other_id    = e * p_Np + l * p_Nq * p_Nq + j * p_Nq + i;
              s_Gtt[l]     = ggeo[other_base + p_G22ID * p_Np];
              for(int field = 0; field < p_eNfields; field++)
                s_lambdat[field][l] = lambda[other_id + 0 * offset + field * loffset];
            }
          }
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id          = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          dfloat r_q              = 1.0f;

          for(int l = 0; l < p_eNfields; l++) {
            const int if_not_masked = (mapB[id + l * offset] != 1 ) ? 1:0;

            if(if_not_masked) {
              r_q = 0.f; // first make it zero
              const dlong base = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

              dfloat grs      = ggeo[base + p_G01ID * p_Np];
              dfloat grt      = ggeo[base + p_G02ID * p_Np];
              dfloat gst      = ggeo[base + p_G12ID * p_Np];
              dfloat gwJ      = ggeo[base + p_GWJID * p_Np];

              dfloat lambda_1 = lambda[id + 1 * offset + l * loffset];
              dfloat lambda_0 = s_lambda0[l][j][i];

              r_q += 2.f * grs * lambda_0 * s_D[i][i] * s_D[j][j];
              r_q += 2.f * grt * lambda_0 * s_D[i][i] * s_D[k][k];
              r_q += 2.f * gst * lambda_0 * s_D[j][j] * s_D[k][k];
              //
              for(int m = 0; m < p_Nq; m++) {
                r_q += s_Grr[j][m] * s_lambda0[l][j][m] * s_D[m][i] * s_D[m][i];
                r_q += s_Gss[m][i] * s_lambda0[l][m][i] * s_D[m][j] * s_D[m][j];
                r_q += s_Gtt[m] * s_lambdat[l][m] * s_D[m][k] * s_D[m][k];
              }

              r_q  += gwJ * lambda_1;

              if(allNeumann)
                r_q += allNeumannScale;
            }
            Aq[id + l * offset] = r_q;
          }
        }
      }
    }
  }
}
