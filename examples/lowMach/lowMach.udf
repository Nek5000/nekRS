//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"
#include "plugins/lowMach.hpp"
#
#include "ci.inc"

static occa::kernel userQKernel;
static occa::kernel userVpKernel;
occa::memory o_expansionCoeff;

static dfloat P_DELTA;
static dfloat P_GAMMA;

void qtl(nrs_t* nrs, dfloat time, occa::memory o_div)
{

  cds_t *cds   = nrs->cds;
  mesh_t *mesh = nrs->meshV;

  bool realGas = false;

  if (!realGas) {
    lowMach::qThermalIdealGasSingleComponent(time, o_div);
  } else {
    o_expansionCoeff.copyFrom(cds->o_S, nrs->fieldOffset * sizeof(dfloat)); 
    platform->linAlg->ady(mesh->Nlocal,1.0,o_expansionCoeff);
    lowMach::qThermalRealGasSingleComponent(time, o_div, o_expansionCoeff);
  }
}


void userq(nrs_t *nrs, dfloat time, occa::memory o_S, occa::memory o_FS)
{
  cds_t *cds   = nrs->cds;
  mesh_t *mesh = cds->mesh[0];
  userQKernel(mesh->Nelements, mesh->o_x, o_FS);
}

void uservp(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_S,
            occa::memory o_UProp, occa::memory o_SProp)
{
  mesh_t *mesh = nrs->meshV;

  userVpKernel(mesh->Nelements, nrs->fieldOffset, nrs->cds->fieldOffset[0], 
               o_S, o_UProp, o_SProp);
}

/* UDF Functions */                                                      

void UDF_LoadKernels(occa::properties& kernelInfo)
{
  kernelInfo["defines/p_DELTA"] = P_DELTA;
  userQKernel = udfBuildKernel(kernelInfo, "userQ");
  userVpKernel = udfBuildKernel(kernelInfo, "userVp");
  lowMach::buildKernel(kernelInfo);
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) ciSetup(comm, options);
  platform->par->extract("casedata", "p_delta", P_DELTA);
  platform->par->extract("casedata", "p_gamma", P_GAMMA);
  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    double* const nek_cb_scnrs = (double*) nek::ptr("cb_scnrs");
    nek_cb_scnrs[0] = P_DELTA;
    nek_cb_scnrs[1] = P_GAMMA;
  }
}

void UDF_Setup(nrs_t *nrs)
{
  udf.sEqnSource = &userq;
  udf.properties = &uservp;

  lowMach::setup(nrs, P_GAMMA);
  udf.div = &qtl;
  
  o_expansionCoeff = platform->device.malloc(nrs->fieldOffset*sizeof(dfloat));
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  if (nrs->isOutputStep) {
    nek::ocopyToNek(time, tstep);
    nek::userchk();
  }
  if (ciMode) ciTestErrors(nrs, time, tstep);
}
