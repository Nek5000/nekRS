@kernel void weakLaplacianHex3D(const dlong Nelements,
                                const dlong Nscalars,
                                @ restrict const dlong *computeScalar,
                                @ restrict const dlong *fieldOffsetScan,
                                @ restrict const dfloat *ggeo,
                                @ restrict const dfloat *invLMM,
                                @ restrict const dfloat *D,
                                @ restrict const dfloat *lambda,
                                @ restrict const dfloat *q,
                                @ restrict dfloat *Aq)
{
  for (dlong element = 0; element < Nelements; ++element; @outer(0)) {
#if (p_Nq % 2 == 0)
    @shared dfloat s_q[p_Nq][p_Nq + 1];
    @shared dfloat s_Gqr[p_Nq][p_Nq + 1];
    @shared dfloat s_Gqs[p_Nq][p_Nq + 1];
#else
    @shared dfloat s_q[p_Nq][p_Nq];
    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];
#endif

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq];
    @exclusive dfloat r_Aq[p_Nq];

    @exclusive dfloat r_G00[p_Nq], r_G01[p_Nq], r_G02[p_Nq], r_G11[p_Nq], r_G12[p_Nq], r_G22[p_Nq],
        r_GwJ[p_Nq];

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for (int k = 0; k < p_Nq; k++) {
          const dlong gbase = element * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          r_G00[k] = ggeo[gbase + p_G00ID * p_Np];
          r_G01[k] = ggeo[gbase + p_G01ID * p_Np];
          r_G02[k] = ggeo[gbase + p_G02ID * p_Np];

          r_G11[k] = ggeo[gbase + p_G11ID * p_Np];
          r_G12[k] = ggeo[gbase + p_G12ID * p_Np];
          r_G22[k] = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ[k] = ggeo[gbase + p_GWJID * p_Np];
        }
      }
    }

    for (dlong scalarId = 0; scalarId < Nscalars; ++scalarId) {

      @barrier();

      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            const dlong base = i + j * p_Nq + element * p_Np;
            r_q[k] = q[base + k * p_Nq * p_Nq + fieldOffsetScan[scalarId]];
            r_Aq[k] = 0;
          }
        }
      }

      @barrier();

#pragma unroll p_Nq
      for (int k = 0; k < p_Nq; k++) {

        @barrier();

        for (int j = 0; j < p_Nq; ++j; @inner(1)) {
          for (int i = 0; i < p_Nq; ++i; @inner(0)) {
            s_q[j][i] = r_q[k];

            r_qt = 0;

#pragma unroll p_Nq
            for (int m = 0; m < p_Nq; m++)
              r_qt += c_D[k][m] * r_q[m];
          }
        }

        @barrier();

        for (int j = 0; j < p_Nq; ++j; @inner(1)) {
          for (int i = 0; i < p_Nq; ++i; @inner(0)) {
            dfloat qr = 0;
            dfloat qs = 0;

#pragma unroll p_Nq
            for (int m = 0; m < p_Nq; m++) {
              qr += c_D[i][m] * s_q[j][m];
              qs += c_D[j][m] * s_q[m][i];
            }

            const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
            const dfloat r_lam0 = lambda[id + fieldOffsetScan[scalarId]];

            s_Gqs[j][i] = r_lam0 * (r_G01[k] * qr + r_G11[k] * qs + r_G12[k] * r_qt);
            s_Gqr[j][i] = r_lam0 * (r_G00[k] * qr + r_G01[k] * qs + r_G02[k] * r_qt);

            r_Gqt = r_lam0 * (r_G02[k] * qr + r_G12[k] * qs + r_G22[k] * r_qt);
            r_Auk = 0.0;
          }
        }

        @barrier();

        for (int j = 0; j < p_Nq; ++j; @inner(1)) {
          for (int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
            for (int m = 0; m < p_Nq; m++) {
              r_Auk += c_D[m][j] * s_Gqs[m][i];
              r_Aq[m] += c_D[k][m] * r_Gqt;
              r_Auk += c_D[m][i] * s_Gqr[j][m];
            }

            r_Aq[k] += r_Auk;
          }
        }
      }

      @barrier();

      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
            const dfloat imm = invLMM[id];
            dfloat value = Aq[id + fieldOffsetScan[scalarId]];
            value -= r_Aq[k];
            Aq[id + fieldOffsetScan[scalarId]] = value * imm;
          }
        }
      }
    } // field
  }   // element
}
