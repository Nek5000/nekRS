#define p_eighth ((dfloat)0.125)

@kernel void ellipticPartialAxTrilinearHex3D(const dlong Nelements,
                                             const dlong offset,
                                             const dlong loffset,
                                             @ restrict const dlong *elementList,
                                             @ restrict const dfloat *EXYZ,
                                             @ restrict const dfloat *gllzw,
                                             @ restrict const dfloat *D,
                                             @ restrict const dfloat *S,
                                             @ restrict const dfloat *lambda0,
                                             @ restrict const dfloat *lambda1,
                                             @ restrict const dfloat *q,
                                             @ restrict dfloat *Aq)
{
  for (dlong e = 0; e < Nelements; ++e; @outer(0)) {
#if (p_Nq % 2 == 0)
    @shared dfloat s_D[p_Nq][p_Nq + 1];
#else
    @shared dfloat s_D[p_Nq][p_Nq];
#endif
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @shared dfloat s_gllwz[2][p_Nq];
    @shared dfloat s_EXYZ[p_dim][p_Nverts];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq];
    @exclusive dfloat r_Aq[p_Nq];

    @exclusive dlong element;

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    for (int j = 0; j < p_Nq; ++j; @inner(1))
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        s_D[j][i] = D[p_Nq * j + i];

        if (j < 2)
          s_gllwz[j][i] = gllzw[j * p_Nq + i];

        element = elementList[e];
        const dlong base = i + j * p_Nq + element * p_Np;
        for (int k = 0; k < p_Nq; k++) {
          r_q[k] = q[base + k * p_Nq * p_Nq];
          r_Aq[k] = 0;
        }

        int n = i + j * p_Nq;
        while (n < p_Nverts * p_dim) {
          s_EXYZ[0][n] = EXYZ[element * p_Nverts * p_dim + n];
          n += p_Nq * p_Nq;
        }
      }

    @barrier();

#pragma unroll p_Nq
    for (int k = 0; k < p_Nq; k++) {
      @barrier();
      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dfloat rn = s_gllwz[0][i];
          const dfloat sn = s_gllwz[0][j];
          const dfloat tn = s_gllwz[0][k];

#define xe s_EXYZ[0]
#define ye s_EXYZ[1]
#define ze s_EXYZ[2]

          const dfloat xr =
              p_eighth * ((1 - tn) * (1 - sn) * (xe[1] - xe[0]) + (1 - tn) * (1 + sn) * (xe[2] - xe[3]) +
                          (1 + tn) * (1 - sn) * (xe[5] - xe[4]) + (1 + tn) * (1 + sn) * (xe[6] - xe[7]));
          const dfloat xs =
              p_eighth * ((1 - tn) * (1 - rn) * (xe[3] - xe[0]) + (1 - tn) * (1 + rn) * (xe[2] - xe[1]) +
                          (1 + tn) * (1 - rn) * (xe[7] - xe[4]) + (1 + tn) * (1 + rn) * (xe[6] - xe[5]));
          const dfloat xt =
              p_eighth * ((1 - rn) * (1 - sn) * (xe[4] - xe[0]) + (1 + rn) * (1 - sn) * (xe[5] - xe[1]) +
                          (1 + rn) * (1 + sn) * (xe[6] - xe[2]) + (1 - rn) * (1 + sn) * (xe[7] - xe[3]));

          const dfloat yr =
              p_eighth * ((1 - tn) * (1 - sn) * (ye[1] - ye[0]) + (1 - tn) * (1 + sn) * (ye[2] - ye[3]) +
                          (1 + tn) * (1 - sn) * (ye[5] - ye[4]) + (1 + tn) * (1 + sn) * (ye[6] - ye[7]));
          const dfloat ys =
              p_eighth * ((1 - tn) * (1 - rn) * (ye[3] - ye[0]) + (1 - tn) * (1 + rn) * (ye[2] - ye[1]) +
                          (1 + tn) * (1 - rn) * (ye[7] - ye[4]) + (1 + tn) * (1 + rn) * (ye[6] - ye[5]));
          const dfloat yt =
              p_eighth * ((1 - rn) * (1 - sn) * (ye[4] - ye[0]) + (1 + rn) * (1 - sn) * (ye[5] - ye[1]) +
                          (1 + rn) * (1 + sn) * (ye[6] - ye[2]) + (1 - rn) * (1 + sn) * (ye[7] - ye[3]));

          const dfloat zr =
              p_eighth * ((1 - tn) * (1 - sn) * (ze[1] - ze[0]) + (1 - tn) * (1 + sn) * (ze[2] - ze[3]) +
                          (1 + tn) * (1 - sn) * (ze[5] - ze[4]) + (1 + tn) * (1 + sn) * (ze[6] - ze[7]));
          const dfloat zs =
              p_eighth * ((1 - tn) * (1 - rn) * (ze[3] - ze[0]) + (1 - tn) * (1 + rn) * (ze[2] - ze[1]) +
                          (1 + tn) * (1 - rn) * (ze[7] - ze[4]) + (1 + tn) * (1 + rn) * (ze[6] - ze[5]));
          const dfloat zt =
              p_eighth * ((1 - rn) * (1 - sn) * (ze[4] - ze[0]) + (1 + rn) * (1 - sn) * (ze[5] - ze[1]) +
                          (1 + rn) * (1 + sn) * (ze[6] - ze[2]) + (1 - rn) * (1 + sn) * (ze[7] - ze[3]));

          const dfloat J = xr * (ys * zt - zs * yt) - yr * (xs * zt - zs * xt) + zr * (xs * yt - ys * xt);

          const dfloat rx = (ys * zt - zs * yt), ry = -(xs * zt - zs * xt), rz = (xs * yt - ys * xt);
          const dfloat sx = -(yr * zt - zr * yt), sy = (xr * zt - zr * xt), sz = -(xr * yt - yr * xt);
          const dfloat tx = (yr * zs - zr * ys), ty = -(xr * zs - zr * xs), tz = (xr * ys - yr * xs);

          const dfloat W = s_gllwz[1][i] * s_gllwz[1][j] * s_gllwz[1][k];
          const dfloat sc = W / J;

          r_G00 = sc * (rx * rx + ry * ry + rz * rz);
          r_G01 = sc * (rx * sx + ry * sy + rz * sz);
          r_G02 = sc * (rx * tx + ry * ty + rz * tz);
          r_G11 = sc * (sx * sx + sy * sy + sz * sz);
          r_G12 = sc * (sx * tx + sy * ty + sz * tz);
          r_G22 = sc * (tx * tx + ty * ty + tz * tz);

#ifndef p_poisson
          r_GwJ = W * J;
#else
          r_GwJ = 0.0;
#endif
        }
      }

      @barrier();

      for (int j = 0; j < p_Nq; ++j; @inner(1))
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          s_q[j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for (int m = 0; m < p_Nq; m++)
            r_qt += s_D[k][m] * r_q[m];
        }

      @barrier();

      for (int j = 0; j < p_Nq; ++j; @inner(1))
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0;
          dfloat qs = 0;

#pragma unroll p_Nq
          for (int m = 0; m < p_Nq; m++) {
            qr += s_D[i][m] * s_q[j][m];
            qs += s_D[j][m] * s_q[m][i];
          }

          s_Gqs[j][i] = (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_Gqr[j][i] = (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          r_Gqt = lambda0[0] * (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          r_Auk = r_GwJ * lambda1[0] * r_q[k];
        }

      @barrier();

      for (int j = 0; j < p_Nq; ++j; @inner(1))
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for (int m = 0; m < p_Nq; m++) {
            r_Auk += s_D[m][j] * s_Gqs[m][i];
            r_Aq[m] += s_D[k][m] * r_Gqt; // DT(m,k)*ut(i,j,k,e)
            r_Auk += s_D[m][i] * s_Gqr[j][m];
          }

          r_Aq[k] += r_Auk;
        }
    }
    @barrier();

    for (int j = 0; j < p_Nq; ++j; @inner(1))
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for (int k = 0; k < p_Nq; k++) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id] = r_Aq[k];
        }
      }
  }
}
