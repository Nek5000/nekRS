//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"

#include "ci.inc"

static occa::kernel cFillKernel;

static int updateProperties = 1;

void userq(nrs_t *nrs, dfloat time, occa::memory o_S, occa::memory o_FS)
{
  cds_t *cds   = nrs->cds;
  mesh_t *mesh = cds->mesh;
  const dfloat qvolFluid = 0.0;
  const dfloat qvolSolid = 1.0;
  cFillKernel(mesh->Nelements, qvolFluid, qvolSolid, mesh->o_elementInfo, o_FS);
}

void uservp(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_S,
            occa::memory o_UProp, occa::memory o_SProp)
{
  cds_t *cds   = nrs->cds;

  if(updateProperties) {
    if(platform->comm.mpiRank == 0) cout << "updating properties" << "\n";
    const dfloat rho = 1.0;
    const dfloat mue = 1/1000.0;
    const dfloat rhoCpFluid = rho*1.0;
    const dfloat conFluid = mue;
    const dfloat rhoCpSolid = rhoCpFluid*0.1;
    const dfloat conSolid = 10*conFluid;

    // velocity 
    const occa::memory o_mue = o_UProp.slice(0*nrs->fieldOffset*sizeof(dfloat));
    const occa::memory o_rho = o_UProp.slice(1*nrs->fieldOffset*sizeof(dfloat));
    cFillKernel(nrs->mesh->Nelements, mue, 0, nrs->mesh->o_elementInfo, o_mue);
    cFillKernel(nrs->mesh->Nelements, rho, 0, nrs->mesh->o_elementInfo, o_rho);
    // temperature 
    const occa::memory o_con   = o_SProp.slice(0*cds->fieldOffset*sizeof(dfloat));
    const occa::memory o_rhoCp = o_SProp.slice(1*cds->fieldOffset*sizeof(dfloat));
    cFillKernel(cds->mesh->Nelements, conFluid, conSolid, nrs->mesh->o_elementInfo, o_con);
    cFillKernel(cds->mesh->Nelements, rhoCpFluid, rhoCpSolid, nrs->mesh->o_elementInfo, o_rhoCp);
    updateProperties = 0;
  }
}

/* UDF Functions */                                                      

void UDF_LoadKernels(nrs_t *nrs)
{
  cFillKernel = udfBuildKernel(nrs, "cFill");
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) ciSetup(comm, options);
}

void UDF_Setup(nrs_t *nrs)
{
  udf.sEqnSource = &userq;
  udf.properties = &uservp;
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  if (nrs->isOutputStep) {
    nek_ocopyFrom(time, tstep);
    nek_userchk();
  }
  if (ciMode) ciTestErrors(nrs, time, tstep);
}
