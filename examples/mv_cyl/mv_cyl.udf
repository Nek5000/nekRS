//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"
#include "plugins/lowMach.hpp"
#include "casedata.h"

#include "ci.inc"

static occa::kernel userVpKernel;
static occa::kernel userMeshVelocityKernel;
 
void userq(nrs_t* nrs, dfloat time, occa::memory o_S, occa::memory o_SU)
{
  lowMach::dpdt(o_SU);
}

void qtl(nrs_t* nrs, dfloat time, occa::memory o_div)
{
  lowMach::qThermalIdealGasSingleComponent(time, o_div);
}

void uservp(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_S,
            occa::memory o_UProp, occa::memory o_SProp)
{
  mesh_t *mesh = nrs->meshV;

  userVpKernel(mesh->Nelements, nrs->fieldOffset, nrs->cds->fieldOffset[0], nrs->p0th[0],
               o_S, o_UProp, o_SProp);
  if(platform->options.compareArgs("MESH SOLVER", "ELASTICITY")){
    // moving mesh parameters
    const dfloat vnu = 0.4;
    const dfloat ce = 1.0 / (1.0 + vnu);
    const dfloat c2 = vnu * ce / (1.0 - 2.0 * vnu);
    const dfloat c3 = 0.5 * ce;
    auto o_mesh_diff = o_UProp + 2 * nrs->fieldOffset * sizeof(dfloat);
    auto o_mesh_rho  = o_UProp + 3 * nrs->fieldOffset * sizeof(dfloat);
    platform->linAlg->fill(nrs->meshV->Nlocal, c2, o_mesh_diff);
    platform->linAlg->fill(nrs->meshV->Nlocal, c3, o_mesh_rho);
  }
}

/* UDF Functions */                                                      

void UDF_LoadKernels(nrs_t *nrs)
{
  occa::properties& kernelInfo = *(nrs->kernelInfo);
  kernelInfo["defines/" "p_PI"] = P_PI;
  kernelInfo["defines/" "p_OMEGA"] = P_OMEGA;
  kernelInfo["defines/" "p_AMP"] = P_AMP;
  userVpKernel = udfBuildKernel(nrs, "userVp");
  userMeshVelocityKernel = udfBuildKernel(nrs, "userMeshVelocity");
  lowMach::buildKernel(nrs);
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) ciSetup(comm, options);
}

void UDF_Setup(nrs_t *nrs)
{
  udf.properties = &uservp;
  udf.sEqnSource = &userq;

  lowMach::setup(nrs, P_GAMMA);
  udf.div = &qtl;
}
void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  mesh_t* mesh = nrs->meshV;
  cds_t* cds = nrs->cds;
  linAlg_t* linAlg = platform->linAlg;
  if(platform->options.compareArgs("MESH SOLVER", "USER")){
    const dfloat ymin = linAlg->min(mesh->Nlocal, mesh->o_y, platform->comm.mpiComm);
    const dfloat ymax = linAlg->max(mesh->Nlocal, mesh->o_y, platform->comm.mpiComm);
    userMeshVelocityKernel(mesh->Nelements,
      nrs->fieldOffset,
      ymin,
      ymax,
      time,
      mesh->o_y,
      mesh->o_U);
  }

  if(nrs->isOutputStep){
    nek::ocopyToNek(time, tstep);
    nek::userchk();
  }
  if (ciMode) ciTestErrors(nrs, time, tstep);
}
