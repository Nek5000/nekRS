

@kernel void getBCFlux(const dlong Nelements,
                       const dlong bcid,
                       const dlong offset,
                       @ restrict const dfloat *U,
                       @ restrict const dlong *vmapM,
                       @ restrict const int *EToB,
                       @ restrict const dfloat *sgeo,
                       @ restrict dfloat *Area,
                       @ restrict dfloat *Flux)
{
  for (dlong e = 0; e < Nelements; e++; @outer(0))
    for (int f = 0; f < p_Nfaces; f++) {
      @barrier();
      for (int m = 0; m < p_Nfp; ++m; @inner(0)) {
        const int n = m + f * p_Nfp;
        const int id = EToB[f + p_Nfaces * e];
        const dlong sk = e * p_Nfp * p_Nfaces + n;
        const int idM = vmapM[sk];

        const dfloat sWJ = sgeo[sk * p_Nsgeo + p_WSJID];
        const dfloat nx = sgeo[sk * p_Nsgeo + p_NXID];
        const dfloat ny = sgeo[sk * p_Nsgeo + p_NYID];
        const dfloat nz = sgeo[sk * p_Nsgeo + p_NZID];
        const dfloat un = U[idM + 0 * offset] * nx + U[idM + 1 * offset] * ny + U[idM + 2 * offset] * nz;

        Area[sk] = 0;
        Flux[sk] = 0;
        if (id == bcid) {
          Area[sk] = sWJ;
          Flux[sk] = sWJ * un;
        }
      }
    }
}
