//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"

#include "casedata.h"

/* User Functions */

occa::kernel coriolisKernel; 

void userf(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_FU)
{
  mesh_t* mesh = nrs->mesh;
  coriolisKernel(
    mesh->Nlocal, 
    nrs->fieldOffset, 
    nrs->mesh->o_y,
    nrs->cds->o_S,
    nrs->o_U,
    o_FU);
}


/* UDF Functions */                                                      

void UDF_LoadKernels(nrs_t *nrs)
{
  occa::properties& kernelInfo = *nrs->kernelInfo;
  setupAide &options = nrs->options;

  dfloat cond;
  options.getArgs("SCALAR00 DIFFUSIVITY", cond);
  const dfloat g = 9.81;
  const dfloat omega = 7.2921159e-5; 

  kernelInfo["defines/p_fcor"]      = 2*omega*LREF/UREF * sin(NLAT*M_PI/180);
  kernelInfo["defines/p_bcor"]      = 2*omega*LREF/UREF * cos(NLAT*M_PI/180);
  kernelInfo["defines/p_gacc"]      = LREF*g/(UREF*UREF);
  kernelInfo["defines/p_cond"]      = cond;
  kernelInfo["defines/p_TsGrad"]    = ILSTRENGTH * LREF/TREF;
  kernelInfo["defines/p_T0s"]       = TS0/TREF;
  kernelInfo["defines/p_sCoolRate"] = SCR * LREF/TREF/UREF/3600;
  kernelInfo["defines/p_YLEN"]      = YLEN;

  coriolisKernel = udfBuildKernel(nrs, "coriolis");
}

void UDF_Setup(nrs_t *nrs)
{
  udf.uEqnSource = &userf;
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  if (nrs->isOutputStep) {
    nek_ocopyFrom(time, tstep);
    nek_userchk();
    nek_ocopyTo(time);
  }
}
