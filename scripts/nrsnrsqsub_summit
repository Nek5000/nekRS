#/bin/bash

: ${PROJ_ID:=""}
: ${QUEUE:="batch"} # batch, batch-hm, debug

 : ${NEKRS_HOME:="$HOME/.local/nekrs"} 
 #: ${OCCA_CACHE_DIR:="$PWD/.cache/occa"}


if [ $# -ne 6 ]; then
  echo "usage: [PROJ_ID] [CPUONLY=1] $0 <caseA> <caseB> <#compute nodes> <procsA> <procsB> <hh:mm>"
  echo "not $# args"
  exit 0
fi

if [ -z "$PROJ_ID" ]; then
  echo "ERROR: PROJ_ID is empty"
  exit 1
fi
if [ -z "$QUEUE" ]; then
  echo "ERROR: QUEUE is empty"
  exit 1
fi

export NVME_HOME="/mnt/bb/$USER/"

# temporary load xl modules for OLCF_XLC_ROOT
module load xl
XL_HOME="$OLCF_XLC_ROOT"

# reload previously used module
module load gcc

: ${CPUONLY:=0}
export NEKRS_HOME
#export OCCA_CACHE_DIR
export NEKRS_HYPRE_NUM_THREADS=1
export NEKRS_GPU_MPI=1
if [ $CPUONLY -eq 1 ]; then
  export OCCA_CXX="$XL_HOME/bin/xlc++"
  export OCCA_CXXFLAGS="-O3 -qarch=pwr9 -qhot -DUSE_OCCA_MEM_BYTE_ALIGN=64"
  export OCCA_LDFLAGS="$XL_HOME/lib/libibmc++.a"
fi

#export OMPI_LD_PRELOAD_POSTPEND=$OLCF_SPECTRUM_MPI_ROOT/lib/libmpitrace.so

# optimize for BW
export PAMI_ENABLE_STRIPING=1
export PAMI_IBV_ADAPTER_AFFINITY=1
export PAMI_IBV_DEVICE_NAME="mlx5_0:1,mlx5_3:1"
export PAMI_IBV_DEVICE_NAME_1="mlx5_3:1,mlx5_0:1"

export OMPI_MCA_io=romio321
export ROMIO_HINTS="$(pwd)/.romio_hint"
if [ ! -f "$ROMIO_HINTS" ]; then
  echo "romio_no_indep_rw true"   >$ROMIO_HINTS
  echo "romio_cb_write enable"   >>$ROMIO_HINTS
  echo "romio_ds_write enable"   >>$ROMIO_HINTS
  echo "romio_cb_read enable"    >>$ROMIO_HINTS
  echo "romio_ds_read enable"    >>$ROMIO_HINTS
  echo "cb_buffer_size 16777216" >>$ROMIO_HINTS
  echo "cb_config_list *:1"      >>$ROMIO_HINTS
fi

module unload darshan-runtime
module load gcc

bin=$NEKRS_HOME/bin/nekrs
caseA=$1
caseB=$2

nodes=$3
procsA=$4
procsB=$5

gpu_per_node=6
cores_per_socket=21
let nn=$nodes*$gpu_per_node
let ntasks=nn
time=$6
backend=CUDA

if [ $CPUONLY -eq 1 ]; then
  backend=CPU
  let nn=2*$nodes
  let ntasks=$nn*$cores_per_socket
fi

let nn_chk=$procsA+$procsB
if [[ $nn_chk -ne $nn ]]; then
  echo "#mpi: "$procsA"+"$procsB" does not match "$nodes" nodes!"
  exit 1
fi

if [ ! -f $bin ]; then
  echo "Cannot find" $bin
  exit 1
fi

if [ ! -d $caseA ]; then
  echo "Cannot find folder" $caseA
  exit 1
fi

if [ ! -d $caseB ]; then
  echo "Cannot find folder" $caseB
  exit 1
fi

list=($caseA/$caseA.par $caseA/$caseA.udf $caseA/$caseA.oudf $caseA/$caseA.re2\
      $caseB/$caseB.par $caseB/$caseB.udf $caseB/$caseB.oudf $caseB/$caseB.re2)
for f in ${list[@]}; do
  if [ ! -f $f ]; then
    echo "Cannot find" $f
    exit 1
  fi
done

# NekNek sess file
NNSESS="neknek.sess"
echo $caseA"/"$caseA":"$procsA";" >  $NNSESS
echo $caseB"/"$caseB":"$procsB";" >> $NNSESS


#mkdir -p $OCCA_CACHE_DIR 2>/dev/null

while true; do
  read -p "Do you want precompile (recommended)? [N]" yn
  case $yn in
    [Yy]* )
      echo $NEKRS_HOME
      OCCA_VERBOSE=1 mpirun -pami_noib -np 1 $NEKRS_HOME/bin/nekrs --setup $caseA/$caseA --build-only $procsA --backend $backend;
      if [ $? -ne 0 ]; then
        exit 1
      fi
      OCCA_VERBOSE=1 mpirun -pami_noib -np 1 $NEKRS_HOME/bin/nekrs --setup $caseB/$caseB --build-only $procsB --backend $backend;
      if [ $? -ne 0 ]; then
        exit 1
      fi
      break ;;
    * )
      break ;;
  esac
done


if [ $CPUONLY -eq 1 ]; then
  jsrun="jsrun -X 1 -n$nn -a$cores_per_socket -c$cores_per_socket -g0 -b packed:1 -d packed $bin --setup ${NNSESS} --backend $backend"
else
  jsrun="jsrun --smpiargs='-gpu' -X 1 -n$nn -r$gpu_per_node -a1 -c2 -g1 -b rs -d packed $bin --setup ${NNSESS} --backend $backend --device-id 0"
fi

cmd="bsub -q $QUEUE -nnodes $nodes -alloc_flags NVME -W $time -P $PROJ_ID -J nekRS_${caseA}_${caseB} \"${jsrun}\""
echo $cmd
$cmd



