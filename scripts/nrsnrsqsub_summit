#/bin/bash

: ${PROJ_ID:=""}

if [ -z "$PROJ_ID" ]; then
  echo "ERROR: PROJ_ID is empty"
  exit 1
fi

if [ $# -ne 7 ]; then
  echo "usage: [PROJ_ID] [CPUONLY=1] $0 <sess> <case1> <case2> <number of compute nodes> <procsA> <procsB> <hh:mm>"
  echo "not $# args"
  exit 0
fi

: ${NEKRS_HOME:="$HOME/.local/nekrs"}
: ${OCCA_CACHE_DIR:="$PWD/.cache/occa"}
NVME_HOME="/mnt/bb/$USER/"

# temporary load xl modules for OLCF_XLC_ROOT
module load xl
XL_HOME="$OLCF_XLC_ROOT"

# reload previously used module
module load gcc

: ${CPUONLY:=0}
export NEKRS_HOME
export OCCA_CACHE_DIR
export NEKRS_HYPRE_NUM_THREADS=1
export NEKRS_GPU_MPI=1
if [ $CPUONLY -eq 1 ]; then
  export OCCA_CXX="$XL_HOME/bin/xlc++" 
  export OCCA_CXXFLAGS="-O3 -qarch=pwr9 -qhot -DUSE_OCCA_MEM_BYTE_ALIGN=64" 
  export OCCA_LDFLAGS="$XL_HOME/lib/libibmc++.a"
fi

#export OMPI_LD_PRELOAD_POSTPEND=$OLCF_SPECTRUM_MPI_ROOT/lib/libmpitrace.so

# optimize for BW
export PAMI_ENABLE_STRIPING=1
export PAMI_IBV_ADAPTER_AFFINITY=1
export PAMI_IBV_DEVICE_NAME="mlx5_0:1,mlx5_3:1"
export PAMI_IBV_DEVICE_NAME_1="mlx5_3:1,mlx5_0:1"

export OMPI_MCA_io=romio321
export ROMIO_HINTS="$(pwd)/.romio_hint"
if [ ! -f "$ROMIO_HINTS" ]; then
  echo "romio_no_indep_rw true"   >$ROMIO_HINTS
  echo "romio_cb_write enable"   >>$ROMIO_HINTS
  echo "romio_ds_write enable"   >>$ROMIO_HINTS
  echo "romio_cb_read enable"    >>$ROMIO_HINTS
  echo "romio_ds_read enable"    >>$ROMIO_HINTS
  echo "cb_buffer_size 16777216" >>$ROMIO_HINTS
  echo "cb_config_list *:1"      >>$ROMIO_HINTS
fi

module unload darshan-runtime
module load gcc

bin=$NEKRS_HOME/bin/nekrs
sess=$1
caseA=$2
caseB=$3
nodes=$4
procsA=$5
procsB=$6
gpu_per_node=6
cores_per_socket=21
let nn=$nodes*$gpu_per_node
let ntasks=nn
time=$7
backend=CUDA

if [ $CPUONLY -eq 1 ]; then
  backend=CPU
  let nn=2*$nodes
  let ntasks=$nn*$cores_per_socket
fi 

if [ ! -f $bin ]; then
  echo "Cannot find" $bin
  exit 1
fi

if [ ! -f $caseA/$caseA.par ]; then
  echo "Cannot find" $caseA.par
  exit 1
fi

if [ ! -f $caseA/$caseA.udf ]; then
  echo "Cannot find" $caseA.udf
  exit 1
fi

if [ ! -f $caseA/$caseA.oudf ]; then
  echo "Cannot find" $caseA.oudf
  exit 1
fi

if [ ! -f $caseA/$caseA.re2 ]; then
  echo "Cannot find" $caseA.re2
  exit 1
fi

if [ ! -f $caseB/$caseB.par ]; then
  echo "Cannot find" $caseB.par
  exit 1
fi

if [ ! -f $caseB/$caseB.udf ]; then
  echo "Cannot find" $caseB.udf
  exit 1
fi

if [ ! -f $caseB/$caseB.oudf ]; then
  echo "Cannot find" $caseB.oudf
  exit 1
fi

if [ ! -f $caseB/$caseB.re2 ]; then
  echo "Cannot find" $caseB.re2
  exit 1
fi

mkdir -p $OCCA_CACHE_DIR 2>/dev/null

while true; do
  read -p "Do you want precompile (recommended)? [N]" yn
  case $yn in
    [Yy]* )
      echo $NEKRS_HOME
      OCCA_VERBOSE=1 mpirun -pami_noib -np 1 $NEKRS_HOME/bin/nekrs --setup $caseA/$caseA --build-only $procsA --backend $backend;
      if [ $? -ne 0 ]; then
        exit 1
      fi
      OCCA_VERBOSE=1 mpirun -pami_noib -np 1 $NEKRS_HOME/bin/nekrs --setup $caseB/$caseB --build-only $procsB --backend $backend;
      if [ $? -ne 0 ]; then
        exit 1
      fi
      break ;;
    * )
      break ;;
  esac
done

export IO_STEPS="jsrun -X 1 -n$nodes -r1 -a1 -c1 -g0 -b packed:1 -d packed cp -a $OCCA_CACHE_DIR/* $NVME_HOME; export OCCA_CACHE_DIR=$NVME_HOME; "
export POST_STEPS="mv ${caseA}/${caseA}.log nekRS_${caseA}.\$LSB_JOBID; mv ${caseB}/${caseB}.log nekRS_${caseB}.\$LSB_JOBID;"

if [ $CPUONLY -eq 1 ]; then
  jsrun="jsrun -X 1 -n$nn -a$cores_per_socket -c$cores_per_socket -g0 -b packed:1 -d packed $bin --setup ${sess} --backend $backend"
else
  jsrun="jsrun --smpiargs='-gpu' -X 1 -n$nn -r$gpu_per_node -a1 -c2 -g1 -b rs -d packed $bin --setup ${sess} --backend $backend --device-id 0"
fi

cmd="bsub -nnodes $nodes -alloc_flags NVME -W $time -P $PROJ_ID -J nekRS_${sess} '${IO_STEPS} ${jsrun}; ${POST_STEPS}'"
echo $cmd
$cmd
