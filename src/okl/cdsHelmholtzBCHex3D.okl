/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

#define surfaceTerms(sk,face,i, j)                                      \
  {									\
    struct bcData bc;  \
    bc.idM = vmapM[sk];   bc.time = time;  \
    bc.nx = sgeo[sk*p_Nsgeo+p_NXID];        \
    bc.ny = sgeo[sk*p_Nsgeo+p_NYID];        \
    bc.nz = sgeo[sk*p_Nsgeo+p_NZID];        \
    bc.x   = x[bc.idM]; \
    bc.y   = y[bc.idM]; \
    bc.z   = z[bc.idM]; \
                                                                      \
    const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];      \
    bc.sF= 0.f; bc.sP=0.f;                                        \
    bc.id = mapB[bc.idM];                                 \
   if(bc.id==1) {                                                            \
      cdsDirichletConditions3D(&bc);\
    }                                                                     \
    if(bc.id==2) {                                                            \
      cdsNeumannConditions3D(&bc); \
    }                                                                       \
                                                                        \
    s_U  [j][i] =  bc.sP;							\
    s_ndU[j][i] = -WsJ*(bc.sF);          \
  }

//RHS contributions for continuous solver
@kernel void cdsHelmholtzBCHex3D(const dlong Nelements,
				@restrict const  dfloat *  ggeo,
				@restrict const  dfloat *  sgeo,
				@restrict const  dfloat *  D,
				@restrict const  dfloat *  S,
				@restrict const  dfloat *  MM,
				@restrict const  dlong  *  vmapM,
				@restrict const  int    *  EToB,
				@restrict const  dlong  *  sMT,
				const dfloat lambda,
				const dfloat time,
				@restrict const  dfloat *  x,
				@restrict const  dfloat *  y,
				@restrict const  dfloat *  z,
				@restrict const  int    *  mapB,
				@restrict dfloat *  rhsU){


  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_U[p_Nq][p_Nq];
    @shared dfloat s_ndU[p_Nq][p_Nq];

#define s_Gur s_ndU

    @shared dfloat s_Gus[p_Nq][p_Nq];
    @exclusive dfloat r_ut, r_Gut, r_Auk;
    @exclusive dfloat r_U[p_Nq];//  array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_rhsU[p_Nq]; // array  for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    // for all face nodes of all elements
    // face 0
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

#pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          r_U[k] = 0.f;
          r_rhsU[k] = 0.f;
        }

        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i + j*p_Nq;
        surfaceTerms(sk0,0,i,j);
      }
    }

    @barrier("local");

    // face 0
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	//face 0
	r_U   [0]  = s_U  [j][i];
	if(EToB[e*p_Nfaces+0]>0){
	  r_rhsU[0] += s_ndU[j][i];
	}
      }
    }
    
    @barrier("local");    
    
    // face 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + i + j*p_Nq;
        surfaceTerms(sk5,5,i,j);
      }
    }

    @barrier("local");

    // face 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	//face 5
	r_U   [p_Nq-1]  = s_U  [j][i];
	if(EToB[e*p_Nfaces+5]>0){
	  r_rhsU[p_Nq-1] += s_ndU[j][i];
	}
      }
    }
    
    @barrier("local");    

    // face 1
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){	
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + i + k*p_Nq;
        surfaceTerms(sk1,1,i,k);
      }
    }

    @barrier("local");

    // face 1
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (j==0) {//face 1
#pragma unroll p_Nq
	  for (int k=0;k<p_Nq;k++) {
	    r_U   [k]  = s_U  [k][i];
	    if(EToB[e*p_Nfaces+1]>0){
	      r_rhsU[k] += s_ndU[k][i];
	    }
	  }
        }
      }
    }

    @barrier("local");    

    // face 3
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + i + k*p_Nq;
        surfaceTerms(sk3,3,i,k);
      }
    }

    @barrier("local");

    // face 3
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (j==p_Nq-1) {//face 3
#pragma unroll p_Nq
	  for (int k=0;k<p_Nq;k++) {
	    r_U[k]  = s_U[k][i];
	    if(EToB[e*p_Nfaces+3]>0){
	      r_rhsU[k] += s_ndU[k][i];
	    }
	  }
	}
      }
    }

    @barrier("local");    
    
    // face 2
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + j + k*p_Nq;
        surfaceTerms(sk2,2,j,k);
      }
    }
    
    @barrier("local");
    
    // face 2 
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (i==p_Nq-1) {//face 2
#pragma unroll p_Nq
	  for (int k=0;k<p_Nq;k++) {
	    r_U[k] = s_U[k][j];
	    if(EToB[e*p_Nfaces+2]>0){
	      r_rhsU[k] += s_ndU[k][j];
	    }
	  }
        }
      }
    }
    
    @barrier("local"); 

    // face 4
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + j + k*p_Nq;
        surfaceTerms(sk4,4,j,k);
      }
    }

    @barrier("local");

    // face 4
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (i==0) {//face 4
#pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_U[k]  = s_U[k][j];
	    if(EToB[e*p_Nfaces+4]>0){
	      r_rhsU[k] += s_ndU[k][j];
	    }
          }
        }
      }
    }
    
    @barrier("local"); 

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	    
	  // prefetch geometric factors
	  const dlong gbase = e*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	    
	  r_G00 = ggeo[gbase+p_G00ID*p_Np];
	  r_G01 = ggeo[gbase+p_G01ID*p_Np];
	  r_G02 = ggeo[gbase+p_G02ID*p_Np];
	    
	  r_G11 = ggeo[gbase+p_G11ID*p_Np];
	  r_G12 = ggeo[gbase+p_G12ID*p_Np];
	  r_G22 = ggeo[gbase+p_G22ID*p_Np];
	    
	  r_GwJ = ggeo[gbase+p_GWJID*p_Np];
	}
      }

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  // share u(:,:,k)
	  s_U[j][i] = r_U[k];
	  r_ut = 0;
#pragma	  unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    const dfloat Dt = s_D[k][m];
	    r_ut += Dt*r_U[m];
	  }
	}
      }

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  dfloat ur = 0.f;
	  dfloat us = 0.f;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    const dfloat Dr = s_D[i][m];
	    const dfloat Ds = s_D[j][m];
	    ur += Dr*s_U[j][m];
	    us += Ds*s_U[m][i];
	  }

	  s_Gus[j][i] = (r_G01*ur + r_G11*us + r_G12*r_ut);
	  s_Gur[j][i] = (r_G00*ur + r_G01*us + r_G02*r_ut);
	  // put this here for a performance bump
	  r_Gut = (r_G02*ur + r_G12*us + r_G22*r_ut);
	  r_Auk = r_GwJ*lambda*r_U[k];
	}
      }

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++){
	    const dfloat Dr = s_D[m][i];
	    const dfloat Ds = s_D[m][j];
	    const dfloat Dt = s_D[k][m];
	    r_Auk     += Dr*s_Gur[j][m];
	    r_Auk     += Ds*s_Gus[m][i];
	    r_rhsU[m] += Dt*r_Gut; // DT(m,k)*ut(i,j,k,e)
	  }
	  r_rhsU[k] += r_Auk;
	}
      }
    }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
	for(int k = 0; k < p_Nq; k++){
	  const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	  rhsU[id] -= r_rhsU[k];
	}
      }
    }
  }
}

@kernel void cdsHelmholtzAddBCHex3D(const dlong Nelements,
				   const dfloat time,
				   @restrict const  dfloat *  sgeo,
				   @restrict const  dfloat *  x,
				   @restrict const  dfloat *  y,
				   @restrict const  dfloat *  z,
				   @restrict const  dlong  *  vmapM,
				   @restrict const  int    *  mapB,
				   @restrict dfloat *  S){

  for(dlong e=0;e<Nelements;e++;@outer(0)){
    for(int f=0; f<p_Nfaces; f++){
      @barrier("global");
      for(int m=0;m<p_Nfp;++m;@inner(0)){
         struct bcData bc;
         const int n = m + f*p_Nfp;         
        const dlong idM = vmapM[e*p_Nfp*p_Nfaces + n];
        bc.id = mapB[idM];

      if(bc.id==1) {
          bc.idM = idM; 
          bc.time = time; 
          bc.x  = x[bc.idM]; 
          bc.y  = y[bc.idM]; 
          bc.z  = z[bc.idM]; 
          bc.sM = S[idM];

        const dlong sk = e*p_Nfp*p_Nfaces + n;
        bc.nx = sgeo[sk*p_Nsgeo+p_NXID];
        bc.ny = sgeo[sk*p_Nsgeo+p_NYID];
        bc.nz = sgeo[sk*p_Nsgeo+p_NZID];
        bc.sP = 0.f;
        cdsDirichletConditions3D(&bc) ;
        S[idM] = bc.sP;
      }    
    }
  }
}
}

