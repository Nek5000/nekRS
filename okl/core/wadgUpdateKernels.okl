/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// p_cubNp is not universal
@kernel void acousticsUpdate2D_wadg(const int Nelements,
				   const dfloat dt,	
				   const dfloat rka,
				   const dfloat rkb,
				   @restrict const  dfloat *  cubInterp,
				   @restrict const  dfloat *  cubProject,
				   @restrict const  dfloat *  c2,
				   @restrict const  dfloat *  rhsq,
				   @restrict dfloat *  resq,
				   @restrict dfloat *  q){
  
  // Low storage Runge Kutta time step update
  for(int e=0;e<Nelements;++e;@outer(0)){  // for all elements

    @shared dfloat s_p[p_cubNp];
    @exclusive dfloat r_p;

    for(int n=0; n < p_cubNp; ++n; @inner(0)){  

      if (n < p_Np){
	const int id = p_Nfields*(e*p_Np + n);
	s_p[n] = rhsq[id + 2]; // extract pressure rhs
      }

      // Initialize register variable
      r_p = 0.f;
    }
    @barrier("local");

    // Interpolate rhs to cubature nodes
    for(int n=0;n<p_cubNp;++n;@inner(0)){

      // Prefetch value of c2
      const dfloat c2n = c2[n + e*p_cubNp];
      
      dfloat val = 0.f;
      for (int i=0;i<p_Np;++i){
	val += cubInterp[n + i*p_cubNp] * s_p[i];
      }

      // Multiply result by wavespeed c2 at cubature node
      r_p = val * c2n;
    }
    @barrier("local");

    // Move temporary result back to @shared memory
    for(int n=0;n<p_cubNp;++n;@inner(0)){
      s_p[n] = r_p;
    }
    @barrier("local");
    
    // Increment solution, project result back down
    for(int n=0;n<p_cubNp;++n;@inner(0)){

      if (n < p_Np){

	// Extract velocity rhs
	const int id = p_Nfields*(e*p_Np + n);
	dfloat rhsqn[p_Nfields];
	rhsqn[0] = rhsq[id + 0];
	rhsqn[1] = rhsq[id + 1];	
	
	// Project scaled rhs down
	dfloat rhsp = 0.f;
	for (int i=0;i<p_cubNp;++i){
	  rhsp += cubProject[n + i*p_Np] * s_p[i];
	}
	//rhsqn[2] = rhsq[id + 2];
	rhsqn[2] = rhsp;

	// Increment solutions
	for (int fld = 0; fld < p_Nfields; ++fld){ 
	  dfloat resqn = resq[id + fld];
	  resqn = rka*resqn + dt*rhsqn[fld];
	  resq[id + fld] = resqn;
	  q[id + fld] += rkb*resqn;
	}

      }      
    }


  }
}


@kernel void acousticsUpdate3D_wadg(const int Nelements,
				   const dfloat dt,	
				   const dfloat rka,
				   const dfloat rkb,
				   @restrict const  dfloat *  cubInterp,
				   @restrict const  dfloat *  cubProject,
				   @restrict const  dfloat *  c2,
				   @restrict const  dfloat *  rhsq,
				   @restrict dfloat *  resq,
				   @restrict dfloat *  q){
  
  // Low storage Runge Kutta time step update
  for(int e=0;e<Nelements;++e;@outer(0)){  // for all elements

    @shared dfloat s_p[p_cubNp];
    @exclusive dfloat r_p;

    for(int n=0; n < p_cubNp; ++n; @inner(0)){  

      if (n < p_Np){
	const int id = p_Nfields*(e*p_Np + n);
	s_p[n] = rhsq[id + 3]; // extract pressure rhs
      }

      // Initialize register variable
      r_p = 0.f;
    }
    @barrier("local");

    // Interpolate rhs to cubature nodes
    for(int n=0;n<p_cubNp;++n;@inner(0)){

      // Prefetch value of c2
      const dfloat c2n = c2[n + e*p_cubNp];
      
      dfloat val = 0.f;
      for (int i=0;i<p_Np;++i){
	val += cubInterp[n + i*p_cubNp] * s_p[i];
      }

      // Multiply result by wavespeed c2 at cubature node
      r_p = val * c2n;
    }
    @barrier("local");

    // Move temporary result back to @shared memory
    for(int n=0;n<p_cubNp;++n;@inner(0)){
      s_p[n] = r_p;
    }
    @barrier("local");
    
    // Increment solution, project result back down
    for(int n=0;n<p_cubNp;++n;@inner(0)){

      if (n < p_Np){

	// Extract velocity rhs
	const int id = p_Nfields*(e*p_Np + n);
	dfloat rhsqn[p_Nfields];
	rhsqn[0] = rhsq[id + 0];
	rhsqn[1] = rhsq[id + 1];
	rhsqn[2] = rhsq[id + 2];		
	
	// Project scaled rhs down
	dfloat rhsp = 0.f;
	for (int i=0;i<p_cubNp;++i){
	  rhsp += cubProject[n + i*p_Np] * s_p[i];
	}
	rhsqn[3] = rhsp;

	// Increment solutions
	for (int fld = 0; fld < p_Nfields; ++fld){ 
	  dfloat resqn = resq[id + fld];
	  resqn = rka*resqn + dt*rhsqn[fld];
	  resq[id + fld] = resqn;
	  q[id + fld] += rkb*resqn;
	}

      }      
    }


  }
}


