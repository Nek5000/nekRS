@kernel void pressureRhsTOMBOHex3D(const dlong N,
                                      const dlong fieldOffset,
                                      @restrict const dfloat*  MUE,
                                      @restrict const dfloat*  iRHO,
                                      @restrict const dfloat*  BF,
                                      @restrict const dfloat*  NC,
                                      @restrict const dfloat*  gDIV,
                                      @restrict dfloat*  rhsU)
{
  for(dlong n = 0; n < N; ++n; @tile(p_blockSize,@outer,@inner))
    if(n < N) {
      const dfloat nu  = MUE[n] * iRHO[n];

      const dfloat BFx = BF[n + 0 * fieldOffset];
      const dfloat BFy = BF[n + 1 * fieldOffset];
      const dfloat BFz = BF[n + 2 * fieldOffset];

      const dfloat NCx = NC[n + 0 * fieldOffset];
      const dfloat NCy = NC[n + 1 * fieldOffset];
      const dfloat NCz = NC[n + 2 * fieldOffset];

      const dfloat gDIVx = gDIV[n + 0 * fieldOffset];
      const dfloat gDIVy = gDIV[n + 1 * fieldOffset];
      const dfloat gDIVz = gDIV[n + 2 * fieldOffset];

      rhsU[n + 0 * fieldOffset] = BFx - nu * (NCx - 4./3 * gDIVx);
      rhsU[n + 1 * fieldOffset] = BFy - nu * (NCy - 4./3 * gDIVy);
      rhsU[n + 2 * fieldOffset] = BFz - nu * (NCz - 4./3 * gDIVz);
    }
}
