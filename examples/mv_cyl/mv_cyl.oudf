// Boundary conditions
void velocityDirichletConditions(bcData *bc)
{
  bc->u = 0.0;
  bc->v = p_AMP*sin(p_OMEGA*bc->time);
  bc->w = 0.0;
}

@kernel void userVp(const dlong Nelements,
                    const dlong uOffset,
                    const dlong sOffset,
                    const double p0th,
                    @restrict const dfloat * TEMP,
                    @restrict dfloat * UPROP,
                    @restrict dfloat * SPROP)
{
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    for(int n=0;n<p_Np;++n;@inner(0)){
      const int id = e*p_Np + n;
      UPROP[id + 0*uOffset] = 1e-2;
      SPROP[id + 0*sOffset] = 1e-2;
      UPROP[id + 1*uOffset] = p0th/TEMP[id];
      SPROP[id + 1*sOffset] = p0th/TEMP[id];
    }
  }
}
@kernel void userMeshVelocity(const dlong Nelements,
                    const dlong offset,
                    const dfloat ymin,
                    const dfloat ymax,
                    const dfloat time,
                    @restrict const dfloat * y,
                    @restrict dfloat * W)
{
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    for(int n=0;n<p_Np;++n;@inner(0)){
      const dfloat v_piston = p_AMP * sin(p_OMEGA * time);
      const dfloat ylen = ymin - ymax;

      const int id = e*p_Np + n;
      const dfloat yy = y[id];
      const dfloat ysc = (yy - ymax) / ylen;
      W[id + 0 * offset] = 0.0;
      W[id + 1 * offset] = ysc * v_piston;
      W[id + 2 * offset] = 0.0;
    }
  }
}
