@kernel void SijOijHex3D(const dlong Nelements,
                         const dlong offset,
                         const int ifOij,
                         const int ifJw,
                         @ restrict const dfloat *vgeo,
                         @ restrict const dfloat *D,
                         @ restrict const dfloat *U,
                         @ restrict dfloat *SO)
{
  for (dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_U[p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq];
    @exclusive dfloat s_Uloc[p_Nq];
    @exclusive dfloat s_Vloc[p_Nq];
    @exclusive dfloat s_Wloc[p_Nq];

    @shared dfloat s_D[p_Nq][p_Nq];

#pragma unroll p_Nq
    for (int k = 0; k < p_Nq; ++k) {
      @barrier();
      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          dlong id = i + j * p_Nq;
          if (k == 0)
            s_D[0][id] = D[id];

          id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          const dfloat Un = U[id + 0 * offset];
          const dfloat Vn = U[id + 1 * offset];
          const dfloat Wn = U[id + 2 * offset];

          s_U[j][i] = Un;
          s_V[j][i] = Vn;
          s_W[j][i] = Wn;
          if (k == 0) {
#pragma unroll p_Nq
            for (int l = 0; l < p_Nq; ++l) {
              const dlong other_id = e * p_Np + l * p_Nq * p_Nq + j * p_Nq + i;
              const dfloat locUn = U[other_id + 0 * offset];
              const dfloat locVn = U[other_id + 1 * offset];
              const dfloat locWn = U[other_id + 2 * offset];
              s_Uloc[l] = locUn;
              s_Vloc[l] = locVn;
              s_Wloc[l] = locWn;
            }
          }
        }
      }
      @barrier();
      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong gid = e * p_Np * p_Nvgeo + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat drdx = vgeo[gid + p_RXID * p_Np];
          const dfloat drdy = vgeo[gid + p_RYID * p_Np];
          const dfloat drdz = vgeo[gid + p_RZID * p_Np];
          const dfloat dsdx = vgeo[gid + p_SXID * p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID * p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID * p_Np];
          const dfloat dtdx = vgeo[gid + p_TXID * p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID * p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID * p_Np];

          dfloat scale = 0.5;
          if (ifJw) scale *= vgeo[gid + p_JWID * p_Np];

          dfloat dudr = 0, duds = 0, dudt = 0;
          dfloat dvdr = 0, dvds = 0, dvdt = 0;
          dfloat dwdr = 0, dwds = 0, dwdt = 0;

#pragma unroll p_Nq
          for (int n = 0; n < p_Nq; n++) {
            const dfloat Dr = s_D[i][n];
            const dfloat Ds = s_D[j][n];
            const dfloat Dt = s_D[k][n];
            dudr += Dr * s_U[j][n];
            duds += Ds * s_U[n][i];
            dudt += Dt * s_Uloc[n];

            dvdr += Dr * s_V[j][n];
            dvds += Ds * s_V[n][i];
            dvdt += Dt * s_Vloc[n];

            dwdr += Dr * s_W[j][n];
            dwds += Ds * s_W[n][i];
            dwdt += Dt * s_Wloc[n];
          }

          const dfloat dudx = drdx * dudr + dsdx * duds + dtdx * dudt;
          const dfloat dudy = drdy * dudr + dsdy * duds + dtdy * dudt;
          const dfloat dudz = drdz * dudr + dsdz * duds + dtdz * dudt;

          const dfloat dvdx = drdx * dvdr + dsdx * dvds + dtdx * dvdt;
          const dfloat dvdy = drdy * dvdr + dsdy * dvds + dtdy * dvdt;
          const dfloat dvdz = drdz * dvdr + dsdz * dvds + dtdz * dvdt;

          const dfloat dwdx = drdx * dwdr + dsdx * dwds + dtdx * dwdt;
          const dfloat dwdy = drdy * dwdr + dsdy * dwds + dtdy * dwdt;
          const dfloat dwdz = drdz * dwdr + dsdz * dwds + dtdz * dwdt;

          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;


          SO[id + 0 * offset] = scale * 2 * dudx;
          SO[id + 1 * offset] = scale * 2 * dvdy;
          SO[id + 2 * offset] = scale * 2 * dwdz;
          SO[id + 3 * offset] = scale * (dudy + dvdx);
          SO[id + 4 * offset] = scale * (dvdz + dwdy);
          SO[id + 5 * offset] = scale * (dudz + dwdx);

          if (ifOij) {
            SO[id + 6 * offset] = scale * (dwdy - dvdz);
            SO[id + 7 * offset] = scale * (dudz - dwdx);
            SO[id + 8 * offset] = scale * (dvdx - dudy);
          }
        }
      }
    }
  }
}
