//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"
#include "velRecycling.hpp"

#define ZLENGTH  20.0  /* diameters  */

/* UDF Functions */                                                      

void UDF_LoadKernels(ins_t *ins)
{
  velRecycling::buildKernel(ins);
}

void UDF_Setup(ins_t *ins)
{
  // get IC from nek
  if (!ins->readRestartFile) nek_copyTo(ins, ins->startTime);

  // setup scratch space
  ins->o_usrwrk.free(); free(ins->usrwrk);
  ins->usrwrk   = (dfloat*) calloc(ins->NVfields*ins->Ntotal, sizeof(dfloat));
  ins->o_usrwrk = ins->mesh->device.malloc(ins->NVfields*ins->Ntotal*sizeof(dfloat), ins->usrwrk);

  // recycling
  const dfloat wbar  = 1.0;
  const int bID      = 1; 
  const int nSlabs   = 60; 
  const int nelSlab  = 108;
  dfloat zRecycLayer = 5.0;
  const hlong offset = nelSlab * round(nSlabs * zRecycLayer/ZLENGTH); 
  velRecycling::setup(ins, ins->o_usrwrk, offset, bID, wbar);
}

void UDF_ExecuteStep(ins_t *ins, dfloat time, int tstep)
{
  velRecycling::copy();
  if (ins->isOutputStep) nek_userchk();
}
