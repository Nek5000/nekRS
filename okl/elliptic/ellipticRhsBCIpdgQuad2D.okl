/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

// increments gradients of pressure with pseudo-gradients at faces and
// increments rhs with pseudo-gradient/penalty terms at faces (need to double check scaling with tau)

// sgeo stores dfloat4s with nx,ny,nz,(sJ/J)*(w1*w2*w3/(ws1*ws2))

// nx,ny,nz,sJ,invJ - need WsJ

void surfaceTerms(int e, int sk, int face, int i, int j,
                  @global const dfloat* sgeo,
                  @global const dfloat* x,
                  @global const dfloat* y,
                  @global const int* vmapM,
                  @global const int* EToB,
                  const dfloat tau,
                  dfloat s_dqdx[p_Nq][p_Nq],
                  dfloat s_dqdy[p_Nq][p_Nq],
                  dfloat s_rhsq[p_Nq][p_Nq])
{
  const dfloat nx = sgeo[sk * p_Nsgeo + p_NXID];
  const dfloat ny = sgeo[sk * p_Nsgeo + p_NYID];
  const dfloat WsJ = sgeo[sk * p_Nsgeo + p_WSJID];
  const dfloat hinv = sgeo[sk * p_Nsgeo + p_IHID];

  dfloat dqdxP, dqdyP, qP;
  dqdxP = 0.f;
  dqdyP = 0.f;
  qP = 0.f;

  const int bc = EToB[face + p_Nfaces * e];
  if(bc > 0)
    ellipticBoundaryConditions2D(bc,
                                 t,
                                 x[vmapM[sk]],
                                 y[vmapM[sk]],
                                 nx,
                                 ny,
                                 0.f,
                                 0.f,
                                 0.f,
                                 qP,
                                 dqdxP,
                                 dqdyP);

  dfloat dq = qP;

  s_dqdx[j][i] += WsJ * nx * dq;
  s_dqdy[j][i] += WsJ * ny * dq;

  s_rhsq[j][i] -= WsJ * (nx * dqdxP + ny * dqdyP + tau * dq * hinv);
}

@kernel void ellipticRhsBCIpdgQuad2D(const dlong Nelements,
                                     @restrict const dlong*  vmapM,
                                     const dfloat tau,
                                     const dfloat t,
                                     @restrict const dfloat*  x,
                                     @restrict const dfloat*  y,
                                     @restrict const dfloat*  z,
                                     @restrict const dfloat*  vgeo,
                                     @restrict const dfloat*  sgeo,
                                     @restrict const int*  EToB,
                                     @restrict const dfloat*  D,
                                     @restrict const dfloat*  LIFTT,
                                     @restrict const dfloat*  MM,
                                     @restrict dfloat*  rhs)
{
  for(int e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_dqdx[p_Nq][p_Nq];
    @shared dfloat s_dqdy[p_Nq][p_Nq];
    @shared dfloat s_rhsq[p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];

    // loop over slabs
    for(int j = 0; j < p_Nq; ++j)
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        s_dqdx[j][i] = 0.f;
        s_dqdy[j][i] = 0.f;
        s_rhsq[j][i] = 0.f;

        s_D[j][i] = D[j * p_Nq + i];
      }

    @barrier("local");

    // loop over faces to add pseudo-gradient

    // face 0 & 2
    for(int i = 0; i < p_Nq; ++i; @inner(0)) {
      const dlong sk0 = e * p_Nfp * p_Nfaces + 0 * p_Nfp + i;
      const dlong sk2 = e * p_Nfp * p_Nfaces + 2 * p_Nfp + i;

      //      surfaceTerms(sk0,0,i,0);
      surfaceTerms(e, sk0, 0, i, 0, sgeo, x, y, vmapM, EToB, tau,
                   s_dqdx, s_dqdy, s_rhsq);

      //      surfaceTerms(sk2,2,i,p_Nq-1);
      surfaceTerms(e, sk2, 2, i, p_Nq - 1, sgeo, x, y, vmapM, EToB, tau,
                   s_dqdx, s_dqdy, s_rhsq);
    }

    @barrier("local");

    // face 1 & 3
    for(int j = 0; j < p_Nq; ++j; @inner(0)) {
      const dlong sk1 = e * p_Nfp * p_Nfaces + 1 * p_Nfp + j;
      const dlong sk3 = e * p_Nfp * p_Nfaces + 3 * p_Nfp + j;

      //      surfaceTerms(sk1,1,p_Nq-1,j);
      surfaceTerms(e, sk1, 1, p_Nq - 1, j, sgeo, x, y, vmapM, EToB, tau,
                   s_dqdx, s_dqdy, s_rhsq);

      //      surfaceTerms(sk3,3,0,j);
      surfaceTerms(e, sk3, 3, 0, j, sgeo, x, y, vmapM, EToB, tau,
                   s_dqdx, s_dqdy, s_rhsq);
    }

    @barrier("local");

    // prescale by geofacs
    for(int j = 0; j < p_Nq; ++j)
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        // does need the nasty geofacs
        const dlong gid = i + j * p_Nq + e * p_Np * p_Nvgeo;

        const dfloat drdx = vgeo[gid + p_RXID * p_Np];
        const dfloat drdy = vgeo[gid + p_RYID * p_Np];
        const dfloat dsdx = vgeo[gid + p_SXID * p_Np];
        const dfloat dsdy = vgeo[gid + p_SYID * p_Np];

        // chain rule (need to scale by wei
        const dfloat dqdx = s_dqdx[j][i];
        const dfloat dqdy = s_dqdy[j][i];

        s_dqdx[j][i] = (drdx * dqdx + drdy * dqdy);
        s_dqdy[j][i] = (dsdx * dqdx + dsdy * dqdy);
      }

    @barrier("local");

    // loop over slabs
    for(int j = 0; j < p_Nq; ++j)
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        dfloat dr = 0, ds = 0;

        for(int n = 0; n < p_Nq; ++n) {
          dr += s_D[n][i] * s_dqdx[j][n];
          ds += s_D[n][j] * s_dqdy[n][i];
        }

        dlong id = e * p_Np + j * p_Nq + i;
        rhs[id] -= s_rhsq[j][i]  + dr + ds;
      }
  }
}
