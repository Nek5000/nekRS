//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"
#include "plugins/velRecycling.hpp"
#include "plugins/avg.hpp"

#include "casedata.h"

/* UDF Functions */                                                      

void UDF_LoadKernels(ins_t *ins)
{
  velRecycling::buildKernel(ins);
  avg::buildKernel(ins);
}

void UDF_Setup(ins_t *ins)
{
  // get IC from nek
  if (!ins->readRestartFile) nek_copyTo(ins->startTime);

  // setup scratch space
  ins->o_usrwrk = ins->mesh->device.malloc(ins->NVfields*ins->fieldOffset*sizeof(dfloat));

  // recycling
  const dfloat wbar  = 1.0;
  const int bID      = 1; 
  dfloat zRecycLayer = 0.25*ZLENGTH;
  const hlong offset = NELSLAB * round(NSLABS * zRecycLayer/ZLENGTH); 
  velRecycling::setup(ins, ins->o_usrwrk, offset, bID, wbar);

  avg::setup(ins);
}

void UDF_ExecuteStep(ins_t *ins, dfloat time, int tstep)
{
  mesh_t *mesh = ins->mesh;

  velRecycling::copy();
  avg::run(time);

  if (ins->isOutputStep) {
    occa::memory o_UZ = ins->o_U + 2*ins->fieldOffset * sizeof(dfloat);
    const dfloat ubar = ins->linAlg->innerProd(ins->Nlocal, o_UZ, mesh->o_LMM, mesh->comm)/mesh->volume;
    if (mesh->rank == 0) printf(" uBulk: %g\n", ubar);

    avg::outfld();
    nek_ocopyFrom(time, tstep);
    nek_userchk();
  }
}
