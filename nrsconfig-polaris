#!/bin/bash
set -e -a

###..
module restore
module swap PrgEnv-nvhpc PrgEnv-gnu
module load cudatoolkit-standalone
module load cmake
module load cray-hdf5-parallel
module unload cray-libsci
export CRAY_ACCEL_TARGET=nvidia80
echo $(cc --version)
echo $(CC --version)
echo $(ftn --version)
echo $(gcc --version)
echo $(g++ --version)
echo $(gfortran --version)
###..

: ${NEKRS_INSTALL_DIR:=/lus/grand/projects/visualization/mvictoras/install/polaris/nekrs-polaris}

: ${NEKRS_CC:="cc"}
: ${NEKRS_CXX:="CC"}
: ${NEKRS_FC:="ftn"}
: ${NEKRS_COMPILER_FLAGS:="-O2 -g -march=native -mtune=native -ftree-vectorize"}

: ${NEKRS_GPU_MPI:=1}

: ${OCCA_CXX:="g++"}
: ${OCCA_CXXFLAGS:="-O3 -g -march=native -mtune=native"}
: ${OCCA_CUDA_COMPILER_FLAGS:="-O3 --fmad=true -lineinfo"}
: ${OCCA_HIP_COMPILER_FLAGS:="-O3 -g -ffp-contract=fast"}
: ${OCCA_OPENCL_COMPILER_FLAGS:="-cl-std=CL2.0 -cl-mad-enable -cl-no-signed-zeros"}

: ${OCCA_ENABLE_CUDA:=1}
: ${OCCA_ENABLE_HIP:=1}
: ${OCCA_ENABLE_OPENCL:=0}
: ${ENABLE_AMGX:=0}

if uname -a | grep 'ppc64'; then
  NEKRS_COMPILER_FLAGS=$(echo "$NEKRS_COMPILER_FLAGS" | sed -e "s/march/mcpu/g")
fi

: ${NEKRS_CXXFLAGS:="${NEKRS_COMPILER_FLAGS}"}
: ${NEKRS_CFLAGS:="${NEKRS_COMPILER_FLAGS}"}
: ${NEKRS_FFLAGS:="${NEKRS_COMPILER_FLAGS}"}

mkdir -p ${NEKRS_INSTALL_DIR} > /dev/null 2>&1
NEKRS_INSTALL_DIR=`echo "$(cd "$(dirname "${NEKRS_INSTALL_DIR}")"; pwd)/$(basename "${NEKRS_INSTALL_DIR}")"`

NEKRS_BUILD_DIR=`pwd`/build
mkdir -p "${NEKRS_BUILD_DIR}" > /dev/null 2>&1
cd ${NEKRS_BUILD_DIR}

export CUDAHOSTCXX=${NEKRS_CXX}
echo "cmake"
cmake -Wno-dev \
      -Wfatal-errors \
      -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
      -DCMAKE_BUILD_TYPE="RelWithDebInfo" \
      -DCMAKE_Fortran_COMPILER="${NEKRS_FC}" \
      -DCMAKE_C_COMPILER="${NEKRS_CC}" \
      -DCMAKE_CXX_COMPILER="${NEKRS_CXX}" \
      -DCMAKE_Fortran_FLAGS_RELWITHDEBINFO="${NEKRS_FFLAGS}"  \
      -DCMAKE_C_FLAGS_RELWITHDEBINFO="${NEKRS_CFLAGS}" \
      -DCMAKE_CXX_FLAGS_RELWITHDEBINFO="${NEKRS_CFLAGS}" \
      -DCMAKE_INSTALL_PREFIX="${NEKRS_INSTALL_DIR}" \
      -DOCCA_CXX="${OCCA_CXX}" \
      -DOCCA_CXXFLAGS="${OCCA_CXXFLAGS}" \
      -DOCCA_CUDA_COMPILER_FLAGS="${OCCA_CUDA_COMPILER_FLAGS}" \
      -DOCCA_HIP_COMPILER_FLAGS="${OCCA_HIP_COMPILER_FLAGS}" \
      -DOCCA_OPENCL_COMPILER_FLAGS="${OCCA_OPENCL_COMPILER_FLAGS}" \
      -DENABLE_CUDA="${OCCA_ENABLE_CUDA}" \
      -DENABLE_HIP="${OCCA_ENABLE_HIP}" \
      -DENABLE_OPENCL="${OCCA_ENABLE_OPENCL}" \
      -DGPU_MPI="${NEKRS_GPU_MPI}" \
      -DENABLE_AMGX="${ENABLE_AMGX}" \
      -DENABLE_SENSEI=ON \
      -DSENSEI_DIR="/lus/grand/projects/visualization/mvictoras/src/polaris/SENSEI/install/lib64/cmake" \
      -Dmpi4py_INCLUDE_DIR=/lus/grand/projects/visualization/mvictoras/spack/polaris/var/spack/environments/deleteme2/.spack-env/._view/zybnczvx2iqqyjublccclo37spuhorlt/lib/python3.9/site-packages/mpi4py/include/mpi4py \
      ..

#if [ $? -eq 0 ]; then
#  echo ""
#  echo "--> Now just run \`cmake --build ./build --target install -j8\`"
#fi

cd ../
cmake --build ./build --target install -j8

