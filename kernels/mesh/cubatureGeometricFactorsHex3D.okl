@kernel void cubatureGeometricFactorsHex3D(const dlong Nelements,
                                           @ restrict const dfloat *cubD,
                                           @ restrict const dfloat *x,
                                           @ restrict const dfloat *y,
                                           @ restrict const dfloat *z,
                                           @ restrict const dfloat *cubInterpT,
                                           @ restrict const dfloat *cubW,
                                           @ restrict dfloat *cubvgeo)
{
  for (dlong element = 0; element < Nelements; ++element; @outer(0)) {
    @shared dfloat s_cubInterpT[p_Nq][p_cubNq];
    @shared dfloat s_cubw[p_cubNq];
    @shared dfloat s_cubD[p_cubNq][p_cubNq];

    @shared dfloat s_x[p_Nq][p_Nq];
    @shared dfloat s_y[p_Nq][p_Nq];
    @shared dfloat s_z[p_Nq][p_Nq];

    @exclusive dfloat r_cubx[p_cubNq], r_cuby[p_cubNq], r_cubz[p_cubNq];
    @shared dfloat s_cubx[p_cubNq][p_cubNq];
    @shared dfloat s_cuby[p_cubNq][p_cubNq];
    @shared dfloat s_cubz[p_cubNq][p_cubNq];

    @shared dfloat s_x1[p_Nq][p_cubNq];
    @shared dfloat s_y1[p_Nq][p_cubNq];
    @shared dfloat s_z1[p_Nq][p_cubNq];

    for (int j = 0; j < p_cubNq; ++j; @inner(1)) {
      for (int i = 0; i < p_cubNq; ++i; @inner(0)) {
        const int id = i + j * p_cubNq;

        if (j == 0)
          s_cubw[i] = cubW[i];
        if (id < p_Nq * p_cubNq)
          s_cubInterpT[j][i] = cubInterpT[id];
        s_cubD[j][i] = cubD[id];

        for (int k = 0; k < p_cubNq; ++k) {

          r_cubx[k] = 0;
          r_cuby[k] = 0;
          r_cubz[k] = 0;
        }
      }
    }

    for (int c = 0; c < p_Nq; ++c) {

      @barrier();

      for (int b = 0; b < p_cubNq; ++b; @inner(1)) {
        for (int a = 0; a < p_cubNq; ++a; @inner(0)) {
          if (a < p_Nq && b < p_Nq) {
            const dlong id = element * p_Np + c * p_Nq * p_Nq + b * p_Nq + a;
            s_x[b][a] = x[id];
            s_y[b][a] = y[id];
            s_z[b][a] = z[id];
          }
        }
      }

      @barrier();

      // interpolate in 'r'
      for (int b = 0; b < p_cubNq; ++b; @inner(1))
        for (int i = 0; i < p_cubNq; ++i; @inner(0))
          if (b < p_Nq) {
            dfloat U1 = 0, V1 = 0, W1 = 0;

            for (int a = 0; a < p_Nq; ++a) {
              dfloat Iia = s_cubInterpT[a][i];
              U1 += Iia * s_x[b][a];
              V1 += Iia * s_y[b][a];
              W1 += Iia * s_z[b][a];
            }

            s_x1[b][i] = U1;
            s_y1[b][i] = V1;
            s_z1[b][i] = W1;
          }

      @barrier();

      // interpolate in 's'
      for (int j = 0; j < p_cubNq; ++j; @inner(1)) {
        for (int i = 0; i < p_cubNq; ++i; @inner(0)) {
          dfloat U2 = 0, V2 = 0, W2 = 0;

          // interpolate in b
          for (int b = 0; b < p_Nq; ++b) {
            dfloat Ijb = s_cubInterpT[b][j];
            U2 += Ijb * s_x1[b][i];
            V2 += Ijb * s_y1[b][i];
            W2 += Ijb * s_z1[b][i];
          }

          // interpolate in c progressively
          for (int k = 0; k < p_cubNq; ++k) {
            dfloat Ikc = s_cubInterpT[c][k];
            r_cubx[k] += Ikc * U2; // (i,j,k)
            r_cuby[k] += Ikc * V2;
            r_cubz[k] += Ikc * W2;
          }
        }
      }
    }

    // apply derivative matrices
    for (int k = 0; k < p_cubNq; ++k) {
      @barrier();

      for (int j = 0; j < p_cubNq; ++j; @inner(1)) {
        for (int i = 0; i < p_cubNq; ++i; @inner(0)) {
          s_cubx[j][i] = r_cubx[k];
          s_cuby[j][i] = r_cuby[k];
          s_cubz[j][i] = r_cubz[k];
        }
      }

      @barrier();

      for (int j = 0; j < p_cubNq; ++j; @inner(1)) {
        for (int i = 0; i < p_cubNq; ++i; @inner(0)) {
          dfloat xr = 0, xs = 0, xt = 0;
          dfloat yr = 0, ys = 0, yt = 0;
          dfloat zr = 0, zs = 0, zt = 0;

          for (int n = 0; n < p_cubNq; ++n) {
            dfloat Din = s_cubD[i][n];
            xr += Din * s_cubx[j][n];
            yr += Din * s_cuby[j][n];
            zr += Din * s_cubz[j][n];
          }

          for (int n = 0; n < p_cubNq; ++n) {
            dfloat Djn = s_cubD[j][n];
            xs += Djn * s_cubx[n][i];
            ys += Djn * s_cuby[n][i];
            zs += Djn * s_cubz[n][i];
          }

          for (int n = 0; n < p_cubNq; ++n) {
            dfloat Dkn = s_cubD[k][n];
            xt += Dkn * r_cubx[n];
            yt += Dkn * r_cuby[n];
            zt += Dkn * r_cubz[n];
          }

          const dfloat J = xr * (ys * zt - zs * yt) - yr * (xs * zt - zs * xt) + zr * (xs * yt - ys * xt);

          const dfloat invJ = 1.0 / J;
          const dfloat JW = J * s_cubw[i] * s_cubw[j] * s_cubw[k];

          const dfloat drdx = (ys * zt - zs * yt) * invJ;
          const dfloat drdy = -(xs * zt - zs * xt) * invJ;
          const dfloat drdz = (xs * yt - ys * xt) * invJ;

          const dfloat dsdx = -(yr * zt - zr * yt) * invJ;
          const dfloat dsdy = (xr * zt - zr * xt) * invJ;
          const dfloat dsdz = -(xr * yt - yr * xt) * invJ;

          const dfloat dtdx = (yr * zs - zr * ys) * invJ;
          const dfloat dtdy = -(xr * zs - zr * xs) * invJ;
          const dfloat dtdz = (xr * ys - yr * xs) * invJ;

          const dlong gid = element * p_cubNp * p_Nvgeo + k * p_cubNq * p_cubNq + j * p_cubNq + i;
          cubvgeo[gid + p_RXID * p_cubNp] = drdx;
          cubvgeo[gid + p_RYID * p_cubNp] = drdy;
          cubvgeo[gid + p_RZID * p_cubNp] = drdz;
          cubvgeo[gid + p_SXID * p_cubNp] = dsdx;
          cubvgeo[gid + p_SYID * p_cubNp] = dsdy;
          cubvgeo[gid + p_SZID * p_cubNp] = dsdz;
          cubvgeo[gid + p_TXID * p_cubNp] = dtdx;
          cubvgeo[gid + p_TYID * p_cubNp] = dtdy;
          cubvgeo[gid + p_TZID * p_cubNp] = dtdz;

          cubvgeo[gid + p_JID * p_cubNp] = J;
          cubvgeo[gid + p_JWID * p_cubNp] = JW;
          cubvgeo[gid + p_IJWID * p_cubNp] = 1.0 / JW;
        }
      }
    }
  }
}