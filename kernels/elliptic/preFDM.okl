

@kernel void preFDM(const dlong Nelements, @ restrict const pfloat *u, @ restrict pfloat *work1)
{
  for (dlong elem = 0; elem < Nelements; elem++; @outer) {
    @shared pfloat sWork1[p_Nq_e][p_Nq_e][p_Nq_e];
    for (int k = 0; k < p_Nq_e; ++k; @inner) {
      for (int j = 0; j < p_Nq_e; ++j; @inner) {
#pragma unroll
        for (int i = 0; i < p_Nq_e; ++i)
          sWork1[k][j][i] = 0.0;
      }
    }

    @barrier();

    for (int k = 0; k < p_Nq; ++k) {
      @barrier();
      for (int j = 0; j < p_Nq_e; ++j; @inner) {
        for (int i = 0; i < p_Nq_e; ++i; @inner) {
          if (i < p_Nq && j < p_Nq) {
            const dlong elem_offset = elem * p_Nq * p_Nq * p_Nq;
            const dlong idx = i + j * p_Nq + k * p_Nq * p_Nq + elem_offset;
            sWork1[k + 1][j + 1][i + 1] = u[idx];
          }
        }
      }
    }

    @barrier();

    for (int k = 0; k < p_Nq_e; ++k; @inner) {
      for (int j = 0; j < p_Nq_e; ++j; @inner) {
        if (k >= 1 && k < p_Nq_e - 1 && j >= 1 && j < p_Nq_e - 1) {
          const int l1 = 0;
          const int l2 = 2;
          sWork1[l1][j][k] = sWork1[l2][j][k];
          sWork1[p_Nq_e - l1 - 1][j][k] = sWork1[p_Nq_e - l2 - 1][j][k];
        }
      }
    }

    @barrier();

    for (int k = 0; k < p_Nq_e; ++k; @inner) {
      for (int i = 0; i < p_Nq_e; ++i; @inner) {
        if (k >= 1 && k < p_Nq_e - 1 && i >= 1 && i < p_Nq_e - 1) {
          const int l1 = 0;
          const int l2 = 2;
          sWork1[i][l1][k] = sWork1[i][l2][k];
          sWork1[i][p_Nq_e - l1 - 1][k] = sWork1[i][p_Nq_e - l2 - 1][k];
        }
      }
    }
    @barrier();
    for (int j = 0; j < p_Nq_e; ++j; @inner) {
      for (int i = 0; i < p_Nq_e; ++i; @inner) {
        if (i >= 1 && i < p_Nq_e - 1 && j >= 1 && j < p_Nq_e - 1) {
          const int l1 = 0;
          const int l2 = 2;
          sWork1[i][j][l1] = sWork1[i][j][l2];
          sWork1[i][j][p_Nq_e - l1 - 1] = sWork1[i][j][p_Nq_e - l2 - 1];
        }
      }
    }
    @barrier();
    for (int k = 0; k < p_Nq_e; ++k) {
      @barrier();
      for (int j = 0; j < p_Nq_e; ++j; @inner) {
        for (int i = 0; i < p_Nq_e; ++i; @inner) {
          const dlong elem_offset = p_Nq_e * p_Nq_e * p_Nq_e * elem;
          const dlong idx = i + j * p_Nq_e + k * p_Nq_e * p_Nq_e + elem_offset;
          work1[idx] = sWork1[k][j][i];
        }
      }
    }
  }
}
