/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

@kernel void ellipticRhsBCIpdgTet3D(const dlong Nelements,
                                    @restrict const dlong*  vmapM,
                                    const dfloat tau,
                                    const dfloat t,
                                    @restrict const dfloat*  x,
                                    @restrict const dfloat*  y,
                                    @restrict const dfloat*  z,
                                    @restrict const dfloat*  vgeo,
                                    @restrict const dfloat*  sgeo,
                                    @restrict const int*  EToB,
                                    @restrict const dfloat*  Dmatrices,
                                    @restrict const dfloat*  LIFTT,
                                    @restrict const dfloat*  MM,
                                    @restrict dfloat*  rhs)
{
  for(int e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_dqdx[p_Np];
    @shared dfloat s_dqdy[p_Np];
    @shared dfloat s_dqdz[p_Np];
    @shared dfloat s_lapq[p_Np];
    @shared dfloat s_nxdq[p_NfacesNfp];
    @shared dfloat s_nydq[p_NfacesNfp];
    @shared dfloat s_nzdq[p_NfacesNfp];
    @shared dfloat s_lapflux[p_NfacesNfp];
    @shared dfloat s_Lnxdq[p_Np];
    @shared dfloat s_Lnydq[p_Np];
    @shared dfloat s_Lnzdq[p_Np];

    @exclusive int idM;
    @exclusive dfloat nx, ny, nz, sJ, invJ, hinv;

    for(int n = 0; n < p_Nmax; ++n; @inner(0))
      if(n < p_NfacesNfp) {
        const int id  = n + e * p_Nfaces * p_Nfp;
        idM = vmapM[id];

        // find face that owns this node
        const int face = n / p_Nfp;

        dfloat dudxP = 0.f, dudyP = 0.f, dudzP = 0.f, uP = 0.f;

        // load surface geofactors for this face
        int sid = p_Nsgeo * (e * p_Nfaces + face);
        nx = sgeo[sid + p_NXID];
        ny = sgeo[sid + p_NYID];
        nz = sgeo[sid + p_NZID];
        sJ = sgeo[sid + p_SJID];
        invJ = sgeo[sid + p_IJID];
        hinv = sgeo[sid + p_IHID];

        const int bc = EToB[face + p_Nfaces * e];
        if(bc > 0)
          ellipticBoundaryConditions3D(bc, t, x[idM], y[idM], z[idM], nx, ny, nz, \
                                       0.f, 0.f, 0.f, 0.f,               \
                                       uP, dudxP, dudyP, dudzP);

        const dfloat dq = uP;
        const dfloat half = 1.f;

        s_nxdq[n] = half * sJ * invJ * nx * dq;
        s_nydq[n] = half * sJ * invJ * ny * dq;
        s_nzdq[n] = half * sJ * invJ * nz * dq;

        s_lapflux[n] = half * sJ * invJ * (-nx * dudxP - ny * dudyP - nz * dudzP - tau * hinv * dq);
      }

    @barrier("local");

    // dqdx += LIFT*(sJ/J)*nx*dq
    for(int n = 0; n < p_Nmax; ++n; @inner(0)) {
      if(n < p_Np) {
        const int gid = e * p_Nvgeo;
        const dfloat drdx = vgeo[gid + p_RXID];
        const dfloat drdy = vgeo[gid + p_RYID];
        const dfloat drdz = vgeo[gid + p_RZID];
        const dfloat dsdx = vgeo[gid + p_SXID];
        const dfloat dsdy = vgeo[gid + p_SYID];
        const dfloat dsdz = vgeo[gid + p_SZID];
        const dfloat dtdx = vgeo[gid + p_TXID];
        const dfloat dtdy = vgeo[gid + p_TYID];
        const dfloat dtdz = vgeo[gid + p_TZID];

        dfloat Lnxdq = 0;
        dfloat Lnydq = 0;
        dfloat Lnzdq = 0;

#pragma unroll p_NfacesNfp
        for(int i = 0; i < p_NfacesNfp; ++i) {
          Lnxdq += LIFTT[n + i * p_Np] * s_nxdq[i];
          Lnydq += LIFTT[n + i * p_Np] * s_nydq[i];
          Lnzdq += LIFTT[n + i * p_Np] * s_nzdq[i];
        }

        dfloat dqdx = Lnxdq;
        dfloat dqdy = Lnydq;
        dfloat dqdz = Lnzdq;

        s_dqdx[n] = drdx * dqdx + drdy * dqdy + drdz * dqdz; // abuse of notation
        s_dqdy[n] = dsdx * dqdx + dsdy * dqdy + dsdz * dqdz;
        s_dqdz[n] = dtdx * dqdx + dtdy * dqdy + dtdz * dqdz;

        s_Lnxdq[n] = Lnxdq;
        s_Lnydq[n] = Lnydq;
        s_Lnzdq[n] = Lnzdq;
      }
    }

    @barrier("local");

    for(int n = 0; n < p_Nmax; ++n; @inner(0)) {
      if(n < p_NfacesNfp) {
        int id = idM % p_Np;
        s_lapflux[n] += sJ * invJ * (nx * s_Lnxdq[id] + ny * s_Lnydq[id] + nz * s_Lnzdq[id]);
      }

      if(n < p_Np) {
        dfloat lapr = 0, laps = 0, lapt = 0;

#pragma unroll p_Np
        for(int i = 0; i < p_Np; ++i) {
          lapr += Dmatrices[n + i * p_Np + 0 * p_Np * p_Np] * s_dqdx[i];
          laps += Dmatrices[n + i * p_Np + 1 * p_Np * p_Np] * s_dqdy[i];
          lapt += Dmatrices[n + i * p_Np + 2 * p_Np * p_Np] * s_dqdz[i];
        }

        s_lapq[n] = -(lapr + laps + lapt);
      }
    }

    @barrier("local");

    for(int n = 0; n < p_Nmax; ++n; @inner(0)) {
      if(n < p_Np) {
        dfloat lap = 0;

        // lift remaining surface terms
#pragma unroll p_NfacesNfp
        for(int i = 0; i < p_NfacesNfp; ++i)
          lap += LIFTT[n + i * p_Np] * s_lapflux[i];

        s_lapq[n] += lap;
      }
    }

    @barrier("local");

    for(int n = 0; n < p_Nmax; ++n; @inner(0)) {
      if(n < p_Np) {
        const dfloat J = vgeo[e * p_Nvgeo + p_JID];

        dfloat Mlapq = 0;

        // multiply by mass matrix
#pragma unroll p_Np
        for(int i = 0; i < p_Np; ++i)
          Mlapq += MM[n + i * p_Np] * s_lapq[i];

        const int id = e * p_Np + n;
        rhs[id] -=  J * Mlapq;
      }
    }
  }
}
