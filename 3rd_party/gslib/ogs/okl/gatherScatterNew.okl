/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// OCCA will #include "ogsDefs.h" before compilation

/*------------------------------------------------------------------------------
  The basic gather-scatter kernel
------------------------------------------------------------------------------*/
#define DEFINE_GATHERSCATTER(T,OP)                                              \
@kernel void gatherScatter_##T##_##OP(const dlong Nblocks,                      \
                                      const int   Nentries,                     \
                                      const int   Nvectors,                     \
                                      const dlong stride,                       \
                                      @restrict const dlong *blockStarts,       \
                                      @restrict const dlong *gatherStarts,      \
                                      @restrict const dlong *gatherIds,         \
                                      @restrict           T *q)                 \
{                                                                               \
  for(dlong m=0;m<Nvectors;++m;@outer(2)){                                      \
    for(dlong k=0;k<Nentries;++k;@outer(1)){                                    \
      for(dlong b=0;b<Nblocks;++b;@outer(0)){                                   \
        @exclusive dlong blockStart, blockEnd, gStart, sStart;                  \
        @shared T gtemp[p_gatherNodesPerBlock];                                 \
        @shared T stemp[p_gatherNodesPerBlock];                                 \
                                                                                \
        for(dlong n=0;n<p_blockSize;++n;@inner){                                \
          blockStart = blockStarts[b];                                          \
          blockEnd   = blockStarts[b+1];                                        \
          gStart = gatherStarts[blockStart];                                    \
          sStart = gStart;                                                      \
                                                                                \
          for (dlong id=gStart+n;id<gatherStarts[blockEnd];id+=p_blockSize) {   \
            gtemp[id-gStart] = q[k+gatherIds[id]*Nentries+m*stride];            \
          }                                                                     \
        }                                                                       \
        @barrier();                                                      \
        for(dlong n=0;n<p_blockSize;++n;@inner){                                \
          for (dlong row=blockStart+n;row<blockEnd;row+=p_blockSize) {          \
            const dlong gRowStart = gatherStarts[row]  -gStart;                 \
            const dlong gRowEnd   = gatherStarts[row+1]-gStart;                 \
            const dlong sRowStart = gRowStart;                                  \
            const dlong sRowEnd   = gRowEnd;                                    \
            T gq = init_##T##_##OP;                                             \
            for (dlong i=gRowStart;i<gRowEnd;i++) {                             \
              OGS_DO_##OP(gq,gtemp[i]);                                         \
            }                                                                   \
            for (dlong i=sRowStart;i<sRowEnd;i++) {                             \
              stemp[i] = gq;                                                    \
            }                                                                   \
          }                                                                     \
        }                                                                       \
        @barrier();                                                      \
                                                                                \
        for(dlong n=0;n<p_blockSize;++n;@inner){                                \
          for (dlong id=sStart+n;id<gatherStarts[blockEnd];id+=p_blockSize) {   \
            q[k+gatherIds[id]*Nentries+m*stride] = stemp[id-sStart];            \
          }                                                                     \
        }                                                                       \
        @barrier();                                                      \
      }                                                                         \
    }                                                                           \
  }                                                                             \
}

#define DEFINE_PROCS(T) \
  OGS_FOR_EACH_OP(T,DEFINE_GATHERSCATTER)

OGS_FOR_EACH_TYPE(DEFINE_PROCS)
