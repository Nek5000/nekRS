/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/


@kernel void cdsHaloExtract(const dlong Nelements,
			    const dlong NhaloElements,
			    @restrict const  dlong   *  haloElements,
          const dlong voffset,
          const dlong soffset,
          @restrict const  dfloat *  U,
          @restrict const  dfloat *  S,
			    @restrict dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){     // for all entries in this element
      const dlong id   = n + p_Np*haloElements[e];
      const dlong base = n + p_NTfields*p_Np*e;

      #pragma unroll p_NVfields
      for (int i=0;i<p_NVfields;i++) {
         haloq[base + i*p_Np] = U[id +i*voffset];
      }

      #pragma unroll p_NSfields
      for (int i=p_NVfields;i<p_NTfields;i++) {
        haloq[base + i*p_Np]    = S[id +(i-p_NVfields)*soffset];
      }

    }
  }
}

@kernel void cdsHaloScatter(const dlong Nelements,
          const dlong NhaloElements,
          const dlong voffset,
          const dlong soffset,
          @restrict dfloat *  U,
          @restrict dfloat *  S,
          @restrict const  dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){ 
      const dlong id   = n + p_Np*(e+Nelements);
      const dlong base = n + p_NTfields*p_Np*e;

      #pragma unroll p_NVfields
      for (int i=0;i<p_NVfields;i++) {
        U[id +i*voffset] =  haloq[base + i*p_Np];
      }

      #pragma unroll p_NSfields
      for (int i=p_NVfields;i<p_NTfields;i++) {
        S[id +(i-p_NVfields)*soffset] = haloq[base + i*p_Np];
      }
    }
  }
}

@kernel void cdsScalarHaloExtract(const dlong Nelements,
          const dlong NhaloElements,
          @restrict const  dlong   *  haloElements,
          const dlong soffset,
          @restrict const  dfloat *  S,
          @restrict dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){     // for all entries in this element
      const dlong id   = n + p_Np*haloElements[e];
      const dlong base = n + p_NSfields*p_Np*e;

#pragma unroll p_NSfields
      for (int i=0;i<p_NSfields;i++) {
        haloq[base + i*p_Np] = S[id +i*soffset];
      }
    }
  }
}

@kernel void cdsScalarHaloScatter(const dlong Nelements,
          const dlong NhaloElements,
          const dlong soffset,
          @restrict dfloat *  S,
          @restrict const  dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){ 
      const dlong id   = n + p_Np*(e+Nelements);
      const dlong base = n + p_NSfields*p_Np*e;

#pragma unroll p_NSfields
      for (int i=0;i<p_NSfields;i++) {
        S[id + i*soffset] = haloq[base + i*p_Np];
      }
    }
  }
}



// CDS Thin Halo Exchange for U and S fields together
@kernel void cdsHaloGet(const dlong NhaloElements,
                        const dlong voffset,
                        const dlong soffset,
                        @restrict const  dlong  * haloElements,
                        @restrict const  dlong  * haloGetNodeIds,
                        @restrict const  dfloat *  U,
                        @restrict const  dfloat *  S,
                        @restrict dfloat *  haloq){
  
  for(dlong e=0;e<NhaloElements;++e;@outer(0)){  // for all elements
    for(int n=0;n<p_Nfp;++n;@inner(0)){     // for all entries in this trace face
      //const dlong elmt  = haloElements[e];
      const dlong  id   = haloGetNodeIds[e*p_Nfp+n];
      const dlong base  = p_Nfp*p_NTfields*e + n;

      #pragma unroll p_NVfields
      for (int i=0;i<p_NVfields;i++) {
         haloq[base + i*p_Nfp] = U[id +i*voffset];
      }

      #pragma unroll p_NSfields
      for (int i=p_NVfields;i<p_NTfields;i++) {
        haloq[base + i*p_Nfp]    = S[id +(i-p_NVfields)*soffset];
      }
    }
  }
}


@kernel void cdsHaloPut(const dlong NhaloElements,
                        const dlong voffset,
                        const dlong soffset,
                        @restrict const  dlong  * haloElements,
                        @restrict const  dlong  * haloPutNodeIds,
                        @restrict        dfloat * U, 
                        @restrict        dfloat * S, 
                        @restrict const  dfloat * haloq){
  

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){  // for all elements
    for(int n=0;n<p_Nfp;++n;@inner(0)){     // for all entries in this trace face
      const dlong  id  = haloPutNodeIds[e*p_Nfp+n];
      const dlong base = p_Nfp*p_NTfields*e + n; 

      #pragma unroll p_NVfields
      for (int i=0;i<p_NVfields;i++) {
        U[id +i*voffset] =  haloq[base + i*p_Nfp];
      }

      #pragma unroll p_NSfields
      for (int i=p_NVfields;i<p_NTfields;i++) {
        S[id +(i-p_NVfields)*soffset] = haloq[base + i*p_Nfp];
      }   

    }
  }
}



// CDS Thin Halo Exchange for S fields only in Subcycle
@kernel void cdsScalarHaloGet(const dlong NhaloElements,
                        const dlong soffset,
                        @restrict const  dlong  * haloElements,
                        @restrict const  dlong  * haloGetNodeIds,
                        @restrict const  dfloat *  S,
                        @restrict dfloat *  haloq){
  
  for(dlong e=0;e<NhaloElements;++e;@outer(0)){  // for all elements
    for(int n=0;n<p_Nfp;++n;@inner(0)){     // for all entries in this trace face
      //const dlong elmt  = haloElements[e];
      const dlong  id   = haloGetNodeIds[e*p_Nfp+n];
      const dlong base  = p_Nfp*p_NSfields*e + n;

      #pragma unroll p_NSfields
      for (int i=0;i<p_NSfields;i++) {
        haloq[base + i*p_Nfp]    = S[id +i*soffset];
      }
    }
  }
}


@kernel void cdsScalarHaloPut(const dlong NhaloElements,
                        const dlong soffset,
                        @restrict const  dlong  * haloElements,
                        @restrict const  dlong  * haloPutNodeIds,
                        @restrict        dfloat * S, 
                        @restrict const  dfloat * haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){  // for all elements
    for(int n=0;n<p_Nfp;++n;@inner(0)){     // for all entries in this trace face
      const dlong  id  = haloPutNodeIds[e*p_Nfp+n];
      const dlong base = p_Nfp*p_NSfields*e + n; 

      #pragma unroll p_NSfields
      for (int i=0;i<p_NSfields;i++) {
        S[id +i*soffset] = haloq[base + i*p_Nfp];
      }   

    }
  }
}