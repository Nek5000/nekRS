@kernel void RANSktauComputeHex3D(const dlong Nelements,
                                  const dlong offset,
                                  const dfloat rho,
                                  const dfloat mue,
                                  @ restrict const dfloat *vgeo,
                                  @ restrict const dfloat *D,
                                  @ restrict const dfloat *K,
                                  @ restrict const dfloat *TAU,
                                  @ restrict const dfloat *STMAG2,
                                  @ restrict const dfloat *OIOJSK,
                                  @ restrict dfloat *SRCDIAG,
                                  @ restrict dfloat *SRC)
{
  for (dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_k[p_Nq][p_Nq];
    @shared dfloat s_tau[p_Nq][p_Nq];
    @shared dfloat s_tauSqrt[p_Nq][p_Nq];
    @exclusive dfloat s_kloc[p_Nq];
    @exclusive dfloat s_tauloc[p_Nq];
    @exclusive dfloat s_tauSqrtloc[p_Nq];

    @shared dfloat s_D[p_Nq][p_Nq];

#pragma unroll p_Nq
    for (int k = 0; k < p_Nq; ++k) {
      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          dlong id = i + j * p_Nq;
          if (k == 0)
            s_D[0][id] = D[id];

          id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          const dfloat kn = K[id];
          const dfloat taun = TAU[id];

          s_k[j][i] = kn;
          s_tau[j][i] = taun;
          s_tauSqrt[j][i] = sqrt(taun);
          if (k == 0) {
#pragma unroll p_Nq
            for (int l = 0; l < p_Nq; ++l) {
              const dlong other_id = e * p_Np + l * p_Nq * p_Nq + j * p_Nq + i;
              const dfloat lockn = K[other_id];
              const dfloat loctaun = TAU[other_id];
              s_kloc[l] = lockn;
              s_tauloc[l] = loctaun;
              s_tauSqrtloc[l] = sqrt(loctaun);
            }
          }
        }
      }

      @barrier();

      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong gid = e * p_Np * p_Nvgeo + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat drdx = vgeo[gid + p_RXID * p_Np];
          const dfloat drdy = vgeo[gid + p_RYID * p_Np];
          const dfloat drdz = vgeo[gid + p_RZID * p_Np];
          const dfloat dsdx = vgeo[gid + p_SXID * p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID * p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID * p_Np];
          const dfloat dtdx = vgeo[gid + p_TXID * p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID * p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID * p_Np];
          const dfloat JW = vgeo[gid + p_JWID * p_Np];

          dfloat dkdr = 0, dkds = 0, dkdt = 0;
          dfloat dtaudr = 0, dtauds = 0, dtaudt = 0;
          dfloat dtauSqrtdr = 0, dtauSqrtds = 0, dtauSqrtdt = 0;

#pragma unroll p_Nq
          for (int n = 0; n < p_Nq; n++) {
            const dfloat Dr = s_D[i][n];
            const dfloat Ds = s_D[j][n];
            const dfloat Dt = s_D[k][n];

            dkdr += Dr * s_k[j][n];
            dkds += Ds * s_k[n][i];
            dkdt += Dt * s_kloc[n];

            dtaudr += Dr * s_tau[j][n];
            dtauds += Ds * s_tau[n][i];
            dtaudt += Dt * s_tauloc[n];

            dtauSqrtdr += Dr * s_tauSqrt[j][n];
            dtauSqrtds += Ds * s_tauSqrt[n][i];
            dtauSqrtdt += Dt * s_tauSqrtloc[n];
          }

          const dfloat dkdx = drdx * dkdr + dsdx * dkds + dtdx * dkdt;
          const dfloat dkdy = drdy * dkdr + dsdy * dkds + dtdy * dkdt;
          const dfloat dkdz = drdz * dkdr + dsdz * dkds + dtdz * dkdt;

          const dfloat dtaudx = drdx * dtaudr + dsdx * dtauds + dtdx * dtaudt;
          const dfloat dtaudy = drdy * dtaudr + dsdy * dtauds + dtdy * dtaudt;
          const dfloat dtaudz = drdz * dtaudr + dsdz * dtauds + dtdz * dtaudt;

          const dfloat dtauSqrtdx = drdx * dtauSqrtdr + dsdx * dtauSqrtds + dtdx * dtauSqrtdt;
          const dfloat dtauSqrtdy = drdy * dtauSqrtdr + dsdy * dtauSqrtds + dtdy * dtauSqrtdt;
          const dfloat dtauSqrtdz = drdz * dtauSqrtdr + dsdz * dtauSqrtds + dtdz * dtauSqrtdt;

          const dfloat xk = -(dkdx * dtaudx + dkdy * dtaudy + dkdz * dtaudz);
          const dfloat xt = dtaudx * dtaudx + dtaudy * dtaudy + dtaudz * dtaudz;
          const dfloat xtq = dtauSqrtdx * dtauSqrtdx + dtauSqrtdy * dtauSqrtdy + dtauSqrtdz * dtauSqrtdz;

          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          const dfloat stMag2 = STMAG2[id];
          const dfloat OiOjSk = OIOJSK[id];

          const dfloat kk = K[id];
          const dfloat tau = TAU[id];

          const dfloat mu_t = rho * p_alpinf_str * kk * tau;
          dfloat itau = 0;
          if (tau > 0)
            itau = 1 / (tau + p_tiny);

          dfloat sigd = p_sigd_min;
          dfloat f_beta_str = 1.0;
          if (xk > 0) {
            const dfloat xk3 = xk * xk * tau * tau;
            sigd = p_sigd_max;
            f_beta_str = (1.0 + p_fb_c1st * xk3) / (1.0 + p_fb_c2st * xk3);
          }
	  
          // compute source term for k
          const dfloat Y_k = rho * p_betainf_str * f_beta_str * itau;
          const dfloat kSrc = fmin(mu_t * 2*stMag2, 10.0 * Y_k * kk);
          const dfloat kDiag = Y_k;

          // compute source term for tau
          const dfloat x_w = fabs(OiOjSk) * (tau * tau * tau * p_ibetainf_str3);
          const dfloat f_b = (p_pope) ? (1.0 + p_fb_c1 * x_w) / (1.0 + p_fb_c2 * x_w) : 1.0;
          const dfloat Y_w = -rho * p_beta0 * f_b;
          const dfloat S_w0 = -rho * sigd *xk;
          const dfloat G_wp = rho * p_alp_inf * tau * 2*stMag2;

          const dfloat S_tau = fmin(8.0 * mue * xtq, 8.0 * p_beta0 / 3.0);
          const dfloat S_taup = 8.0 * rho * p_alpinf_str * kk * xtq * p_sigma_tau;	  

          dfloat tauSrc = 0.0;
          dfloat tauDiag = 0.0;

          if(tau < p_tiny){
            tauSrc = -Y_w - S_tau;
            tauDiag = G_wp - S_w0 + S_taup;
          }
          else{
            tauSrc = -Y_w;
            tauDiag = G_wp - S_w0 + S_taup + S_tau * itau;
          }
          SRC[id + 0 * offset] = kSrc;
          SRC[id + 1 * offset] = tauSrc;
          SRCDIAG[id + 0 * offset] = kDiag;
          SRCDIAG[id + 1 * offset] = tauDiag;
        }
      }
      @barrier();
    }
  }
}
