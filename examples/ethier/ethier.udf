//
// nekRS User Defined File
//

#include <math.h>
#include "udf.hpp"
#include "casedata.h"

static int ciMode = 0;
#include "ethier_ci.h"

/* UDF Functions */   

occa::kernel dpdxKernel; 
occa::kernel exactUVWPKernel; 

void userq(ins_t *ins, dfloat time, occa::memory o_S, occa::memory o_FS)
{
  mesh_t *mesh = ins->mesh; 
  cds_t *cds   = ins->cds; 
  const dlong Nlocal = ins->mesh->Nelements * ins->mesh->Np;

  dpdxKernel(Nlocal, time, mesh->o_x, mesh->o_y, mesh->o_z, 0*cds->fieldOffset, o_FS);
  dpdxKernel(Nlocal, time, mesh->o_x, mesh->o_y, mesh->o_z, 1*cds->fieldOffset, o_FS);
}                                                   

void UDF_LoadKernels(ins_t *ins)
{
  occa::properties& kernelInfo = *ins->kernelInfo;
  setupAide &options = ins->options;

  dfloat mue, rho;
  options.getArgs("VISCOSITY", mue);
  options.getArgs("DENSITY", rho); 
  kernelInfo["defines/p_nu"] = mue/rho;
  kernelInfo["defines/p_U0"] = P_U0;
  kernelInfo["defines/p_V0"] = P_V0;
  kernelInfo["defines/p_W0"] = P_W0;
  kernelInfo["defines/p_A"]  = P_A0 * M_PI;
  kernelInfo["defines/p_D"]  = P_D0 * M_PI;
  dpdxKernel = udfBuildKernel(ins, "dpdx");
  exactUVWPKernel = udfBuildKernel(ins, "exactUVWP"); 
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) ciSetup(comm, options);
}

void UDF_Setup(ins_t *ins)
{
  // get IC from nek
  if (!ins->readRestartFile) nek_copyTo(ins->startTime);
  udf.sEqnSource = &userq;
}

void UDF_ExecuteStep(ins_t *ins, dfloat time, int tstep)
{
  mesh_t *mesh = ins->mesh;
  cds_t *cds = ins->cds;

  if (tstep <= 5) {
    exactUVWPKernel(ins->Nlocal, time, mesh->o_x, mesh->o_y, mesh->o_z, ins->fieldOffset, ins->o_P, ins->o_U);
    ellipticZeroMean(ins->pSolver, ins->o_P);
    cds->o_S.copyFrom(ins->o_U, ins->Nlocal*sizeof(dfloat), 0*cds->fieldOffset*sizeof(dfloat));
    cds->o_S.copyFrom(ins->o_U, ins->Nlocal*sizeof(dfloat), 1*cds->fieldOffset*sizeof(dfloat));
  }

  if (ins->isOutputStep) {
    nek_ocopyFrom(time, tstep);
    nek_userchk();
  }
  if (ciMode) ciTestErrors(ins, time, tstep);
}
