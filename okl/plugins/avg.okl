@kernel void EX(const dlong N,
                const dlong offset,
                const dlong Nfields,
                const dfloat a,
                const dfloat b,
                @restrict const dfloat* X,
                @restrict dfloat* OUT)
{
  for(dlong n = 0; n < N; ++n; @tile(p_blockSize,@outer,@inner))
    if(n < N) {
      for(dlong fld = 0; fld < Nfields; ++fld) {
        const dlong id = n + fld * offset;
        const dfloat xn = X[id];
        OUT[id] = a * OUT[id] + b * xn;
      }
    }
}

@kernel void EXX(const dlong N,
                 const dlong offset,
                 const dlong Nfields,
                 const dfloat a,
                 const dfloat b,
                 @restrict const dfloat* X,
                 @restrict dfloat* OUT)
{
  for(dlong n = 0; n < N; ++n; @tile(p_blockSize,@outer,@inner))
    if(n < N) {
      for(dlong fld = 0; fld < Nfields; ++fld) {
        const dlong id = n + fld * offset;
        const dfloat xn = X[id];
        OUT[id] = a * OUT[id] + b * xn * xn;
      }
    }
}

@kernel void EXY(const dlong N,
                 const dlong offset,
                 const dlong Nfields,
                 const dfloat a,
                 const dfloat b,
                 @restrict const dfloat* X,
                 @restrict const dfloat* Y,
                 @restrict dfloat* OUT)
{
  for(dlong n = 0; n < N; ++n; @tile(p_blockSize,@outer,@inner))
    if(n < N) {
      for(dlong fld = 0; fld < Nfields; ++fld) {
        const dlong id = n + fld * offset;
        const dfloat xn = X[id];
        const dfloat yn = Y[id];
        OUT[id] = a * OUT[id] + b * xn * yn;
      }
    }
}
