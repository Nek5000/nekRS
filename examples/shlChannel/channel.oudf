@kernel void
cfill(const dlong N, const dlong offset, const dfloat angle, const dfloat dp, @ restrict dfloat *NU)
{
  for (dlong n = 0; n < N; ++n; @tile(p_blockSize, @outer, @inner)) {
    if (n < N) {

      const dfloat dpdx = dp * cos(angle);
      const dfloat dpdy = dp * sin(angle);
      const dfloat dpdz = 0.0;

      NU[n + 0 * offset] = dpdx;
      NU[n + 1 * offset] = dpdy;
      NU[n + 2 * offset] = dpdz;
    }
  }
}

// Boundary conditions
void velocityNeumannConditions(bcData *bc)
{
  bc->tr1 = -3.0 * p_visc;
  bc->tr2 = 0.0;
}
