/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

@kernel void subCycleMovingMeshComputeConvectionHex3D(const dlong Nelements,
                                                  @restrict const dfloat*  cubvgeo,
                                                  @restrict const dfloat*  cubD,
                                                  @restrict const dfloat*  cubInterpT,
                                                  @restrict const dfloat*  cubProjectT,
                                                  const dlong offset,
                                                  const dlong cubatureOffset,
                                                  @restrict const dfloat*  U,
                                                  @restrict const dfloat*  W,
                                                  @restrict dfloat*  result)
{
  // (phi, U.grad Ud)
  for(dlong element = 0; element < Nelements; ++element; @outer(0)) {
    @shared dfloat s_cubD[p_cubNq][p_cubNq];
    @shared dfloat s_cubInterpT[p_Nq][p_cubNq];
    @shared dfloat s_cubProjectT[p_cubNq][p_Nq];

    @shared dfloat s_U[p_cubNq][p_cubNq];
    @shared dfloat s_V[p_cubNq][p_cubNq];
    @shared dfloat s_W[p_cubNq][p_cubNq];

    @shared dfloat s_U1[p_Nq][p_cubNq];
    @shared dfloat s_V1[p_Nq][p_cubNq];
    @shared dfloat s_W1[p_Nq][p_cubNq];

    @exclusive dfloat r_U[p_cubNq], r_V[p_cubNq], r_W[p_cubNq];

    for(int j = 0; j < p_cubNq; ++j; @inner(1)) {
      for(int i = 0; i < p_cubNq; ++i; @inner(0)) {
        const int id = i + j * p_cubNq;

        if (id < p_Nq * p_cubNq) {
          s_cubInterpT[0][id] = cubInterpT[id];
          s_cubProjectT[0][id] = cubProjectT[id];
        }

        s_cubD[0][id] = cubD[id];
#pragma unroll p_cubNq
        for(int k = 0; k < p_cubNq; ++k) {
          r_U[k]  = 0;
          r_V[k]  = 0;
          r_W[k]  = 0;
        }
      }
    }

    for(int c = 0; c < p_Nq; ++c) {
      @barrier("local");

      for(int b = 0; b < p_cubNq; ++b; @inner(1))
        for(int a = 0; a < p_cubNq; ++a; @inner(0))
          if(a < p_Nq && b < p_Nq) {
            const dlong id = element * p_Np + c * p_Nq * p_Nq + b * p_Nq + a;

            const dfloat Ue = U[id + 0 * offset] - W[id + 0 * offset];
            const dfloat Ve = U[id + 1 * offset] - W[id + 1 * offset];
            const dfloat We = U[id + 2 * offset] - W[id + 2 * offset];

            s_U[b][a] = Ue;
            s_V[b][a] = Ve;
            s_W[b][a] = We;
          }

      @barrier("local");

      // interpolate in 'r'
      for(int b = 0; b < p_cubNq; ++b; @inner(1))
        for(int i = 0; i < p_cubNq; ++i; @inner(0))
          if(b < p_Nq) {
            dfloat U1  = 0, V1 = 0,  W1 = 0;

            for(int a = 0; a < p_Nq; ++a) {
              dfloat Iia = s_cubInterpT[a][i];
              U1  += Iia * s_U[b][a];
              V1  += Iia * s_V[b][a];
              W1  += Iia * s_W[b][a];
            }

            s_U1[b][i] = U1;
            s_V1[b][i] = V1;
            s_W1[b][i] = W1;
          }

      @barrier("local");

      // interpolate in 's'
      for(int j = 0; j < p_cubNq; ++j; @inner(1)) {
        for(int i = 0; i < p_cubNq; ++i; @inner(0)) {
          dfloat U2 = 0, V2 = 0,  W2 = 0;

          // interpolate in b
          for(int b = 0; b < p_Nq; ++b) {
            dfloat Ijb = s_cubInterpT[b][j];
            U2 += Ijb * s_U1[b][i];
            V2 += Ijb * s_V1[b][i];
            W2 += Ijb * s_W1[b][i];
          }

          // interpolate in c progressively
#pragma unroll p_cubNq
          for(int k = 0; k < p_cubNq; ++k) {
            dfloat Ikc = s_cubInterpT[c][k];

            r_U[k] += Ikc * U2;
            r_V[k] += Ikc * V2;
            r_W[k] += Ikc * W2;
          }
        }
      }
    }

#pragma unroll p_cubNq
    for(int k = 0; k < p_cubNq; ++k) {

      @barrier("local");

      for(int j = 0; j < p_cubNq; ++j; @inner(1))
        for(int i = 0; i < p_cubNq; ++i; @inner(0)) {

          const dlong gid = element * p_cubNp * p_Nvgeo + k * p_cubNq * p_cubNq + j * p_cubNq + i;
          const dfloat drdx = cubvgeo[gid + p_RXID * p_cubNp];
          const dfloat drdy = cubvgeo[gid + p_RYID * p_cubNp];
          const dfloat drdz = cubvgeo[gid + p_RZID * p_cubNp];
          const dfloat dsdx = cubvgeo[gid + p_SXID * p_cubNp];
          const dfloat dsdy = cubvgeo[gid + p_SYID * p_cubNp];
          const dfloat dsdz = cubvgeo[gid + p_SZID * p_cubNp];
          const dfloat dtdx = cubvgeo[gid + p_TXID * p_cubNp];
          const dfloat dtdy = cubvgeo[gid + p_TYID * p_cubNp];
          const dfloat dtdz = cubvgeo[gid + p_TZID * p_cubNp];
          const dfloat JW   = cubvgeo[gid + p_JWID * p_cubNp];

          const dfloat Un = r_U[k];
          const dfloat Vn = r_V[k];
          const dfloat Wn = r_W[k];

          const dfloat Uhat = JW * (Un * drdx + Vn * drdy + Wn * drdz);
          const dfloat Vhat = JW * (Un * dsdx + Vn * dsdy + Wn * dsdz);
          const dfloat What = JW * (Un * dtdx + Vn * dtdy + Wn * dtdz);

          const dlong id = element * p_cubNp + k * p_cubNq * p_cubNq + j * p_cubNq + i;
          result[id + 0 * cubatureOffset] = Uhat;
          result[id + 1 * cubatureOffset] = Vhat;
          result[id + 2 * cubatureOffset] = What;
        }
    }
  }
}
@kernel void subCycleStrongCubatureMovingMeshVolumeHex3D(const dlong Nelements,
                                                  @restrict const dlong*   elementList,
                                                  @restrict const dfloat*  cubD,
                                                  @restrict const dfloat*  cubInterpT,
                                                  @restrict const dfloat*  cubProjectT,
                                                  const dlong offset,
                                                  const dlong cubatureOffset,
                                                  @restrict const dfloat*  invLumpedMassMatrix,
                                                  @restrict const dfloat*  BdivW,
                                                  const dfloat c0,
                                                  const dfloat c1,
                                                  const dfloat c2,
                                                  @restrict const dfloat*  conv,
                                                  @restrict const dfloat*  Ud,
                                                  @restrict dfloat*  NU)
{
  // (phi, U.grad Ud)
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_cubD[p_cubNq][p_cubNq];
    @shared dfloat s_cubInterpT[p_Nq][p_cubNq];
    @shared dfloat s_cubProjectT[p_cubNq][p_Nq];

    @shared dfloat s_U[p_cubNq][p_cubNq];
    @shared dfloat s_V[p_cubNq][p_cubNq];
    @shared dfloat s_W[p_cubNq][p_cubNq];

    @shared dfloat s_Ud[p_cubNq][p_cubNq];
    @shared dfloat s_Vd[p_cubNq][p_cubNq];
    @shared dfloat s_Wd[p_cubNq][p_cubNq];

    @shared dfloat s_U1[p_Nq][p_cubNq];
    @shared dfloat s_V1[p_Nq][p_cubNq];
    @shared dfloat s_W1[p_Nq][p_cubNq];

    @shared dfloat s_Ud1[p_Nq][p_cubNq];
    @shared dfloat s_Vd1[p_Nq][p_cubNq];
    @shared dfloat s_Wd1[p_Nq][p_cubNq];

    @exclusive dfloat r_U[p_cubNq], r_V[p_cubNq], r_W[p_cubNq];
    @exclusive dfloat r_U2[p_cubNq], r_V2[p_cubNq], r_W2[p_cubNq];
    @exclusive dfloat r_Ud[p_cubNq], r_Vd[p_cubNq], r_Wd[p_cubNq];

    @exclusive dfloat r_c[p_nEXT];

    @exclusive dlong element;

    for(int j = 0; j < p_cubNq; ++j; @inner(1)) {
      for(int i = 0; i < p_cubNq; ++i; @inner(0)) {
        const int id = i + j * p_cubNq;
        element = elementList[e];

#pragma unroll p_nEXT 
        for (int s = 0; s < p_nEXT; s++) {
          dfloat coeff = 0;
          if(s == 0) coeff = c0;
          if(s == 1) coeff = c1;
          if(s == 2) coeff = c2;
          r_c[s] = coeff;
        }

        if (id < p_Nq * p_cubNq) {
          s_cubInterpT[0][id] = cubInterpT[id];
          s_cubProjectT[0][id] = cubProjectT[id];
        }

        s_cubD[0][id] = cubD[id];
#pragma unroll p_cubNq
        for(int k = 0; k < p_cubNq; ++k) {
          dfloat Ue = 0.0;
          dfloat Ve = 0.0;
          dfloat We = 0.0;
          const int id = element * p_cubNp + k * p_cubNq * p_cubNq + j * p_cubNq + i;
          for(int s = 0 ; s < p_nEXT; ++s){
            const int s_offset = s * p_NVfields * cubatureOffset;
            Ue += r_c[s] * conv[id + 0 * cubatureOffset + s_offset];
            Ve += r_c[s] * conv[id + 1 * cubatureOffset + s_offset];
            We += r_c[s] * conv[id + 2 * cubatureOffset + s_offset];
          }
          r_U[k] = Ue;
          r_V[k] = Ve;
          r_W[k] = We;
          r_Ud[k] = 0;
          r_Vd[k] = 0;
          r_Wd[k] = 0;
        }
      }
    }

    for(int c = 0; c < p_Nq; ++c) {
      @barrier("local");

      for(int b = 0; b < p_cubNq; ++b; @inner(1))
        for(int a = 0; a < p_cubNq; ++a; @inner(0))
          if(a < p_Nq && b < p_Nq) {
            // this can be improved
            const dlong id = element * p_Np + c * p_Nq * p_Nq + b * p_Nq + a;

            s_Ud[b][a] = Ud[id + 0 * offset];
            s_Vd[b][a] = Ud[id + 1 * offset];
            s_Wd[b][a] = Ud[id + 2 * offset];
          }

      @barrier("local");

      // interpolate in 'r'
      for(int b = 0; b < p_cubNq; ++b; @inner(1))
        for(int i = 0; i < p_cubNq; ++i; @inner(0))
          if(b < p_Nq) {
            dfloat Ud1 = 0,Vd1 = 0, Wd1 = 0;

            for(int a = 0; a < p_Nq; ++a) {
              dfloat Iia = s_cubInterpT[a][i];
              Ud1 += Iia * s_Ud[b][a];
              Vd1 += Iia * s_Vd[b][a];
              Wd1 += Iia * s_Wd[b][a];
            }

            s_Ud1[b][i] = Ud1;
            s_Vd1[b][i] = Vd1;
            s_Wd1[b][i] = Wd1;
          }

      @barrier("local");

      // interpolate in 's'
      for(int j = 0; j < p_cubNq; ++j; @inner(1)) {
        for(int i = 0; i < p_cubNq; ++i; @inner(0)) {
          dfloat Ud2 = 0,Vd2 = 0, Wd2 = 0;

          // interpolate in b
          for(int b = 0; b < p_Nq; ++b) {
            dfloat Ijb = s_cubInterpT[b][j];
            Ud2 += Ijb * s_Ud1[b][i];
            Vd2 += Ijb * s_Vd1[b][i];
            Wd2 += Ijb * s_Wd1[b][i];
          }

          // interpolate in c progressively
#pragma unroll p_cubNq
          for(int k = 0; k < p_cubNq; ++k) {
            dfloat Ikc = s_cubInterpT[c][k];

            r_Ud[k] += Ikc * Ud2;
            r_Vd[k] += Ikc * Vd2;
            r_Wd[k] += Ikc * Wd2;
          }
        }
      }
    }

#pragma unroll p_cubNq
    for(int k = 0; k < p_cubNq; ++k) {
      @barrier("local");

      for(int j = 0; j < p_cubNq; ++j; @inner(1))
        for(int i = 0; i < p_cubNq; ++i; @inner(0)) {
          s_Ud[j][i] = r_Ud[k];
          s_Vd[j][i] = r_Vd[k];
          s_Wd[j][i] = r_Wd[k];
        }

      @barrier("local");

      for(int j = 0; j < p_cubNq; ++j; @inner(1))
        for(int i = 0; i < p_cubNq; ++i; @inner(0)) {
          dfloat Udr = 0, Uds = 0, Udt = 0;
          dfloat Vdr = 0, Vds = 0, Vdt = 0;
          dfloat Wdr = 0, Wds = 0, Wdt = 0;

          for(int n = 0; n < p_cubNq; ++n) {
            dfloat Din = s_cubD[i][n];
            Udr += Din * s_Ud[j][n];
            Vdr += Din * s_Vd[j][n];
            Wdr += Din * s_Wd[j][n];
          }

          for(int n = 0; n < p_cubNq; ++n) {
            dfloat Djn = s_cubD[j][n];
            Uds += Djn * s_Ud[n][i];
            Vds += Djn * s_Vd[n][i];
            Wds += Djn * s_Wd[n][i];
          }

          for(int n = 0; n < p_cubNq; ++n) {
            dfloat Dkn = s_cubD[k][n];
            Udt += Dkn * r_Ud[n];
            Vdt += Dkn * r_Vd[n];
            Wdt += Dkn * r_Wd[n];
          }

          const dfloat Uhat = r_U[k];
          const dfloat Vhat = r_V[k];
          const dfloat What = r_W[k];

          // U*dUdx + V*dUdy + W*dUdz = (U*(drdx*dUdr+dsdx*dUds+dtdx*dUdt) + V*(drdy*dUdr ..))

          // I_f^t*(J_f*C_f^t)*G_f*\hat{D}_f*I_f*u
          r_U2[k] = Uhat * Udr + Vhat * Uds + What * Udt;
          r_V2[k] = Uhat * Vdr + Vhat * Vds + What * Vdt;
          r_W2[k] = Uhat * Wdr + Vhat * Wds + What * Wdt;
        }
    }

    // now project back in t
    for(int c = 0; c < p_Nq; ++c) {
      @barrier("local");

      for(int j = 0; j < p_cubNq; ++j; @inner(1)) {
        for(int i = 0; i < p_cubNq; ++i; @inner(0)) {
          dfloat rhsU = 0, rhsV = 0, rhsW = 0;

#pragma unroll p_cubNq
          for(int k = 0; k < p_cubNq; ++k) {
            dfloat Ikc = s_cubInterpT[c][k];
            rhsU += Ikc * r_U2[k];
            rhsV += Ikc * r_V2[k];
            rhsW += Ikc * r_W2[k];
          }

          s_U[j][i] = rhsU;
          s_V[j][i] = rhsV;
          s_W[j][i] = rhsW;
        }
      }

      @barrier("local");

      for(int b = 0; b < p_cubNq; ++b; @inner(1))
        for(int i = 0; i < p_cubNq; ++i; @inner(0))
          if(b < p_Nq) {
            dfloat rhsU = 0, rhsV = 0, rhsW = 0;

            for(int j = 0; j < p_cubNq; ++j) {
              dfloat Ijb = s_cubInterpT[b][j];
              rhsU += Ijb * s_U[j][i];
              rhsV += Ijb * s_V[j][i];
              rhsW += Ijb * s_W[j][i];
            }

            s_Ud[b][i] = rhsU;
            s_Vd[b][i] = rhsV;
            s_Wd[b][i] = rhsW;
          }

      @barrier("local");

      for(int b = 0; b < p_cubNq; ++b; @inner(1))
        for(int a = 0; a < p_cubNq; ++a; @inner(0))
          if(a < p_Nq && b < p_Nq) {
            dfloat rhsU = 0, rhsV = 0, rhsW = 0;

            for(int i = 0; i < p_cubNq; ++i) {
              dfloat Iia = s_cubInterpT[a][i];
              rhsU += Iia * s_Ud[b][i];
              rhsV += Iia * s_Vd[b][i];
              rhsW += Iia * s_Wd[b][i];
            }

            const dlong id = element * p_Np + c * p_Nq * p_Nq + b * p_Nq + a;
            dfloat invLMM = p_MovingMesh ? 0.0 : invLumpedMassMatrix[id];
            dfloat bdivw = 0.0;
            #pragma unroll
            for (int s = 0; s < p_nEXT; s++) {
              invLMM += r_c[s] * invLumpedMassMatrix[id + s * offset];
              bdivw += r_c[s] * BdivW[id + s * offset];
            }

            NU[id + 0 * offset] = (rhsU - bdivw * Ud[id + 0 * offset]) * invLMM;
            NU[id + 1 * offset] = (rhsV - bdivw * Ud[id + 1 * offset]) * invLMM;
            NU[id + 2 * offset] = (rhsW - bdivw * Ud[id + 2 * offset]) * invLMM;
          }
    }
  }
}
