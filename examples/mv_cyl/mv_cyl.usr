#include "casedata.h"
C-----------------------------------------------------------------------
C
C  This is closed domain with a moving postion.
C  The resulting 1D isentropic flow is compared to an analytical solution.  
C
c-----------------------------------------------------------------------
      SUBROUTINE USERVP (IX,IY,IZ,ieg)

C Set user variable properties

      INCLUDE 'SIZE'   
      INCLUDE 'TOTAL'  
      INCLUDE 'NEKUSE' 

      if (ifield.eq.1) then 
         utrans = 1.0*p0th/temp
         udiff  = 1e-2
      else
         utrans = 1.0*p0th/temp
         udiff  = 1e-2 
      endif

      RETURN
      END

C=======================================================================

      SUBROUTINE USERF  (IX,IY,IZ,ieg)                

C Set user forcing function for the momentum

      INCLUDE 'SIZE'   
      INCLUDE 'TSTEP'  
      INCLUDE 'NEKUSE' 

      FFY = 0.0
      FFX = 0.0
      FFZ = 0.0

      RETURN
      END

C=======================================================================

      SUBROUTINE USERQ  (IX,IY,IZ,ieg)                

C Set user forcing function for the energy and species

      INCLUDE 'SIZE'   
      INCLUDE 'TOTAL'  
      INCLUDE 'NEKUSE' 
      
      qvol = 0.0

      RETURN
      END

C=======================================================================

      SUBROUTINE USERCHK

      INCLUDE 'SIZE'
      INCLUDE 'TOTAL'

      !ifusermv = .true.                  ! define our own mesh velocity
      !call user_mvel(time)               ! Fill mesh velocity

      call printdiverr
      call user_print_err

      RETURN
      END

C=======================================================================

      SUBROUTINE USERBC (IX,IY,IZ,ISIDE,ieg)                

      INCLUDE 'SIZE'
      INCLUDE 'TSTEP'
      INCLUDE 'NEKUSE'

      omega = P_OMEGA
      amp   = P_AMP

      IF (IFIELD .eq. 1) THEN 
        UX = 0.0
        UY = amp*sin(omega*time) ! piston 
        UZ = 0.0
      ENDIF

      return
      END   

C=======================================================================

      SUBROUTINE USERIC (IX,IY,IZ,ieg)

C   Set initial conditions

      INCLUDE 'SIZE'
      INCLUDE 'TOTAL'
      INCLUDE 'NEKUSE'

      p0th   = 1.0

      IF (IFIELD.EQ.1) THEN          ! ---------- Velocity
          UX = 0.0
          UY = 0.0
          UZ = 0.0
      ENDIF

      IF (IFIELD.EQ.2)               ! ---------- Temperature
     &    TEMP = 1.0 

      RETURN
      END

C=======================================================================

      subroutine usrdat

      return
      end

C=======================================================================
      subroutine usrdat2()  ! This routine to modify mesh coordinates

      include 'SIZE'
      include 'TOTAL'

      call rescale_x(xm1, 0.0,XLEN)
      call rescale_x(ym1,-1.0,-1.0+YLEN)
      call rescale_x(zm1, 0.0,ZLEN)

      do iel=1,nelt
      do ifc=5,6
         cbc(ifc,iel,1) = 'P  '
      enddo
      enddo

      return
      end

c-----------------------------------------------------------------------

      subroutine usrsetvert(glo_num,nel,nx,ny,nz) ! to modify glo_num
      integer*8 glo_num(1)

      ! kludge for periodic bc in z
      nxy  = nx*ny
      nxyz = nx*ny*nz
      do iel = 1,nel
         ioff = nxyz*(iel-1)
         do ixy = 1,nxy
            glo_num(ioff + nxy*(nz-1) + ixy) = glo_num(ioff + ixy)
         enddo
      enddo

      return
      end
C=======================================================================

      subroutine usrdat3

      return
      end

C=======================================================================
      subroutine user_mvel (time_)

      include 'SIZE'
      include 'TOTAL'

      common /c_mybc/ omega, v_piston

      n    = nx1*ny1*nz1*nelv
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)  ! this is the separation between moving and nonmvg
      ylen = ymin-ymax

      omega = P_OMEGA
      amp   = P_AMP
      v_piston = amp*sin(omega*time_)

      do i=1,n
        yy = ym1(i,1,1,1)
        ysc = (yy-ymax)/ylen
        wx(i,1,1,1) = 0
        wy(i,1,1,1) = ysc*v_piston
        if (if3d) wz(i,1,1,1) = 0
      enddo

      return
      end
C-----------------------------------------------------------------------
      subroutine exact_sol (time_, volex, vpex,pex,dpdtex,qtlex,ypex)

      gam0   = P_GAMMA
      omega  = P_OMEGA
      amp    = P_AMP
      areap  = XLEN*ZLEN 
      volex0 = areap * YLEN 
      pex0   = 1.0

      vpex  = amp*sin(omega*time_)
      volex = volex0 + areap * amp * (cos(omega*time_) - 1.0) / omega
      pex   = pex0 *(volex0/volex)**gam0
      dpdtex= gam0 * pex0 * volex0**gam0 * areap*vpex/volex**(gam0+1.0)
      qtlex =( (gam0-1.0)/gam0 - 1.0 ) * dpdtex/pex
      ypex  =-0.5*( 1.0 + cos(omega*time_) )

      return
      end
c =======================================================================
      subroutine user_print_err
c
      include 'SIZE'
      include 'TOTAL'

      real glcflux
      real tavg, tex, var
      real err(6)
      save err
      COMMON /NRSSCPTR/ nrs_scptr(1)
      integer*8         nrs_scptr

      nrs_scptr(1) = loc(err)

      nxyz  = nx1*ny1*nz1
      ntotv = nxyz*nelv

      termV = -1.*glcflux(vx,vy,vz)
      ypist = glmin(ym1,ntotv)

      call exact_sol (time,volex,vpex,pex,dpdtex,qtlex,ypex)
      tavg = glsc2(t, bm1, ntotv) / volvm1
      tex = pex ** ((P_GAMMA-1.)/P_GAMMA)

      write(*,'(A,7(1X,E15.7))') 'err',time,
     $   volex-volvm1,(vpex*XLEN*ZLEN)-termV,
     &   pex-p0th,dpdtex-dp0thdt,ypex-ypist,
     &   tavg - tex
      err(1) = abs(volex - volvm1)
      err(2) = abs(vpex*XLEN*ZLEN-termV)
      err(3) = abs(pex-p0th)
      err(4) = abs(dpdtex-dp0thdt)
      err(5) = abs(ypex-ypist)
      err(6) = abs(tavg-tex)

      return
      end

