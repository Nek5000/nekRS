#define LENGTH 10.0
#define VSTRENGTH 10.0 

c-----------------------------------------------------------------------
c
c  User specified routines:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
c     include 'TSTEP'
      include 'TOTAL'
      include 'NEKUSE'
c
      udiff =0.
      utrans=0.
      return
      end
c
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TSTEP'
c     include 'TOTAL'
      include 'NEKUSE'
c
      FFX = 0.0
      FFY = 0.0
      FFZ = 0.0
      return
      end
c
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
      QVOL   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      common /SCRNS/ wo1(lx1,ly1,lz1,lelv)
     &              ,wo2(lx1,ly1,lz1,lelv)
     &              ,omg(lx1*ly1*lz1*lelv,ldim)

      call comp_vort3(omg,wo1,wo2,vx,vy,vz)
      call copy(t,omg(1,3),nx1*ny1*nz1*nelv)

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      xt = x - LENGTH/2 
      yt = y - LENGTH/2
      r2 = xt*xt + yt*yt

      aa= VSTRENGTH * exp(-0.5*r2)
      ux = 1.0 - aa * yt
      uy = aa * xt 
      uz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      xmin = 0
      xmax = LENGTH
      call rescale_x(xm1,xmin,xmax) 
      call rescale_x(ym1,xmin,xmax)

      do iel=1,nelt
        do ifc=1,2*ndim
          if (cbc(ifc,iel,1) .eq. 'v  ') boundaryID(ifc,iel) = 1
          if (cbc(ifc,iel,1) .eq. 'o  ') boundaryID(ifc,iel) = 2
        enddo
        cbc(5,iel,1) = 'P  '
        cbc(6,iel,1) = 'P  '
      enddo

      ifto = .true.

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
      function dongOutflow(ix,iy,iz,iel,iside,u0,delta)

      include 'SIZE'
      include 'SOLN'
      include 'GEOM'

      real sn(3)

      ux = vx(ix,iy,iz,iel)
      uy = vy(ix,iy,iz,iel)
      uz = vz(ix,iy,iz,iel)

      call getSnormal(sn,ix,iy,iz,iside,iel)
      vn = ux*sn(1) + uy*sn(2) + uz*sn(3) 
      S0 = 0.5*(1.0 - tanh(vn/u0/delta))

      dongOutflow = -0.5*(ux*ux+uy*uy+uz*uz)*S0

      return
      end
C-----------------------------------------------------------------------
      subroutine usrsetvert(glo_num,nel,nx,ny,nz) ! to modify glo_num
      integer*8 glo_num(1)

      ! kludge for periodic bc in z
      nxy  = nx*ny
      nxyz = nx*ny*nz
      do iel = 1,nel
         ioff = nxyz*(iel-1)
         do ixy = 1,nxy
            glo_num(ioff + nxy*(nz-1) + ixy) = glo_num(ioff + ixy)
         enddo
      enddo

      return
      end
