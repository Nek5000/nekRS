// Boundary conditions

void scalarDirichletConditions(bcData *bc) {
  bc->s = 1.f - bc->z; 
}

// Kernels

@kernel void fillFU(const dlong Ntotal,
                    const dlong offset,
                    @restrict const dfloat *S,
                    @restrict dfloat * FU) { 
  for (dlong n=0;n<Ntotal;++n;@tile(p_blockSize,@outer,@inner)) {
    if (n<Ntotal) {
      FU[n + 0*offset] = 0.0;
      FU[n + 1*offset] = 0.0;
      FU[n + 2*offset] = S[n];
    }
  }
}
