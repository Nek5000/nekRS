// compute the centroid (average coordinate) for all of the coordinates
// on a specified BID

// pre: result (length: p_Nfaces * Nelements * 3)
//      is pre-filled with 0s
// pre: count (length: p_Nfaces * Nelements)
//      is pre-filled with 0s

@kernel void computeFaceCentroid(const dlong Nelements,
                                 const dlong BID,
                                 @ restrict const dlong *EToB,
                                 @ restrict const dlong *vmapM,
                                 @ restrict const dfloat *x,
                                 @ restrict const dfloat *y,
                                 @ restrict const dfloat *z,
                                 @ restrict dfloat *result,
                                 @ restrict dfloat *count)
{

  for (dlong e = 0; e < Nelements; e++; @outer(0)) {
    for (int f = 0; f < p_Nfaces; f++) {

      @shared dfloat avg_x[p_blockSize];
      @shared dfloat avg_y[p_blockSize];
      @shared dfloat avg_z[p_blockSize];

      for (int m = 0; m < p_blockSize; ++m; @inner(0)) {
        if (m < p_Nfp) {
          const int n = m + f * p_Nfp;
          const int sk = e * p_Nfp * p_Nfaces + n;
          const dlong idM = vmapM[sk];
          avg_x[m] = (EToB[f + p_Nfaces * e] == BID) ? x[idM] : 0.0;
          avg_y[m] = (EToB[f + p_Nfaces * e] == BID) ? y[idM] : 0.0;
          avg_z[m] = (EToB[f + p_Nfaces * e] == BID) ? z[idM] : 0.0;
        }
        else {
          avg_x[m] = 0.0;
          avg_y[m] = 0.0;
          avg_z[m] = 0.0;
        }
      }

      // compute reduction
      @barrier();

#if p_blockSize > 512
      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 512) {
          avg_x[t] += avg_x[t + 512];
          avg_y[t] += avg_y[t + 512];
          avg_z[t] += avg_z[t + 512];
        }
      }
      @barrier();
#endif

#if p_blockSize > 256
      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 256) {
          avg_x[t] += avg_x[t + 256];
          avg_y[t] += avg_y[t + 256];
          avg_z[t] += avg_z[t + 256];
        }
      }
      @barrier();
#endif

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 128) {
          avg_x[t] += avg_x[t + 128];
          avg_y[t] += avg_y[t + 128];
          avg_z[t] += avg_z[t + 128];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 64) {
          avg_x[t] += avg_x[t + 64];
          avg_y[t] += avg_y[t + 64];
          avg_z[t] += avg_z[t + 64];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 32) {
          avg_x[t] += avg_x[t + 32];
          avg_y[t] += avg_y[t + 32];
          avg_z[t] += avg_z[t + 32];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 16) {
          avg_x[t] += avg_x[t + 16];
          avg_y[t] += avg_y[t + 16];
          avg_z[t] += avg_z[t + 16];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 8) {
          avg_x[t] += avg_x[t + 8];
          avg_y[t] += avg_y[t + 8];
          avg_z[t] += avg_z[t + 8];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 4) {
          avg_x[t] += avg_x[t + 4];
          avg_y[t] += avg_y[t + 4];
          avg_z[t] += avg_z[t + 4];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 2) {
          avg_x[t] += avg_x[t + 2];
          avg_y[t] += avg_y[t + 2];
          avg_z[t] += avg_z[t + 2];
        }
      }
      @barrier();

      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
        if (t < 1) {
          // store average (x,y,z) for the face
          result[f + p_Nfaces * e + 0 * Nelements * p_Nfaces] = (avg_x[0] + avg_x[1]) / p_Nfp;
          result[f + p_Nfaces * e + 1 * Nelements * p_Nfaces] = (avg_y[0] + avg_y[1]) / p_Nfp;
          result[f + p_Nfaces * e + 2 * Nelements * p_Nfaces] = (avg_z[0] + avg_z[1]) / p_Nfp;
          // store 0/1 on whether this face participated
          count[f + p_Nfaces * e] = (EToB[f + p_Nfaces * e] == BID) ? 1.0 : 0.0;
        }
      }

      @barrier();
    }
  }
}
