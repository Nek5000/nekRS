/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


@kernel void insVelocityHaloExtract(const dlong Nelements,
                                   const dlong NhaloElements,
                                   @restrict const  dlong   *  haloElements,
                                   const dlong offset,
                                   @restrict const  dfloat *  U,
                                         @restrict dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){     // for all entries in this element
      const dlong id   = n + p_Np*haloElements[e];
      const dlong base = n + p_NVfields*p_Np*e;

      #pragma unroll p_NVfields
      for (int i=0;i<p_NVfields;i++) {
        haloq[base + i*p_Np] = U[id +i*offset];
      }
    }
  }
}

@kernel void insVelocityHaloScatter(const dlong Nelements,
                                   const dlong NhaloElements,
                                   const dlong offset,
                                         @restrict dfloat *  U,
                                   @restrict const  dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){ 
      const dlong id   = n + p_Np*(e+Nelements);
      const dlong base = n + p_NVfields*p_Np*e;

      #pragma unroll p_NVfields
      for (int i=0;i<p_NVfields;i++) {
        U[id + i*offset] = haloq[base + i*p_Np];
      }
    }
  }
}

@kernel void insPressureHaloExtract(const dlong Nelements,
                                   const dlong NhaloElements,
                                   @restrict const  dlong  *  haloElements,
                                   @restrict const  dfloat *  P,
                                         @restrict dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){     // for all entries in this element
      const dlong id   = n + p_Np*haloElements[e];
      const dlong base = n + p_Np*e;

      haloq[base] = P[id];
    }
  }
}

@kernel void insPressureHaloScatter(const dlong Nelements,
                                   const dlong NhaloElements,
                                         @restrict dfloat *  P,
                                   @restrict const  dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){ 
      const dlong id   = n + p_Np*(e+Nelements);
      const dlong base = n + p_Np*e;
      P[id] = haloq[base];
    }
  }
}
