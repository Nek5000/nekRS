/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

@kernel void ellipticAxHex3D(const dlong Nelements,
                             @restrict const dfloat*  ggeo,
                             @restrict const dfloat*  D,
                             @restrict const dfloat*  S,
                             const dfloat lambda,
                             @restrict const dfloat*  q,
                             @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major

        // load pencil of u into register
        const dlong base = i + j * p_Nq + e * p_Np;
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          r_q[k] = q[base + k * p_Nq * p_Nq]; // prefetch operation
          r_Aq[k] = 0.f; // zero the accumulator
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; k++) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // prefetch geometric factors
          const dlong gbase = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_q[j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0.f;
          dfloat qs = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            qr += s_D[i][m] * s_q[j][m];
            qs += s_D[j][m] * s_q[m][i];
          }

          s_Gqs[j][i] = (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_Gqr[j][i] = (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          // put this here for a performance bump
          r_Gqt = (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          r_Auk = r_GwJ * lambda * r_q[k];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            r_Auk   += s_D[m][j] * s_Gqs[m][i];
            r_Aq[m] += s_D[k][m] * r_Gqt;   // DT(m,k)*ut(i,j,k,e)
            r_Auk   += s_D[m][i] * s_Gqr[j][m];
          }

          r_Aq[k] += r_Auk;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id] = r_Aq[k];
        }
      }
    }
  }
}

@kernel void ellipticAxVarHex3D(const dlong Nelements,
                                const dlong offset,
                                @restrict const dfloat*  ggeo,
                                @restrict const dfloat*  D,
                                @restrict const dfloat*  S,
                                @restrict const dfloat*  lambda,
                                @restrict const dfloat*  q,
                                @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
    @exclusive dfloat r_lam0, r_lam1;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major

        // load pencil of u into register
        const dlong base = i + j * p_Nq + e * p_Np;
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          r_q[k] = q[base + k * p_Nq * p_Nq]; // prefetch operation
          r_Aq[k] = 0.f; // zero the accumulator
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; k++) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // prefetch geometric factors
          const dlong gbase = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];

          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          r_lam0 = lambda[id + 0 * offset];
          r_lam1 = lambda[id + 1 * offset];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_q[j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0.f;
          dfloat qs = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            qr += s_D[i][m] * s_q[j][m];
            qs += s_D[j][m] * s_q[m][i];
          }

          s_Gqr[j][i] = r_lam0 * (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);
          s_Gqs[j][i] = r_lam0 * (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          r_Gqt       = r_lam0 * (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);

          // put this here for a performance bump
          r_Auk      = r_lam1 * r_GwJ * r_q[k];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            r_Auk   += s_D[m][j] * s_Gqs[m][i];
            r_Aq[m] += s_D[k][m] * r_Gqt;   // DT(m,k)*ut(i,j,k,e)
            r_Auk   += s_D[m][i] * s_Gqr[j][m];
          }

          r_Aq[k] += r_Auk;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id] = r_Aq[k];
        }
      }
    }
  }
}

@kernel void ellipticPartialAxVarHex3D(const dlong Nelements,
                                       const dlong offset,
                                       @restrict const dlong*  elementList,
                                       @restrict const dfloat*  ggeo,
                                       @restrict const dfloat*  D,
                                       @restrict const dfloat*  S,
                                       @restrict const dfloat*  lambda,
                                       @restrict const dfloat*  q,
                                       @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dlong element;

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
    @exclusive dfloat r_lam0, r_lam1;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1))
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major
        element = elementList[e];
      }

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        // load pencil of u into register
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong base = i + j * p_Nq + element * p_Np;
          r_q[k] = q[base + k * p_Nq * p_Nq]; // prefetch operation
          r_Aq[k] = 0.f; // zero the accumulator
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; k++) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // prefetch geometric factors
          const dlong gbase = element * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];

          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          r_lam0 = lambda[id + 0 * offset];
          r_lam1 = lambda[id + 1 * offset];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_q[j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0.f;
          dfloat qs = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            qr += s_D[i][m] * s_q[j][m];
            qs += s_D[j][m] * s_q[m][i];
          }

          s_Gqs[j][i] = r_lam0 * (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_Gqr[j][i] = r_lam0 * (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          // put this here for a performance bump
          r_Gqt = r_lam0 * (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          r_Auk = r_lam1 * r_GwJ * r_q[k];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            r_Auk   += s_D[m][j] * s_Gqs[m][i];
            r_Aq[m] += s_D[k][m] * r_Gqt;   // DT(m,k)*ut(i,j,k,e)
            r_Auk   += s_D[m][i] * s_Gqr[j][m];
          }

          r_Aq[k] += r_Auk;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id] = r_Aq[k];
        }
      }
    }
  }
}

// default to element-per-threadblock
#define ellipticPartialAxHex3D_v0 ellipticPartialAxHex3D

@kernel void ellipticPartialAxHex3D_v0(const dlong Nelements,
                                       @restrict const dlong*  elementList,
                                       @restrict const dfloat*  ggeo,
                                       @restrict const dfloat*  D,
                                       @restrict const dfloat*  S,
                                       const dfloat lambda,
                                       @restrict const dfloat*  q,
                                       @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dlong element;

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1))
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major
        element = elementList[e];
      }

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        // load pencil of u into register
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong base = i + j * p_Nq + element * p_Np;
          r_q[k] = q[base + k * p_Nq * p_Nq]; // prefetch operation
          r_Aq[k] = 0.f; // zero the accumulator
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; k++) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // prefetch geometric factors
          const dlong gbase = element * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_q[j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0.f;
          dfloat qs = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            qr += s_D[i][m] * s_q[j][m];
            qs += s_D[j][m] * s_q[m][i];
          }

          s_Gqs[j][i] = (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_Gqr[j][i] = (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          // put this here for a performance bump
          r_Gqt = (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          r_Auk = r_GwJ * lambda * r_q[k];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            r_Auk   += s_D[m][j] * s_Gqs[m][i];
            r_Aq[m] += s_D[k][m] * r_Gqt;   // DT(m,k)*ut(i,j,k,e)
            r_Auk   += s_D[m][i] * s_Gqr[j][m];
          }

          r_Aq[k] += r_Auk;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id] = r_Aq[k];
        }
      }
    }
  }
}

#define ellipticPartialAxTrilinearHex3D_v1 ellipticPartialAxTrilinearHex3D
#define p_eighth ((dfloat)0.125)

@kernel void ellipticPartialAxTrilinearHex3D_v0(const dlong Nelements,
                                                @restrict const dlong*  elementList,
                                                @restrict const dfloat*  EXYZ,
                                                @restrict const dfloat*  gllzw,
                                                @restrict const dfloat*  D,
                                                @restrict const dfloat*  S,
                                                const dfloat lambda,
                                                @restrict const dfloat*  q,
                                                @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @shared dfloat s_gllwz[2][p_Nq];
    @shared dfloat s_EXYZ[p_dim][p_Nverts];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dlong element;

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    // array of threads
    for(int j = 0; j < p_Nq; ++j; @inner(1))
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major

        // load gll nodes and weight
        if(j < 2)
          s_gllwz[j][i] = gllzw[j * p_Nq + i];

        // load pencil of u into register
        element = elementList[e];
        const dlong base = i + j * p_Nq + element * p_Np;
        for(int k = 0; k < p_Nq; k++) {
          r_q[k] = q[base + k * p_Nq * p_Nq]; // prefetch operation
          r_Aq[k] = 0.f; // zero the accumulator
        }

        // load element vertex coordinates
        int n = i + j * p_Nq;
        while(n < p_Nverts * p_dim) {
          s_EXYZ[0][n] = EXYZ[element * p_Nverts * p_dim + n];
          n += p_Nq * p_Nq;
        }
      }

    @barrier("local");

    // Layer by layer
//    #pragma unroll p_Nq
    for(int k = 0; k < p_Nq; k++) {
      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dfloat rn = s_gllwz[0][i];
          const dfloat sn = s_gllwz[0][j];
          const dfloat tn = s_gllwz[0][k];

#define xe s_EXYZ[0]
#define ye s_EXYZ[1]
#define ze s_EXYZ[2]

          /* Jacobian matrix */
          const dfloat xr = p_eighth *
                            ( (1 - tn) * (1 - sn) * (xe[1] - xe[0]) + (1 - tn) * (1 + sn) *
                              (xe[2] - xe[3]) +
                              (1 + tn) * (1 - sn) * (xe[5] - xe[4]) + (1 + tn) * (1 + sn) *
                              (xe[6] - xe[7]) );
          const dfloat xs = p_eighth *
                            ( (1 - tn) * (1 - rn) * (xe[3] - xe[0]) + (1 - tn) * (1 + rn) *
                              (xe[2] - xe[1]) +
                              (1 + tn) * (1 - rn) * (xe[7] - xe[4]) + (1 + tn) * (1 + rn) *
                              (xe[6] - xe[5]) );
          const dfloat xt = p_eighth *
                            ( (1 - rn) * (1 - sn) * (xe[4] - xe[0]) + (1 + rn) * (1 - sn) *
                              (xe[5] - xe[1]) +
                              (1 + rn) * (1 + sn) * (xe[6] - xe[2]) + (1 - rn) * (1 + sn) *
                              (xe[7] - xe[3]) );

          const dfloat yr = p_eighth *
                            ( (1 - tn) * (1 - sn) * (ye[1] - ye[0]) + (1 - tn) * (1 + sn) *
                              (ye[2] - ye[3]) +
                              (1 + tn) * (1 - sn) * (ye[5] - ye[4]) + (1 + tn) * (1 + sn) *
                              (ye[6] - ye[7]) );
          const dfloat ys = p_eighth *
                            ( (1 - tn) * (1 - rn) * (ye[3] - ye[0]) + (1 - tn) * (1 + rn) *
                              (ye[2] - ye[1]) +
                              (1 + tn) * (1 - rn) * (ye[7] - ye[4]) + (1 + tn) * (1 + rn) *
                              (ye[6] - ye[5]) );
          const dfloat yt = p_eighth *
                            ( (1 - rn) * (1 - sn) * (ye[4] - ye[0]) + (1 + rn) * (1 - sn) *
                              (ye[5] - ye[1]) +
                              (1 + rn) * (1 + sn) * (ye[6] - ye[2]) + (1 - rn) * (1 + sn) *
                              (ye[7] - ye[3]) );

          const dfloat zr = p_eighth *
                            ( (1 - tn) * (1 - sn) * (ze[1] - ze[0]) + (1 - tn) * (1 + sn) *
                              (ze[2] - ze[3]) +
                              (1 + tn) * (1 - sn) * (ze[5] - ze[4]) + (1 + tn) * (1 + sn) *
                              (ze[6] - ze[7]) );
          const dfloat zs = p_eighth *
                            ( (1 - tn) * (1 - rn) * (ze[3] - ze[0]) + (1 - tn) * (1 + rn) *
                              (ze[2] - ze[1]) +
                              (1 + tn) * (1 - rn) * (ze[7] - ze[4]) + (1 + tn) * (1 + rn) *
                              (ze[6] - ze[5]) );
          const dfloat zt = p_eighth *
                            ( (1 - rn) * (1 - sn) * (ze[4] - ze[0]) + (1 + rn) * (1 - sn) *
                              (ze[5] - ze[1]) +
                              (1 + rn) * (1 + sn) * (ze[6] - ze[2]) + (1 - rn) * (1 + sn) *
                              (ze[7] - ze[3]) );

          /* compute geometric factors for affine coordinate transform*/
          const dfloat J = xr * (ys * zt - zs * yt) - yr * (xs * zt - zs * xt) + zr *
                           (xs * yt - ys * xt);

          // note delayed J scaling
          const dfloat rx =  (ys * zt - zs * yt), ry = -(xs * zt - zs * xt),
                       rz =  (xs * yt - ys * xt);
          const dfloat sx = -(yr * zt - zr * yt), sy =  (xr * zt - zr * xt),
                       sz = -(xr * yt - yr * xt);
          const dfloat tx =  (yr * zs - zr * ys), ty = -(xr * zs - zr * xs),
                       tz =  (xr * ys - yr * xs);

          const dfloat W  = s_gllwz[1][i] * s_gllwz[1][j] * s_gllwz[1][k];
          const dfloat sc = W / J;

          // W*J*(rx/J*rx/J) ..
          r_G00 = sc * (rx * rx + ry * ry + rz * rz);
          r_G01 = sc * (rx * sx + ry * sy + rz * sz);
          r_G02 = sc * (rx * tx + ry * ty + rz * tz);
          r_G11 = sc * (sx * sx + sy * sy + sz * sz);
          r_G12 = sc * (sx * tx + sy * ty + sz * tz);
          r_G22 = sc * (tx * tx + ty * ty + tz * tz);

          r_GwJ = W * J;
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_q[j][i] = r_q[k];

          r_qt = 0;

//            #pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++)
            r_qt += s_D[k][m] * r_q[m];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0.f;
          dfloat qs = 0.f;

//            #pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            qr += s_D[i][m] * s_q[j][m];
            qs += s_D[j][m] * s_q[m][i];
          }

          s_Gqs[j][i] = (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_Gqr[j][i] = (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          // put this here for a performance bump
          r_Gqt = (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          r_Auk = r_GwJ * lambda * r_q[k];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
//            #pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            r_Auk   += s_D[m][j] * s_Gqs[m][i];
            r_Aq[m] += s_D[k][m] * r_Gqt;   // DT(m,k)*ut(i,j,k,e)
            r_Auk   += s_D[m][i] * s_Gqr[j][m];
          }

          r_Aq[k] += r_Auk;
        }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1))
      for(int i = 0; i < p_Nq; ++i; @inner(0))
//        #pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id] = r_Aq[k];
        }
  }
}