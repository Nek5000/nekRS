c-----------------------------------------------------------------------
c    2D Double Shear layer with doubly periodic BCs.
c    This a test for the high-pass filtered relaxation-term forcing 
c    (hprtf) stabilization method. 
c    The test case used is from: 
c    https://doi.org/10.1016/S0764-4442(00)01763-8
c    with a reduced resolution to create a smaller test case.
c    Without over-integration the simulation is unstable.
c    The following stabilization parameters are used for the test case:
c    
c    The short test checks the total kinetic energy in the flow at the 
c    end of simulation as a quantitative test.
c    The simulation undergoes numerical instbility if no stabilization is used.
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)

      include 'SIZE'
      include 'NEKUSE'
      include 'PARALLEL'

      integer ie,ix,iy,iz,ieg

      ie     = gllel(ieg)

      ffx = 0.
      ffy = 0.
      ffz = 0.         

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk

      include 'SIZE'
      include 'SOLN'
      include 'INPUT'
      include 'TSTEP'
      
      real vort,w1,w2

      integer lt,nt
      parameter (lt=lx1*ly1*lz1*lelv)
      common /scrns/ vort(lt,3), w1(lt), w2(lt)

      real en, enx, eny
      real gl2norm

      ifto =.true.

      call comp_vort3(vort,w1,w2,vx,vy,vz)
      call copy(T,vort,lt)

      nt=nx1*ny1*nz1*nelv

      if (istep.eq.nsteps.or.lastep.eq.1) then
        enx = gl2norm(vx,nt)
        eny = gl2norm(vy,nt)
        en = enx**2 + eny**2    
        if (nid.eq.0) write(6,*) 'L2 norm: ', en
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)

      include 'SIZE'
      include 'NEKUSE'

      integer ix,iy,iz,iside,ieg

      ux=0.0
      uy=0.0
      uz=0.0

      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

      include 'SIZE'
      include 'NEKUSE'
      include 'SOLN'

      integer ix,iy,iz,ieg

      real pi
      real one

      one = 1.0

      pi = 4.*atan(one)
      
      if (y.le.0.5) then
          ux = tanh(30.*(y-0.25))
      else
          ux = tanh(30.*(0.75-y))
      endif

      uy = 0.05*sin(2.*pi*x)
      uz = 0.0

      temp = ux

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices

      include 'SIZE'      

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2   ! This routine to modify mesh coordinates

      include 'SIZE'
      include 'TOTAL'
      logical ifaln,ifnorx,ifnory,ifnorz
      do iel=1,nelt
      do ifc=5,6
         cbc(ifc,iel,1) = 'P  ' ! required for kludge (see below)
      enddo
      enddo


      do iel=1,nelt
      do ifc=1,2*ndim
         call chknord(ifaln,ifnorx,ifnory,ifnorz,ifc,iel)
         if (cbc(ifc,iel,1) .eq. 'v  ' .and. ifnorx) then 
           boundaryID(ifc,iel) = 1
         endif
         if (cbc(ifc,iel,1) .eq. 'v  ') cbc(ifc,iel,2) = 't  ' 
         if (cbc(ifc,iel,1) .eq. 'P  ') cbc(ifc,iel,2) = 'P  ' 
      enddo
      enddo

      return
      end

c-----------------------------------------------------------------------
      subroutine usrdat3

      return
      end
c-----------------------------------------------------------------------
      subroutine usrsetvert(glo_num,nel,nx,ny,nz) ! to modify glo_num
            integer*8 glo_num(1)

      include 'SIZE'

      ! kludge for periodic bc in z
      nxy  = nx*ny
      nxyz = nx*ny*nz
      do iel = 1,nel
         ioff = nxyz*(iel-1)
         do ixy = 1,nxy
            glo_num(ioff + nxy*(nz-1) + ixy) = glo_num(ioff + ixy)
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
