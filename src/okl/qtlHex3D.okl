/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/




  ins->qtlKernel(
       mesh->Nelements,
       mesh->o_vgeo
       mesh->o_Dmatrices
       cds->o_S,
       cds->o_diff,
       cds->o_rho,
       o_src;
       o_qtl);

// QTL : = 1/(rho*cp*q) * (div[k*grad[q] ] + qvol)
@kernel void qtlHex3D(const dlong Nelements,
                      @restrict const  dfloat *  vgeo,
		      @restrict const  dfloat *  D,
		      @restrict const  dfloat *  q,
		      @restrict const  dfloat *  COND,
		      @restrict const  dfloat *  RHOCP,
		      @restrict const  dfloat *  SRC,
		      @restrict dfloat *  QTL){


  for(dlong e=0;e<Nelements;e++;@outer(0)){  
    //  
    @shared dfloat s_q[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_qx[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_qy[p_Nq][p_Nq][p_Nq];
    // reuse shared memory
#define s_qz s_q    

    @shared dfloat s_D[p_Nq][p_Nq];

    // AK: too much register ??
    @exclusive dfloat r_drdx, r_drdy, r_drdz;
    @exclusive dfloat r_dsdx, r_dsdy, r_dsdz;
    @exclusive dfloat r_dtdx, r_dtdy, r_dtdz;
    @exclusive dfloat r_dqdx, r_dqdy, r_dqdz; 

    for(int k=0;k<p_Nq;++k;@inner(2)){ 
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
        for(int i=0;i<p_Nq;++i;@inner(0)){    
          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq+i;
          // Initialize register
          r_drdx = 0.f; r_drdy = 0.f; r_drdz = 0.f; 
          r_dsdx = 0.f; r_dsdy = 0.f; r_dsdz = 0.f; 
          r_dtdx = 0.f; r_dtdy = 0.f; r_dtdz = 0.f; 
          r_dqdx = 0.f; r_dqdy = 0.f; r_dqdz = 0.f; 

          s_q[k][j][i]  = q[id];
     
          if (k==0)
            s_D[j][i] = D[j*p_Nq+i]; // column major
        }
      }
    }

    @barrier("local");

    for(int k=0;k<p_Nq;++k;@inner(2)){ 
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
        for(int i=0;i<p_Nq;++i;@inner(0)){  

          const dlong gid = e*p_Np*p_Nvgeo +k*p_Nq*p_Nq +j*p_Nq +i;

          const dlong id  = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          const dfloat con = COND[id];
 
          r_drdx = vgeo[gid + p_RXID*p_Np];
          r_drdy = vgeo[gid + p_RYID*p_Np];
          r_drdz = vgeo[gid + p_RZID*p_Np];
          r_dsdx = vgeo[gid + p_SXID*p_Np];
          r_dsdy = vgeo[gid + p_SYID*p_Np];
          r_dsdz = vgeo[gid + p_SZID*p_Np];
          r_dtdx = vgeo[gid + p_TXID*p_Np];
          r_dtdy = vgeo[gid + p_TYID*p_Np];
          r_dtdz = vgeo[gid + p_TZID*p_Np];
          // compute derivatives 
          dfloat dqdr  = 0.f, dqds  = 0.f, dqdt  = 0.f;
#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n){
	    dqdr += s_D[i][n]*s_q[k][j][n];
	    dqds += s_D[j][n]*s_q[k][n][i];
	    dqdt += s_D[k][n]*s_q[n][j][i];
	  }

          r_dqdx = con*(r_drdx*dqdr + r_dsdx*dqds + r_dtdx*dqdt);
          r_dqdy = con*(r_drdy*dqdr + r_dsdy*dqds + r_dtdy*dqdt);
          r_dqdz = con*(r_drdz*dqdr + r_dsdz*dqds + r_dtdz*dqdt);

        }
      }
    }

    @barrier("local");

    // fill shared
    for(int k=0;k<p_Nq;++k;@inner(2)){ 
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
        for(int i=0;i<p_Nq;++i;@inner(0)){  
          // store covariant
          s_qx[k][j][i] = (r_drdx*r_dqdx + r_drdy*r_dqdy+r_drdz*r_dqdz); 
          s_qy[k][j][i] = (r_dsdx*r_dqdx + r_dsdy*r_dqdy+r_dsdz*r_dqdz); 
          s_qz[k][j][i] = (r_dtdx*r_dqdx + r_dtdy*r_dqdy+r_dtdz*r_dqdz); 
        }
      }
    }

    @barrier("local");

    for(int k=0;k<p_Nq;++k;@inner(2)){ 
      for(int j=0;j<p_Nq;++j;@inner(1)){ 
        for(int i=0;i<p_Nq;++i;@inner(0)){   
	  const dlong id  = e*p_Np+k*p_Nq*p_Nq + j*p_Nq + i;        
          const dfloat iRhoCpT = 1/(RHOCP[id]*q[id]); 
          const dfloat qvol = SRC[id];
          dfloat div  = 0.f; 
          #pragma unroll p_Nq
          for(int n=0;n<p_Nq;++n){
       	    div += s_D[i][n]*s_qx[k][j][n];
       	    div += s_D[j][n]*s_qy[k][n][i];
       	    div += s_D[k][n]*s_qz[n][j][i];
       	  }       
          QTL[id] = iRhoCpTdiv*(div + qvol);     
        }
      }
    } 
  }
}
