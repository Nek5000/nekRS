/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */
inline dfloat computeMinGLLGridSpacing(const dlong i,
                                       const dlong j,
                                       const dlong k,
                                       const dlong e,
                                       @ restrict const dfloat *x,
                                       @ restrict const dfloat *y,
                                       @ restrict const dfloat *z)
{
  const dlong index = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
  const dfloat x_curr = x[index];
  const dfloat y_curr = y[index];
  const dfloat z_curr = z[index];
  dfloat he = 1e8;

  // (i+1, j, k)
  if (i < p_Nq - 1) {
    const dlong iid = i + 1;
    const dlong jid = j;
    const dlong kid = k;
    const dlong id = e * p_Np + kid * p_Nq * p_Nq + jid * p_Nq + iid;
    const dfloat dx = x[id] - x_curr;
    const dfloat dy = y[id] - y_curr;
    const dfloat dz = z[id] - z_curr;
    const dfloat dist = dx * dx + dy * dy + dz * dz;
    he = (he < dist) ? he : dist;
  }
  // (i-1, j, k)
  if (i > 0) {
    const dlong iid = i - 1;
    const dlong jid = j;
    const dlong kid = k;
    const dlong id = e * p_Np + kid * p_Nq * p_Nq + jid * p_Nq + iid;
    const dfloat dx = x[id] - x_curr;
    const dfloat dy = y[id] - y_curr;
    const dfloat dz = z[id] - z_curr;
    const dfloat dist = dx * dx + dy * dy + dz * dz;
    he = (he < dist) ? he : dist;
  }

  // (i, j+1, k)
  if (j < p_Nq - 1) {
    const dlong iid = i;
    const dlong jid = j + 1;
    const dlong kid = k;
    const dlong id = e * p_Np + kid * p_Nq * p_Nq + jid * p_Nq + iid;
    const dfloat dx = x[id] - x_curr;
    const dfloat dy = y[id] - y_curr;
    const dfloat dz = z[id] - z_curr;
    const dfloat dist = dx * dx + dy * dy + dz * dz;
    he = (he < dist) ? he : dist;
  }
  // (i, j-1, k)
  if (j > 0) {
    const dlong iid = i;
    const dlong jid = j - 1;
    const dlong kid = k;
    const dlong id = e * p_Np + kid * p_Nq * p_Nq + jid * p_Nq + iid;
    const dfloat dx = x[id] - x_curr;
    const dfloat dy = y[id] - y_curr;
    const dfloat dz = z[id] - z_curr;
    const dfloat dist = dx * dx + dy * dy + dz * dz;
    he = (he < dist) ? he : dist;
  }

  // (i, j, k+1)
  if (k < p_Nq - 1) {
    const dlong iid = i;
    const dlong jid = j;
    const dlong kid = k + 1;
    const dlong id = e * p_Np + kid * p_Nq * p_Nq + jid * p_Nq + iid;
    const dfloat dx = x[id] - x_curr;
    const dfloat dy = y[id] - y_curr;
    const dfloat dz = z[id] - z_curr;
    const dfloat dist = dx * dx + dy * dy + dz * dz;
    he = (he < dist) ? he : dist;
  }
  // (i, j, k-1)
  if (k > 0) {
    const dlong iid = i;
    const dlong jid = j;
    const dlong kid = k - 1;
    const dlong id = e * p_Np + kid * p_Nq * p_Nq + jid * p_Nq + iid;
    const dfloat dx = x[id] - x_curr;
    const dfloat dy = y[id] - y_curr;
    const dfloat dz = z[id] - z_curr;
    const dfloat dist = dx * dx + dy * dy + dz * dz;
    he = (he < dist) ? he : dist;
  }

  return sqrt(he);
}
inline dfloat nu_k(const dfloat s, const dfloat logReferenceSensor, const dfloat ramp)
{
  dfloat multiplier = 0.0;
  if (s < (logReferenceSensor - ramp)) {
    multiplier = 0.0;
  }
  else if (s > (logReferenceSensor + ramp)) {
    multiplier = 1.0;
  }
  else {
    multiplier = 0.5 * (1.0 + sin((M_PI * (s - logReferenceSensor)) / (2.0 * ramp)));
  }
  return multiplier;
}

@kernel void computeMaxVisc(const dlong Nelements,
                            const dlong fieldOffset,
                            const dfloat logReferenceSensor,
                            const dfloat rampParameter,
                            const dfloat visCoeff,
                            const dfloat scalingCoeff,
                            const dfloat Uinf,
                            const bool useHPFResidual,
                            @ restrict const dfloat *x,
                            @ restrict const dfloat *y,
                            @ restrict const dfloat *z,
                            @ restrict const dfloat *U,
                            @ restrict const dfloat *hpfResidual,
                            @ restrict const dfloat *logRelativeMassHighestMode,
                            @ restrict dfloat *epsilons)
{
  for (dlong e = 0; e < Nelements; ++e; @outer(0)) { // for all elements

    @exclusive dfloat logSensor;

    @shared dfloat s_maxdFdS[p_blockSize];

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        logSensor = logRelativeMassHighestMode[e];
        for (int k = j * p_Nq + i; k < p_blockSize; k += p_Nq * p_Nq) {
          s_maxdFdS[k] = -1e8;
        }
      }
    }

    @barrier();
    for (int k = 0; k < p_Nq; ++k) {
      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          const dlong tid = j * p_Nq + i;
          const dfloat Ux = U[id + 0 * fieldOffset];
          const dfloat Uy = U[id + 1 * fieldOffset];
          const dfloat Uz = U[id + 2 * fieldOffset];
          const dfloat he = computeMinGLLGridSpacing(i, j, k, e, x, y, z);
          const dfloat Umag = sqrt(Ux * Ux + Uy * Uy + Uz * Uz);
          dfloat visc_max = visCoeff * he * Umag;

          if (useHPFResidual) {
            const dfloat errorTerm = scalingCoeff * he * he * abs(hpfResidual[id]) * Uinf;
            visc_max = (visc_max < errorTerm) ? visc_max : errorTerm;
          }

          // s_maxdFdS = max(s_maxdFdS, visc_max)
          s_maxdFdS[tid] = (s_maxdFdS[tid] > visc_max) ? s_maxdFdS[tid] : visc_max;
        }
      }
      @barrier();
    }

    // max reduction
    @barrier();

// reduce p_Nq * p_Nq to single value
#if p_blockSize > 512
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 512) {
          s_maxdFdS[t] = (s_maxdFdS[t] > s_maxdFdS[t + 512]) ? s_maxdFdS[t] : s_maxdFdS[t + 512];
        }
      }
    }
    @barrier();
#endif
#if p_blockSize > 256
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 256) {
          s_maxdFdS[t] = (s_maxdFdS[t] > s_maxdFdS[t + 256]) ? s_maxdFdS[t] : s_maxdFdS[t + 256];
        }
      }
    }
    @barrier();
#endif
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 128) {
          s_maxdFdS[t] = (s_maxdFdS[t] > s_maxdFdS[t + 128]) ? s_maxdFdS[t] : s_maxdFdS[t + 128];
        }
      }
    }
    @barrier();
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 64) {
          s_maxdFdS[t] = (s_maxdFdS[t] > s_maxdFdS[t + 64]) ? s_maxdFdS[t] : s_maxdFdS[t + 64];
        }
      }
    }
    @barrier();
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 32) {
          s_maxdFdS[t] = (s_maxdFdS[t] > s_maxdFdS[t + 32]) ? s_maxdFdS[t] : s_maxdFdS[t + 32];
        }
      }
    }
    @barrier();
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 16) {
          s_maxdFdS[t] = (s_maxdFdS[t] > s_maxdFdS[t + 16]) ? s_maxdFdS[t] : s_maxdFdS[t + 16];
        }
      }
    }
    @barrier();
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 8) {
          s_maxdFdS[t] = (s_maxdFdS[t] > s_maxdFdS[t + 8]) ? s_maxdFdS[t] : s_maxdFdS[t + 8];
        }
      }
    }
    @barrier();
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 4) {
          s_maxdFdS[t] = (s_maxdFdS[t] > s_maxdFdS[t + 4]) ? s_maxdFdS[t] : s_maxdFdS[t + 4];
        }
      }
    }
    @barrier();
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 2) {
          s_maxdFdS[t] = (s_maxdFdS[t] > s_maxdFdS[t + 2]) ? s_maxdFdS[t] : s_maxdFdS[t + 2];
        }
      }
    }
    @barrier();
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int t = j * p_Nq + i;
        if (t < 1) {
          const dfloat maxVisc = (s_maxdFdS[0] > s_maxdFdS[1]) ? s_maxdFdS[0] : s_maxdFdS[1];
          dfloat avm = 0.0;
          if (useHPFResidual) {
            avm = maxVisc;
          }
          else {
            const dfloat multiplier = nu_k(logSensor, logReferenceSensor, rampParameter);
            if (multiplier > 0.0) {
              avm = multiplier * maxVisc;
            }
          }

#pragma unroll
          for (int point = 0; point < p_Np; ++point)
            epsilons[e * p_Np + point] = avm;
        }
      }
    }
  }
}
