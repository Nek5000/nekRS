/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

@kernel void strongAdvectionVolumeHex3D(const dlong Nelements,
                                           @restrict const dfloat*  D,
                                           const dlong voffset,
                                           const dlong soffset,
                                           @restrict const dfloat*  S,
                                           @restrict const dfloat* Urst,
                                           @restrict const dfloat*  RHO,
                                           @restrict dfloat*  NS)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_S[p_Nq][p_Nq];
    @exclusive dfloat s_Sloc[p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];

    #pragma unroll p_Nq
    for(int k = 0; k < p_Nq; ++k){
      for(int j = 0; j < p_Nq; ++j; @inner(1)){
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dlong id = i + j * p_Nq;
          if(k == 0)
            s_D[0][id] = D[id];

          id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          const dfloat Sn = S[id + soffset];
          s_S[j][i] = Sn;
          if(k == 0){
            #pragma unroll p_Nq
            for(int l = 0 ; l < p_Nq; ++l){
              const dlong offset = e * p_Np + l * p_Nq * p_Nq + j * p_Nq + i + soffset;
              s_Sloc[l] = S[offset];
            }
          }
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong gid = e * p_Np * p_Nvgeo + k * p_Nq * p_Nq + j * p_Nq + i;
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          dfloat dSdr = 0, dSds = 0, dSdt = 0;

#pragma unroll p_Nq
          for (int n = 0; n < p_Nq; n++) {
            const dfloat Dr = s_D[i][n];
            const dfloat Ds = s_D[j][n];
            const dfloat Dt = s_D[k][n];
            dSdr += Dr * s_S[j][n];
            dSds += Ds * s_S[n][i];
            dSdt += Dt * s_Sloc[n];
          }

          const dfloat Uhat = Urst[id + 0 * voffset];
          const dfloat Vhat = Urst[id + 1 * voffset];
          const dfloat What = Urst[id + 2 * voffset];

          const dfloat rhoM = RHO[id + soffset];

          NS[id] =  rhoM * (Uhat * dSdr + Vhat * dSds + What * dSdt);
        }
      }
    }
  }
}

@kernel void strongAdvectionCubatureVolumeHex3D(const dlong Nelements,
                                                   @restrict const dfloat*  vgeo,
                                                   @restrict const dfloat*  cubD,
                                                   @restrict const dfloat*  cubInterpT,
                                                   @restrict const dfloat*  cubProjectT,
                                                   const dlong voffset,
                                                   const dlong soffset,
                                                   const dlong cubatureOffset,
                                                   @restrict const dfloat*  S,
                                                   @restrict const dfloat*  Urst,
                                                   @restrict const dfloat*  RHO,
                                                   @restrict dfloat*  NS)
{
  // (phi, U.grad Ud)
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_cubD[p_cubNq][p_cubNq];
    @shared dfloat s_cubInterpT[p_Nq][p_cubNq];
    @shared dfloat s_cubProjectT[p_cubNq][p_Nq];

    @shared dfloat s_S[p_cubNq][p_cubNq];

    @shared dfloat s_S1[p_cubNq][p_cubNq];

    @exclusive dfloat r_S[p_cubNq], r_Sd[p_cubNq];

    for(int j = 0; j < p_cubNq; ++j; @inner(1)) {
      for(int i = 0; i < p_cubNq; ++i; @inner(0)) {
        const int id = i + j * p_cubNq;
        if (id < p_Nq * p_cubNq) {
          s_cubInterpT[0][id] = cubInterpT[id];
          s_cubProjectT[0][id] = cubProjectT[id];
        }

        s_cubD[0][id] = cubD[id];

#pragma unroll p_cubNq
        for(int k = 0; k < p_cubNq; ++k) {
          r_S[k] = 0.f;
          r_Sd[k] = 0.f;
        }
      }
    }

    for(int c = 0; c < p_Nq; ++c) {
      @barrier("local");

      for(int b = 0; b < p_cubNq; ++b; @inner(1))
        for(int a = 0; a < p_cubNq; ++a; @inner(0))
          if(a < p_Nq && b < p_Nq) {
            // this can be improved
            const dlong id = e * p_Np + c * p_Nq * p_Nq + b * p_Nq + a;
            // U.grad U
            s_S[b][a] = S[id + soffset];
          }

      @barrier("local");

      // interpolate in 'r'
      for(int b = 0; b < p_cubNq; ++b; @inner(1))
        for(int i = 0; i < p_cubNq; ++i; @inner(0))
          if(b < p_Nq) {
            dfloat U1  = 0, V1 = 0,  W1 = 0, S1 = 0;
            for(int a = 0; a < p_Nq; ++a) {
              dfloat Iia = s_cubInterpT[a][i];
              S1  += Iia * s_S[b][a];
            }

            s_S1[b][i] = S1;
          }

      @barrier("local");

      // interpolate in 's'
      for(int j = 0; j < p_cubNq; ++j; @inner(1)) {
        for(int i = 0; i < p_cubNq; ++i; @inner(0)) {
          dfloat U2 = 0, V2 = 0,  W2 = 0, S2 = 0;
          // interpolate in b
          for(int b = 0; b < p_Nq; ++b) {
            dfloat Ijb = s_cubInterpT[b][j];
            S2 += Ijb * s_S1[b][i];
          }

          // interpolate in c progressively
#pragma unroll p_cubNq
          for(int k = 0; k < p_cubNq; ++k) {
            dfloat Ikc = s_cubInterpT[c][k];
            r_S[k] += Ikc * S2;
          }

#pragma unroll p_cubNq
          for(int k = 0; k < p_cubNq; ++k)
            r_Sd[k] = r_S[k];
        }
      }
    }

#pragma unroll p_cubNq
    for(int k = 0; k < p_cubNq; ++k) {
      @barrier("local");

      for(int j = 0; j < p_cubNq; ++j; @inner(1))
        for(int i = 0; i < p_cubNq; ++i; @inner(0))
          s_S1[j][i] = r_Sd[k];

      @barrier("local");

      for(int j = 0; j < p_cubNq; ++j; @inner(1)) {
        for(int i = 0; i < p_cubNq; ++i; @inner(0)) {
          dfloat Sdr = 0, Sds = 0, Sdt = 0;

#pragma unroll p_cubNq
          for(int n = 0; n < p_cubNq; ++n) {
            dfloat Din = s_cubD[i][n];
            dfloat Djn = s_cubD[j][n];
            dfloat Dkn = s_cubD[k][n];
            //
            Sdr += Din * s_S1[j][n];
            Sds += Djn * s_S1[n][i];
            Sdt += Dkn * r_Sd[n];
          }

          const dlong id = e * p_cubNp + k * p_cubNq * p_cubNq + j * p_cubNq + i;
          const dfloat Uhat = Urst[id + 0 * cubatureOffset];
          const dfloat Vhat = Urst[id + 1 * cubatureOffset];
          const dfloat What = Urst[id + 2 * cubatureOffset];

          // I_f^t*(J_f*C_f^t)*G_f*\hat{D}_f*I_f*u
          r_S[k] = Uhat * Sdr + Vhat * Sds + What * Sdt;
        }
      }
    }

    // now project back in t
    for(int c = 0; c < p_Nq; ++c) {
      @barrier("local");

      for(int j = 0; j < p_cubNq; ++j; @inner(1)) {
        for(int i = 0; i < p_cubNq; ++i; @inner(0)) {
          dfloat rhsS = 0;

#pragma unroll p_cubNq
          for(int k = 0; k < p_cubNq; ++k) {
            dfloat Ikc = s_cubInterpT[c][k];
            rhsS += Ikc * r_S[k];
          }

          s_S[j][i] = rhsS;
        }
      }

      @barrier("local");

      for(int b = 0; b < p_cubNq; ++b; @inner(1))
        for(int i = 0; i < p_cubNq; ++i; @inner(0))
          if(b < p_Nq) {
            dfloat rhsS = 0;

            for(int j = 0; j < p_cubNq; ++j) {
              dfloat Ijb = s_cubInterpT[b][j];
              rhsS += Ijb * s_S[j][i];
            }

            s_S1[b][i] = rhsS;
          }

      @barrier("local");

      for(int b = 0; b < p_cubNq; ++b; @inner(1))
        for(int a = 0; a < p_cubNq; ++a; @inner(0))
          if(a < p_Nq && b < p_Nq) {
            dfloat rhsS = 0;

            for(int i = 0; i < p_cubNq; ++i) {
              dfloat Iia = s_cubInterpT[a][i];
              rhsS += Iia * s_S1[b][i];
            }
            const dlong gid = e * p_Np * p_Nvgeo + c * p_Nq * p_Nq + b * p_Nq + a;
            const dlong id = e * p_Np + c * p_Nq * p_Nq + b * p_Nq + a;

            const dfloat IJW   = vgeo[gid + p_IJWID * p_Np];
            const dfloat rhoM = RHO[id + soffset];

            NS[id] = rhoM * IJW * rhsS;
          }

    }
  }
}
