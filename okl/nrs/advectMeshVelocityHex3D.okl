/*
   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

@kernel void advectMeshVelocityHex3D(const dlong Nelements,
                                      @restrict const dfloat*  vgeo,
                                      @restrict const dfloat*  D,
                                      const dlong offset,
                                      @restrict const dfloat* W,
                                      @restrict const dfloat*  U,
                                      @restrict dfloat*  divUW)
{
  for(dlong e = 0; e < Nelements; e++; @outer(0)) { // for all elements

    @shared dfloat s_UWx[p_Nq][p_Nq];
    @shared dfloat s_UWy[p_Nq][p_Nq];
    @shared dfloat s_UWz[p_Nq][p_Nq];

    @shared dfloat s_VWx[p_Nq][p_Nq];
    @shared dfloat s_VWy[p_Nq][p_Nq];
    @shared dfloat s_VWz[p_Nq][p_Nq];

    @shared dfloat s_WWx[p_Nq][p_Nq];
    @shared dfloat s_WWy[p_Nq][p_Nq];
    @shared dfloat s_WWz[p_Nq][p_Nq];

    @shared dfloat s_D[p_Nq][p_Nq];

    @exclusive dfloat r_UWx[p_Nq];
    @exclusive dfloat r_UWy[p_Nq];
    @exclusive dfloat r_UWz[p_Nq];

    @exclusive dfloat r_VWx[p_Nq];
    @exclusive dfloat r_VWy[p_Nq];
    @exclusive dfloat r_VWz[p_Nq];

    @exclusive dfloat r_WWx[p_Nq];
    @exclusive dfloat r_WWy[p_Nq];
    @exclusive dfloat r_WWz[p_Nq];

    #pragma unroll
    for(int k = 0; k < p_Nq; ++k){
      
      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)){
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {

          {
            const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
            const dfloat Un = U[id + 0 * offset];
            const dfloat Vn = U[id + 1 * offset];
            const dfloat Wn = U[id + 2 * offset];
            const dfloat Wx = W[id + 0 * offset];
            const dfloat Wy = W[id + 1 * offset];
            const dfloat Wz = W[id + 2 * offset];

            s_UWx[j][i] = Un * Wx;
            s_UWy[j][i] = Un * Wy;
            s_UWz[j][i] = Un * Wz;

            s_VWx[j][i] = Vn * Wx;
            s_VWy[j][i] = Vn * Wy;
            s_VWz[j][i] = Vn * Wz;

            s_WWx[j][i] = Wn * Wx;
            s_WWy[j][i] = Wn * Wy;
            s_WWz[j][i] = Wn * Wz;
          }

          if (k == 0){
            s_D[j][i] = D[j * p_Nq + i];
#pragma unroll
            for(int l = 0 ; l < p_Nq; ++l){

              {
                const dlong id = e * p_Np + l * p_Nq * p_Nq + j * p_Nq + i;
                const dfloat Un = U[id + 0 * offset];
                const dfloat Vn = U[id + 1 * offset];
                const dfloat Wn = U[id + 2 * offset];
                const dfloat Wx = W[id + 0 * offset];
                const dfloat Wy = W[id + 1 * offset];
                const dfloat Wz = W[id + 2 * offset];

                r_UWx[l] = Un * Wx;
                r_UWy[l] = Un * Wy;
                r_UWz[l] = Un * Wz;

                r_VWx[l] = Vn * Wx;
                r_VWy[l] = Vn * Wy;
                r_VWz[l] = Vn * Wz;

                r_WWx[l] = Wn * Wx;
                r_WWy[l] = Wn * Wy;
                r_WWz[l] = Wn * Wz;
              }

            }
          }
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong gid = e * p_Np * p_Nvgeo + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat drdx = vgeo[gid + p_RXID * p_Np];
          const dfloat drdy = vgeo[gid + p_RYID * p_Np];
          const dfloat drdz = vgeo[gid + p_RZID * p_Np];
          const dfloat dsdx = vgeo[gid + p_SXID * p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID * p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID * p_Np];
          const dfloat dtdx = vgeo[gid + p_TXID * p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID * p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID * p_Np];

          dfloat d_uwx_dr  = 0.f, d_uwx_ds  = 0.f, d_uwx_dt  = 0.f;
          dfloat d_uwy_dr  = 0.f, d_uwy_ds  = 0.f, d_uwy_dt  = 0.f;
          dfloat d_uwz_dr  = 0.f, d_uwz_ds  = 0.f, d_uwz_dt  = 0.f;

          dfloat d_vwx_dr  = 0.f, d_vwx_ds  = 0.f, d_vwx_dt  = 0.f;
          dfloat d_vwy_dr  = 0.f, d_vwy_ds  = 0.f, d_vwy_dt  = 0.f;
          dfloat d_vwz_dr  = 0.f, d_vwz_ds  = 0.f, d_vwz_dt  = 0.f;

          dfloat d_wwx_dr  = 0.f, d_wwx_ds  = 0.f, d_wwx_dt  = 0.f;
          dfloat d_wwy_dr  = 0.f, d_wwy_ds  = 0.f, d_wwy_dt  = 0.f;
          dfloat d_wwz_dr  = 0.f, d_wwz_ds  = 0.f, d_wwz_dt  = 0.f;

#pragma unroll p_Nq
          for(int n = 0; n < p_Nq; ++n) {
            const dfloat Dr = s_D[i][n];
            const dfloat Ds = s_D[j][n];
            const dfloat Dt = s_D[k][n];

            // uw terms
            d_uwx_dr += Dr * s_UWx[j][n];
            d_uwx_ds += Ds * s_UWx[n][i];
            d_uwx_dt += Dt * r_UWx[n];

            d_uwy_dr += Dr * s_UWy[j][n];
            d_uwy_ds += Ds * s_UWy[n][i];
            d_uwy_dt += Dt * r_UWy[n];

            d_uwz_dr += Dr * s_UWz[j][n];
            d_uwz_ds += Ds * s_UWz[n][i];
            d_uwz_dt += Dt * r_UWz[n];

            // vw terms
            d_vwx_dr += Dr * s_VWx[j][n];
            d_vwx_ds += Ds * s_VWx[n][i];
            d_vwx_dt += Dt * r_VWx[n];

            d_vwy_dr += Dr * s_VWy[j][n];
            d_vwy_ds += Ds * s_VWy[n][i];
            d_vwy_dt += Dt * r_VWy[n];

            d_vwz_dr += Dr * s_VWz[j][n];
            d_vwz_ds += Ds * s_VWz[n][i];
            d_vwz_dt += Dt * r_VWz[n];

            // ww terms
            d_wwx_dr += Dr * s_WWx[j][n];
            d_wwx_ds += Ds * s_WWx[n][i];
            d_wwx_dt += Dt * r_WWx[n];

            d_wwy_dr += Dr * s_WWy[j][n];
            d_wwy_ds += Ds * s_WWy[n][i];
            d_wwy_dt += Dt * r_WWy[n];

            d_wwz_dr += Dr * s_WWz[j][n];
            d_wwz_ds += Ds * s_WWz[n][i];
            d_wwz_dt += Dt * r_WWz[n];
          }

          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          divUW[id + 0 * offset]  += ((drdx * d_uwx_dr + dsdx * d_uwx_ds + dtdx * d_uwx_dt);
                                  +   (drdy * d_uwy_dr + dsdy * d_uwy_ds + dtdy * d_uwy_dt);
                                  +   (drdz * d_uwz_dr + dsdz * d_uwz_ds + dtdz * d_uwz_dt));

          divUW[id + 1 * offset]  += ((drdx * d_vwx_dr + dsdx * d_vwx_ds + dtdx * d_vwx_dt);
                                  +   (drdy * d_vwy_dr + dsdy * d_vwy_ds + dtdy * d_vwy_dt);
                                  +   (drdz * d_vwz_dr + dsdz * d_vwz_ds + dtdz * d_vwz_dt));

          divUW[id + 2 * offset]  += ((drdx * d_wwx_dr + dsdx * d_wwx_ds + dtdx * d_wwx_dt);
                                  +   (drdy * d_wwy_dr + dsdy * d_wwy_ds + dtdy * d_wwy_dt);
                                  +   (drdz * d_wwz_dr + dsdz * d_wwz_ds + dtdz * d_wwz_dt));
        }
      }
    }
  }
}