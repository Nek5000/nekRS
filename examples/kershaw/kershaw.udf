#include <math.h>
#include "udf.hpp"

/* UDF Functions */                                                      

void UDF_LoadKernels(nrs_t *nrs)
{
}

void UDF_Setup(nrs_t *nrs)
{
  platform->options.setArgs("LINEAR SOLVER STOPPING CRITERION", "RELATIVE");

  //platform->options.setArgs("MAXIMUM ITERATIONS", "500");
  //platform->options.setArgs("FIXED ITERATION COUNT", "TRUE");
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  mesh_t* mesh = nrs->meshV;

  for (int i = 0; i < mesh->Nlocal; i++) {
    const dfloat lambda = 0; 
    platform->mempool.slice0[i] = //drand48(); 
      (3*M_PI*M_PI+lambda)*sin(M_PI*mesh->x[i])*sin(M_PI*mesh->y[i])*sin(M_PI*mesh->z[i]);
  }
  platform->linAlg->fillKernel(mesh->Nlocal, 1.0, nrs->o_ellipticCoeff);

  // warm-up
  ellipticSolve(nrs->pSolver, platform->o_mempool.slice0, nrs->o_P);

  platform->timer.reset();
  const int Nrep = 10; 
  if(platform->comm.mpiRank == 0) printf("solving "); 
  for (int i = 0; i < Nrep; i++) { 
    platform->linAlg->fillKernel(mesh->Nlocal, 0.0, nrs->o_P);
    platform->o_mempool.slice0.copyFrom(platform->mempool.slice0, mesh->Nlocal * sizeof(dfloat));

    platform->timer.tic("pressureSolve", 1);
    ellipticSolve(nrs->pSolver, platform->o_mempool.slice0, nrs->o_P);
    platform->timer.toc("pressureSolve");
    
    if(platform->comm.mpiRank == 0) {
      printf(".");
      fflush(stdout); 
    }
  }
  if(platform->comm.mpiRank == 0) printf("\n"); 

  hlong Ntotal = mesh->Nelements * (mesh->N * mesh->N * mesh->N);
  MPI_Allreduce(MPI_IN_PLACE, &Ntotal, 1, MPI_HLONG, MPI_SUM, platform->comm.mpiComm);
  const double solveTime = platform->timer.query("pressureSolve", "DEVICE:MAX")/Nrep;
  const double precoTime = platform->timer.query("pressure preconditioner", "DEVICE:MAX")/Nrep;
  const double smootherTime = platform->timer.query("pressure preconditioner smoother", "DEVICE:MAX")/Nrep;
  const double crsTime = platform->timer.query("BoomerAMGSolve", "HOST:MAX")/Nrep;
  if(platform->comm.mpiRank == 0) {
    const double throughput = (double)Ntotal/solveTime;
    printf("iterations: %d\n", nrs->pSolver->Niter);
    printf("avg solve time: %g s\n", solveTime);
    printf("  preconditioner %g s\n", precoTime);
    if(smootherTime > 0) printf("    smoother %g s\n", smootherTime);
    if(crsTime > 0) printf("    coarse grid %g s\n", crsTime);
    printf("avg throughput: %g DOF/s\n", throughput);
    printf("avg throughput: %g (DOF x iter)/s\n", (double) nrs->pSolver->Niter * throughput);
  }

  MPI_Finalize();
  exit(EXIT_SUCCESS);
}
