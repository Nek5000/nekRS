

@kernel void sumReduction(const dlong N,
                          @ restrict const dfloat *w,
                          @ restrict const dfloat *x,
                          @ restrict dfloat *w1,
                          @ restrict dfloat *w2)
{
  for (dlong b = 0; b < (N + p_blockSize - 1) / p_blockSize; ++b; @outer(0)) {
    @shared volatile dfloat s_w1[p_blockSize];
    @shared volatile dfloat s_w2[p_blockSize];

    for (int t = 0; t < p_blockSize; ++t; @inner(0)) {
      const dlong id = t + p_blockSize * b;
      const dfloat xid = (id < N) ? x[id] : 0;
      const dfloat wid = (id < N) ? w[id] : 0;
      s_w1[t] = wid;
      s_w2[t] = xid;
    }

    @barrier();
#if p_blockSize > 512
    for (int t = 0; t < p_blockSize; ++t; @inner(0))
      if (t < 512) {
        s_w1[t] += s_w1[t + 512];
        s_w2[t] += s_w2[t + 512];
      }
    @barrier();
#endif
#if p_blockSize > 256
    for (int t = 0; t < p_blockSize; ++t; @inner(0))
      if (t < 256) {
        s_w1[t] += s_w1[t + 256];
        s_w2[t] += s_w2[t + 256];
      }
    @barrier();
#endif

    for (int t = 0; t < p_blockSize; ++t; @inner(0))
      if (t < 128) {
        s_w1[t] += s_w1[t + 128];
        s_w2[t] += s_w2[t + 128];
      }
    @barrier();

    for (int t = 0; t < p_blockSize; ++t; @inner(0))
      if (t < 64) {
        s_w1[t] += s_w1[t + 64];
        s_w2[t] += s_w2[t + 64];
      }
    @barrier();

    for (int t = 0; t < p_blockSize; ++t; @inner(0))
      if (t < 32) {
        s_w1[t] += s_w1[t + 32];
        s_w2[t] += s_w2[t + 32];
      }
    @barrier();
    for (int t = 0; t < p_blockSize; ++t; @inner(0))
      if (t < 16) {
        s_w1[t] += s_w1[t + 16];
        s_w2[t] += s_w2[t + 16];
      }
    @barrier();
    for (int t = 0; t < p_blockSize; ++t; @inner(0))
      if (t < 8) {
        s_w1[t] += s_w1[t + 8];
        s_w2[t] += s_w2[t + 8];
      }
    @barrier();
    for (int t = 0; t < p_blockSize; ++t; @inner(0))
      if (t < 4) {
        s_w1[t] += s_w1[t + 4];
        s_w2[t] += s_w2[t + 4];
      }
    @barrier();
    for (int t = 0; t < p_blockSize; ++t; @inner(0))
      if (t < 2) {
        s_w1[t] += s_w1[t + 2];
        s_w2[t] += s_w2[t + 2];
      }
    @barrier();
    for (int t = 0; t < p_blockSize; ++t; @inner(0))
      if (t < 1) {
        w1[b] = s_w1[0] + s_w1[1];
        w2[b] = s_w2[0] + s_w2[1];
      }
  }
}
