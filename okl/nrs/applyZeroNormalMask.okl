@kernel void applyZeroNormalMask(const dlong Nelements,
                                         const dlong offset,
                                         @restrict const dlong*  elementList,
                                         @restrict const dfloat*  sgeo,
                                         @restrict const dfloat*  mask,
                                         @restrict const dlong*  vmapM,
                                         @restrict const int*  EToB,
                                         @restrict dfloat*  U)
{
  for(dlong element = 0; element < Nelements; element++; @outer(0)) {

    @exclusive dlong e;

    for(int f = 0; f < p_Nfaces; f++) {
      for(int m = 0; m < p_Nfp; ++m; @inner(0)) {
        e = elementList[element];
        const int n = m + f * p_Nfp;
        const int sk = e * p_Nfp * p_Nfaces + n;
        const dlong sid  = e * p_Nfaces * p_Nfp + n;
        const dlong idM = vmapM[sk];
        const dlong bcType = EToB[f + p_Nfaces * e];

        if(bcType == p_ZERO_NORMAL) {

          const dfloat nx = sgeo[sid * p_Nsgeo + p_NXID];
          const dfloat ny = sgeo[sid * p_Nsgeo + p_NYID];
          const dfloat nz = sgeo[sid * p_Nsgeo + p_NZID];

          const dfloat t1x = sgeo[sid * p_Nsgeo + p_T1XID];
          const dfloat t1y = sgeo[sid * p_Nsgeo + p_T1YID];
          const dfloat t1z = sgeo[sid * p_Nsgeo + p_T1ZID];

          const dfloat t2x = sgeo[sid * p_Nsgeo + p_T2XID];
          const dfloat t2y = sgeo[sid * p_Nsgeo + p_T2YID];
          const dfloat t2z = sgeo[sid * p_Nsgeo + p_T2ZID];

          const dfloat maskN  = mask[idM + 0 * offset];
          const dfloat maskT1 = mask[idM + 1 * offset];
          const dfloat maskT2 = mask[idM + 2 * offset];

          const dfloat u = U[idM + 0 * offset];
          const dfloat v = U[idM + 1 * offset];
          const dfloat w = U[idM + 2 * offset];

          const dfloat Rnor = (u * nx  + v * ny  + w * nz ) * maskN;
          const dfloat Rtn1 = (u * t1x + v * t1y + w * t1z) * maskT1;
          const dfloat Rtn2 = (u * t2x + v * t2y + w * t2z) * maskT2;

          U[idM + 0 * offset] = Rnor * nx + Rtn1 * t1x + Rtn2 * t2x;
          U[idM + 1 * offset] = Rnor * ny + Rtn1 * t1y + Rtn2 * t2y;
          U[idM + 2 * offset] = Rnor * nz + Rtn1 * t1z + Rtn2 * t2z;
        }
      }
      @barrier("global");
    }

  }
}
