//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"
#include "plugins/velRecycling.hpp"
#include "plugins/tavg.hpp"

static dfloat ZLENGTH;
static int NSLABS;
static int NELSLAB;

/* UDF Functions */                                                      

void UDF_LoadKernels(occa::properties& kernelInfo)
{
  velRecycling::buildKernel(kernelInfo);
  tavg::buildKernel(kernelInfo);
}

void UDF_Setup(nrs_t *nrs)
{
  // setup scratch space
  platform_t* platform = platform_t::getInstance();
  nrs->o_usrwrk = platform->device.malloc(nrs->NVfields*nrs->fieldOffset,  sizeof(dfloat));

  // recycling
  const dfloat wbar  = 1.0;
  const int bID      = 1; 
  dfloat zRecycLayer = 0.25*ZLENGTH;
  const hlong offset = NELSLAB * round(NSLABS * zRecycLayer/ZLENGTH); 
  velRecycling::setup(nrs, nrs->o_usrwrk, offset, bID, wbar);

  tavg::setup(nrs);
}
void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata", "zlength", ZLENGTH);
  platform->par->extract("casedata", "nslabs", NSLABS);
  platform->par->extract("casedata", "nelslab", NELSLAB);
  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    double* const nek_cb_scnrs = (double*) nek::ptr("cb_scnrs");
    nek_cb_scnrs[0] = ZLENGTH;
    nek_cb_scnrs[1] = NSLABS;
    nek_cb_scnrs[2] = NELSLAB;
  }
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  mesh_t *mesh = nrs->meshV;

  velRecycling::copy();
  tavg::run(time);

  if (nrs->isOutputStep) {
    occa::memory o_UZ = nrs->o_U + 2*nrs->fieldOffset * sizeof(dfloat);
    const dfloat ubar = platform->linAlg->innerProd(mesh->Nlocal, o_UZ, mesh->o_LMM, platform->comm.mpiComm)/mesh->volume;
    if (platform->comm.mpiRank == 0) printf(" uBulk: %g\n", ubar);

    tavg::outfld();
  }
}
