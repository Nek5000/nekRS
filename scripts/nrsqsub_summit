#!/bin/bash

: ${PROJ_ID:=""}
: ${NEKRS_HOME:="$HOME/.local/nekrs"}
: ${CPUONLY:=0}
: ${NEKRS_CACHE_BCAST:=1}
: ${NEKRS_SKIP_BUILD_ONLY:=0}

if [ $# -ne 3 ]; then
  echo "usage: [PROJ_ID] [QUEUE] $0 <casename> <number of compute nodes> <hh:mm>"
  exit 0
fi

if [ -z "$PROJ_ID" ]; then
  echo "ERROR: PROJ_ID is empty"
  exit 1
fi

bin=$NEKRS_HOME/bin/nekrs
case=$1
nodes=$2
gpu_per_node=6
cores_per_socket=21
let nn=$nodes*$gpu_per_node
let ntasks=nn
time=$3
backend=CUDA

if [ $CPUONLY -eq 1 ]; then
  backend=SERIAL
  nn=$nodes*$gpu_per_node
  let nn=2*$nodes
  let ntasks=$nn*$cores_per_socket
fi

if [ ! -f $bin ]; then
  echo "Cannot find" $bin
  exit 1
fi

if [ ! -f $case.par ]; then
  echo "Cannot find" $case.par
  exit 1
fi

if [ ! -f $case.udf ]; then
  echo "Cannot find" $case.udf
  exit 1
fi

if [ ! -f $case.re2 ]; then
  echo "Cannot find" $case.re2
  exit 1
fi

export ROMIO_HINTS="$(pwd)/.romio_hint"
if [ ! -f "$ROMIO_HINTS" ]; then
  echo "romio_no_indep_rw true"   >$ROMIO_HINTS
  echo "romio_cb_write enable"   >>$ROMIO_HINTS
  echo "romio_ds_write enable"   >>$ROMIO_HINTS
  echo "romio_cb_read enable"    >>$ROMIO_HINTS
  echo "romio_ds_read enable"    >>$ROMIO_HINTS
  echo "cb_buffer_size 16777216" >>$ROMIO_HINTS
  echo "cb_config_list *:1"      >>$ROMIO_HINTS
fi

# sbatch
SFILE=s.bin
echo "#!/bin/bash" > $SFILE
echo "#BSUB -P $PROJ_ID" >>$SFILE
echo "#BSUB -J nekRS_$case" >>$SFILE
echo "#BSUB -alloc_flags NVME" >>$SFILE
echo "#BSUB -W $time" >>$SFILE
echo "#BSUB -nnodes $nodes" >>$SFILE

echo "" >> $SFILE
echo "export CPUONLY=$CPUONLY" >> $SFILE
echo "export NEKRS_HOME=$NEKRS_HOME" >> $SFILE
echo "export NEKRS_CACHE_BCAST=$NEKRS_CACHE_BCAST" >> $SFILE
echo "export NEKRS_GPU_MPI=1" >> $SFILE
echo "if [ \$CPUONLY -eq 1 ]; then" >> $SFILE
echo "  module load xl" >> $SFILE
echo "  XL_HOME=\"\$OLCF_XLC_ROOT\"" >> $SFILE
echo "  export OCCA_CXX=\"\$XL_HOME/bin/xlc++\" " >> $SFILE
echo "  export OCCA_CXXFLAGS=\"-O3 -qarch=pwr9 -qhot\" " >> $SFILE
echo "  export OCCA_LDFLAGS=\"\$XL_HOME/lib/libibmc++.a\"" >> $SFILE
echo "fi" >> $SFILE

echo "module load gcc" >> $SFILE
echo "module unload darshan-runtime" >> $SFILE

echo "" >> $SFILE
echo "# work-around for barrier issue" >> $SFILE
echo "export OMPI_MCA_coll_ibm_collselect_mode_barrier=failsafe" >> $SFILE

echo "# optimize for BW" >> $SFILE
echo "export PAMI_ENABLE_STRIPING=1" >> $SFILE
echo "export PAMI_IBV_ADAPTER_AFFINITY=1" >> $SFILE
echo "export PAMI_IBV_DEVICE_NAME=\"mlx5_0:1,mlx5_3:1\"" >> $SFILE
echo "export PAMI_IBV_DEVICE_NAME_1=\"mlx5_3:1,mlx5_0:1\"" >> $SFILE
echo "export OMPI_MCA_io=romio321" >> $SFILE
echo "export ROMIO_HINTS=\"$(pwd)/.romio_hint\"" >> $SFILE

echo "" >> $SFILE

# repeat computation in user s.bin file for better readability
echo "bin=\$NEKRS_HOME/bin/nekrs" >> $SFILE
echo "case=$1" >> $SFILE
echo "nodes=$2" >> $SFILE
echo "gpu_per_node=6" >> $SFILE
echo "cores_per_socket=21" >> $SFILE
echo "let nn=\$nodes*\$gpu_per_node" >> $SFILE
echo "let ntasks=nn" >> $SFILE
echo "backend=CUDA" >> $SFILE

echo "" >> $SFILE

echo "if [ \$CPUONLY -eq 1 ]; then" >> $SFILE
echo "  backend=CPU" >> $SFILE
echo "  let nn=2*\$nodes" >> $SFILE
echo "  let ntasks=\$nn*\$cores_per_socket" >> $SFILE
echo "fi " >> $SFILE

echo "" >> $SFILE

echo "" >> $SFILE
echo "date" >>$SFILE
echo "" >> $SFILE

echo "export NVME_HOME=\"/mnt/bb/$USER/\"" >> $SFILE
echo "if [ \$NEKRS_CACHE_BCAST -eq 1 ]; then" >> $SFILE
echo "  export NEKRS_LOCAL_TMP_DIR=\$NVME_HOME" >> $SFILE
echo "fi" >> $SFILE
echo "" >> $SFILE


if [ $NEKRS_SKIP_BUILD_ONLY -eq 0 ]; then
echo "jsrun --smpiargs='-gpu' -X 1 -n1 -r1 -a1 -c2 -g1 -b rs -d packed \$bin --setup \$case --backend \$backend --device-id 0 --build-only \$ntasks" >> $SFILE
fi

echo "if [ \$CPUONLY -eq 1 ]; then" >> $SFILE
echo "  jsrun -X 1 -n\$nn -a\$cores_per_socket -c\$cores_per_socket -g0 -b packed:1 -d packed \$bin --setup \$case --backend \$backend" >> $SFILE
echo "else" >> $SFILE
echo "  jsrun --smpiargs='-gpu' -X 1 -n\$nn -r\$gpu_per_node -a1 -c2 -g1 -b rs -d packed \$bin --setup \$case --backend \$backend --device-id 0" >> $SFILE
echo "fi" >> $SFILE

bsub $SFILE

# clean-up
rm -rf $SFILE $ROMIO_HINTS
