//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"
#include "ci.inc"

static occa::memory o_nekFU;
static occa::memory o_nekMue;

/* User Functions */

void userf(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_FU)
{
  o_FU.copyFrom(o_nekFU, nrs->NVfields*nrs->fieldOffset*sizeof(dfloat));
}

void uservp(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_S,
            occa::memory o_UProp, occa::memory o_SProp)
{
    mesh_t* mesh = nrs->mesh;
    occa::memory o_mue = o_UProp.slice(0*nrs->fieldOffset*sizeof(dfloat));
    occa::memory o_rho = o_UProp.slice(1*nrs->fieldOffset*sizeof(dfloat));
    nrs->linAlg->fill(mesh->Nlocal, 1.0, o_rho);
    o_mue.copyFrom(o_nekMue, mesh->Nlocal*sizeof(dfloat));
}

void UDF_LoadKernels(nrs_t *nrs)
{
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) ciSetup(comm, options);
}

void UDF_Setup(nrs_t *nrs)
{
  platform_t* platform = platform_t::getInstance();
  mesh_t *mesh = nrs->mesh;

  udf.uEqnSource = &userf;
  udf.properties = &uservp;

  double *mul = (double *) nek_scPtr(1);
  double *FUx = (double *) nek_scPtr(2);
  double *FUy = (double *) nek_scPtr(3);
  double *FUz = (double *) nek_scPtr(4);

  o_nekFU  = platform->device.malloc(nrs->NVfields*nrs->fieldOffset*sizeof(dfloat));
  o_nekMue = platform->device.malloc(              nrs->fieldOffset*sizeof(dfloat));

  o_nekMue.copyFrom(mul, mesh->Nlocal*sizeof(dfloat));
  o_nekFU.copyFrom (FUx, mesh->Nlocal*sizeof(dfloat), 0*nrs->fieldOffset*sizeof(dfloat));
  o_nekFU.copyFrom (FUy, mesh->Nlocal*sizeof(dfloat), 1*nrs->fieldOffset*sizeof(dfloat));
  o_nekFU.copyFrom (FUz, mesh->Nlocal*sizeof(dfloat), 2*nrs->fieldOffset*sizeof(dfloat));
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  if (nrs->isOutputStep) {
    nek_ocopyFrom(time, tstep);
    nek_userchk();
  }
  if (ciMode) ciTestErrors(nrs, time, tstep);
}
