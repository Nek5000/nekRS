//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"
#include "plugins/lowMach.hpp"
#
#include "ci.inc"
#include "casedata.h"

static occa::kernel userQKernel;
static occa::kernel userVpKernel;

void qtl(nrs_t* nrs, dfloat time, occa::memory o_div)
{
  lowMach::qThermalPerfectGasSingleComponent(nrs, time, P_GAMMA, o_div);
}


void userq(nrs_t *nrs, dfloat time, occa::memory o_S, occa::memory o_FS)
{
  cds_t *cds   = nrs->cds;
  mesh_t *mesh = cds->mesh;
  userQKernel(mesh->Nelements, mesh->o_x, o_FS);
}

void uservp(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_S,
            occa::memory o_UProp, occa::memory o_SProp)
{
  mesh_t *mesh = nrs->mesh;

  userVpKernel(mesh->Nelements, nrs->fieldOffset, nrs->cds->fieldOffset, 
               o_S, o_UProp, o_SProp);
}

/* UDF Functions */                                                      

void UDF_LoadKernels(nrs_t *nrs)
{
  occa::properties& kernelInfo = *nrs->kernelInfo;
  kernelInfo["defines/p_DELTA"] = P_DELTA;
  userQKernel = udfBuildKernel(nrs, "userQ");
  userVpKernel = udfBuildKernel(nrs, "userVp");
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) ciSetup(comm, options);
}

void UDF_Setup(nrs_t *nrs)
{
  udf.sEqnSource = &userq;
  udf.properties = &uservp;

  lowMach::setup(nrs);
  udf.div = &qtl;
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  if (nrs->isOutputStep) {
    nek_ocopyFrom(time, tstep);
    nek_userchk();
  }
  if (ciMode) ciTestErrors(nrs, time, tstep);
}
