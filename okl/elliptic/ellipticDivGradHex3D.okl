/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

#define ellipticDivGradHex3D_0 ellipticDivGradHex3D

// version with quite memory usage
@kernel void ellipticDivGradHex3D_0(const dlong Nelements,
                                    @restrict const dfloat*  vgeo,
                                    @restrict const dfloat*  D,
                                    const dlong offset,
                                    @restrict const dfloat*  coeff,
                                    @restrict const dfloat*  q,
                                    @restrict dfloat*  Ax)
{
  for(dlong e = 0; e < Nelements; e++; @outer(0)) {
    //
    @shared dfloat s_q[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_qx[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_qy[p_Nq][p_Nq][p_Nq];
    // reuse shared memory
#define s_qz s_q

    @shared dfloat s_D[p_Nq][p_Nq];

    // AK: too much register ??
    @exclusive dfloat r_drdx, r_drdy, r_drdz;
    @exclusive dfloat r_dsdx, r_dsdy, r_dsdz;
    @exclusive dfloat r_dtdx, r_dtdy, r_dtdz;
    @exclusive dfloat r_dqdx, r_dqdy, r_dqdz;

    for(int k = 0; k < p_Nq; ++k; @inner(2))
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          // Initialize register
          r_drdx = 0.f;
          r_drdy = 0.f;
          r_drdz = 0.f;
          r_dsdx = 0.f;
          r_dsdy = 0.f;
          r_dsdz = 0.f;
          r_dtdx = 0.f;
          r_dtdy = 0.f;
          r_dtdz = 0.f;
          r_dqdx = 0.f;
          r_dqdy = 0.f;
          r_dqdz = 0.f;

          s_q[k][j][i]  = q[id];

          if (k == 0)
            s_D[j][i] = D[j * p_Nq + i]; // column major
        }

    @barrier("local");

    for(int k = 0; k < p_Nq; ++k; @inner(2)) {
      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong gid = e * p_Np * p_Nvgeo + k * p_Nq * p_Nq + j * p_Nq + i;

          const dlong id  = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat mu = coeff[id + 0 * offset];

          r_drdx = vgeo[gid + p_RXID * p_Np];
          r_drdy = vgeo[gid + p_RYID * p_Np];
          r_drdz = vgeo[gid + p_RZID * p_Np];
          r_dsdx = vgeo[gid + p_SXID * p_Np];
          r_dsdy = vgeo[gid + p_SYID * p_Np];
          r_dsdz = vgeo[gid + p_SZID * p_Np];
          r_dtdx = vgeo[gid + p_TXID * p_Np];
          r_dtdy = vgeo[gid + p_TYID * p_Np];
          r_dtdz = vgeo[gid + p_TZID * p_Np];
          // compute derivatives
          dfloat dqdr  = 0.f, dqds  = 0.f, dqdt  = 0.f;
#pragma unroll p_Nq
          for(int n = 0; n < p_Nq; ++n) {
            dqdr += s_D[i][n] * s_q[k][j][n];
            dqds += s_D[j][n] * s_q[k][n][i];
            dqdt += s_D[k][n] * s_q[n][j][i];
          }

          r_dqdx = mu * (r_drdx * dqdr + r_dsdx * dqds + r_dtdx * dqdt);
          r_dqdy = mu * (r_drdy * dqdr + r_dsdy * dqds + r_dtdy * dqdt);
          r_dqdz = mu * (r_drdz * dqdr + r_dsdz * dqds + r_dtdz * dqdt);
        }
      }
    }

    @barrier("local");

    // fill shared
    for(int k = 0; k < p_Nq; ++k; @inner(2))
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // store covariant
          s_qx[k][j][i] = (r_drdx * r_dqdx + r_drdy * r_dqdy + r_drdz * r_dqdz);
          s_qy[k][j][i] = (r_dsdx * r_dqdx + r_dsdy * r_dqdy + r_dsdz * r_dqdz);
          s_qz[k][j][i] = (r_dtdx * r_dqdx + r_dtdy * r_dqdy + r_dtdz * r_dqdz);
        }

    @barrier("local");

    for(int k = 0; k < p_Nq; ++k; @inner(2)) {
      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id  = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          dfloat div  = 0.f;
#pragma unroll p_Nq
          for(int n = 0; n < p_Nq; ++n) {
            div += s_D[i][n] * s_qx[k][j][n];
            div += s_D[j][n] * s_qy[k][n][i];
            div += s_D[k][n] * s_qz[n][j][i];
          }
          Ax[id] = div;
        }
      }
    }
  }
}

// version with memory usage
@kernel void ellipticDivGradHex3D_1(const dlong Nelements,
                                    @restrict const dfloat*  vgeo,
                                    @restrict const dfloat*  D,
                                    const dlong offset,
                                    @restrict const dfloat*  coeff,
                                    @restrict const dfloat*  q,
                                    @restrict dfloat*  Ax)
{
  for(dlong e = 0; e < Nelements; e++; @outer(0)) { // for all elements
    //
    @shared dfloat s_q[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_qx[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_qy[p_Nq][p_Nq][p_Nq];
    // reuse shared memory
#define s_qz s_q

    @shared dfloat s_D[p_Nq][p_Nq];

    @exclusive dfloat r_dqdx, r_dqdy, r_dqdz;

    for(int k = 0; k < p_Nq; ++k; @inner(2))
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          // Initialize register
          r_dqdx = 0.f;
          r_dqdy = 0.f;
          r_dqdz = 0.f;

          s_q[k][j][i]  = q[id];

          if (k == 0)
            s_D[j][i] = D[j * p_Nq + i]; // column major
        }

    @barrier("local");

    for(int k = 0; k < p_Nq; ++k; @inner(2)) {
      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong gid = e * p_Np * p_Nvgeo + k * p_Nq * p_Nq + j * p_Nq + i;

          const dlong id  = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat mu = coeff[id + 0 * offset];

          const dfloat r_drdx = vgeo[gid + p_RXID * p_Np];
          const dfloat r_drdy = vgeo[gid + p_RYID * p_Np];
          const dfloat r_drdz = vgeo[gid + p_RZID * p_Np];
          const dfloat r_dsdx = vgeo[gid + p_SXID * p_Np];
          const dfloat r_dsdy = vgeo[gid + p_SYID * p_Np];
          const dfloat r_dsdz = vgeo[gid + p_SZID * p_Np];
          const dfloat r_dtdx = vgeo[gid + p_TXID * p_Np];
          const dfloat r_dtdy = vgeo[gid + p_TYID * p_Np];
          const dfloat r_dtdz = vgeo[gid + p_TZID * p_Np];
          // compute derivatives
          dfloat dqdr  = 0.f, dqds  = 0.f, dqdt  = 0.f;
#pragma unroll p_Nq
          for(int n = 0; n < p_Nq; ++n) {
            dqdr += s_D[i][n] * s_q[k][j][n];
            dqds += s_D[j][n] * s_q[k][n][i];
            dqdt += s_D[k][n] * s_q[n][j][i];
          }

          r_dqdx = mu * (r_drdx * dqdr + r_dsdx * dqds + r_dtdx * dqdt);
          r_dqdy = mu * (r_drdy * dqdr + r_dsdy * dqds + r_dtdy * dqdt);
          r_dqdz = mu * (r_drdz * dqdr + r_dsdz * dqds + r_dtdz * dqdt);
        }
      }
    }

    @barrier("local");

    // fill shared
    for(int k = 0; k < p_Nq; ++k; @inner(2))
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong gid = e * p_Np * p_Nvgeo + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat r_drdx = vgeo[gid + p_RXID * p_Np];
          const dfloat r_drdy = vgeo[gid + p_RYID * p_Np];
          const dfloat r_drdz = vgeo[gid + p_RZID * p_Np];
          const dfloat r_dsdx = vgeo[gid + p_SXID * p_Np];
          const dfloat r_dsdy = vgeo[gid + p_SYID * p_Np];
          const dfloat r_dsdz = vgeo[gid + p_SZID * p_Np];
          const dfloat r_dtdx = vgeo[gid + p_TXID * p_Np];
          const dfloat r_dtdy = vgeo[gid + p_TYID * p_Np];
          const dfloat r_dtdz = vgeo[gid + p_TZID * p_Np];

          s_qx[k][j][i] = (r_drdx * r_dqdx + r_drdy * r_dqdy + r_drdz * r_dqdz);
          s_qy[k][j][i] = (r_dsdx * r_dqdx + r_dsdy * r_dqdy + r_dsdz * r_dqdz);
          s_qz[k][j][i] = (r_dtdx * r_dqdx + r_dtdy * r_dqdy + r_dtdz * r_dqdz);
        }

    @barrier("local");

    for(int k = 0; k < p_Nq; ++k; @inner(2)) {
      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id  = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          dfloat div  = 0.f;
#pragma unroll p_Nq
          for(int n = 0; n < p_Nq; ++n) {
            div += s_D[i][n] * s_qx[k][j][n];
            div += s_D[j][n] * s_qy[k][n][i];
            div += s_D[k][n] * s_qz[n][j][i];
          }
          Ax[id] = div;
        }
      }
    }
  }
}

// version with memory usage
@kernel void ellipticDivGradHex3D_2(const dlong Nelements,
                                    @restrict const dfloat*  vgeo,
                                    @restrict const dfloat*  D,
                                    const dlong offset,
                                    @restrict const dfloat*  coeff,
                                    @restrict const dfloat*  q,
                                    @restrict dfloat*  Ax)
{
  for(dlong e = 0; e < Nelements; e++; @outer(0)) { // for all elements
    //
    @shared dfloat s_q[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_qx[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_qy[p_Nq][p_Nq][p_Nq];
    // reuse shared memory
#define s_qz s_q

    @shared dfloat s_D[p_Nq][p_Nq];

    @exclusive dfloat r_dqdx, r_dqdy, r_dqdz;

    for(int k = 0; k < p_Nq; ++k; @inner(2))
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          // Initialize register
          r_dqdx = 0.f;
          r_dqdy = 0.f;
          r_dqdz = 0.f;

          s_q[k][j][i]  = q[id];

          if (k == 0)
            s_D[j][i] = D[j * p_Nq + i]; // column major
        }

    @barrier("local");

    for(int k = 0; k < p_Nq; ++k; @inner(2)) {
      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong gid = e * p_Np * p_Nvgeo + k * p_Nq * p_Nq + j * p_Nq + i;

          const dlong id  = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat mu = coeff[id + 0 * offset];

          const dfloat r_drdx = vgeo[gid + p_RXID * p_Np];
          const dfloat r_drdy = vgeo[gid + p_RYID * p_Np];
          const dfloat r_drdz = vgeo[gid + p_RZID * p_Np];
          const dfloat r_dsdx = vgeo[gid + p_SXID * p_Np];
          const dfloat r_dsdy = vgeo[gid + p_SYID * p_Np];
          const dfloat r_dsdz = vgeo[gid + p_SZID * p_Np];
          const dfloat r_dtdx = vgeo[gid + p_TXID * p_Np];
          const dfloat r_dtdy = vgeo[gid + p_TYID * p_Np];
          const dfloat r_dtdz = vgeo[gid + p_TZID * p_Np];
          // compute derivatives
          dfloat dqdr  = 0.f, dqds  = 0.f, dqdt  = 0.f;
#pragma unroll p_Nq
          for(int n = 0; n < p_Nq; ++n) {
            dqdr += s_D[i][n] * s_q[k][j][n];
            dqds += s_D[j][n] * s_q[k][n][i];
            dqdt += s_D[k][n] * s_q[n][j][i];
          }

          r_dqdx = mu * (r_drdx * dqdr + r_dsdx * dqds + r_dtdx * dqdt);
          r_dqdy = mu * (r_drdy * dqdr + r_dsdy * dqds + r_dtdy * dqdt);
          r_dqdz = mu * (r_drdz * dqdr + r_dsdz * dqds + r_dtdz * dqdt);
        }
      }
    }

    @barrier("local");

    // fill shared
    for(int k = 0; k < p_Nq; ++k; @inner(2))
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // Store covariant   ??
          s_qx[k][j][i] = r_dqdx;
          s_qy[k][j][i] = r_dqdy;
          s_qz[k][j][i] = r_dqdz;
        }

    @barrier("local");

    for(int k = 0; k < p_Nq; ++k; @inner(2)) {
      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong id  = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          const dlong gid = e * p_Np * p_Nvgeo + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat r_drdx = vgeo[gid + p_RXID * p_Np];
          const dfloat r_drdy = vgeo[gid + p_RYID * p_Np];
          const dfloat r_drdz = vgeo[gid + p_RZID * p_Np];
          const dfloat r_dsdx = vgeo[gid + p_SXID * p_Np];
          const dfloat r_dsdy = vgeo[gid + p_SYID * p_Np];
          const dfloat r_dsdz = vgeo[gid + p_SZID * p_Np];
          const dfloat r_dtdx = vgeo[gid + p_TXID * p_Np];
          const dfloat r_dtdy = vgeo[gid + p_TYID * p_Np];
          const dfloat r_dtdz = vgeo[gid + p_TZID * p_Np];

          dfloat dudr = 0.f, duds = 0.f, dudt = 0.f;
          dfloat dvdr = 0.f, dvds = 0.f, dvdt = 0.f;
          dfloat dwdr = 0.f, dwds = 0.f, dwdt = 0.f;

#pragma unroll p_Nq
          for(int n = 0; n < p_Nq; ++n) {
            const dfloat Dr = s_D[i][n];
            const dfloat Ds = s_D[j][n];
            const dfloat Dt = s_D[k][n];

            dudr += Dr * s_qx[k][j][n];
            duds += Ds * s_qx[k][n][i];
            dudt += Dt * s_qx[n][j][i];

            dvdr += Dr * s_qy[k][j][n];
            dvds += Ds * s_qy[k][n][i];
            dvdt += Dt * s_qy[n][j][i];

            dwdr += Dr * s_qz[k][j][n];
            dwds += Ds * s_qz[k][n][i];
            dwdt += Dt * s_qz[n][j][i];
          }

          dfloat dudx = r_drdx * dudr + r_dsdx * duds + r_dtdx * dudt;
          dfloat dvdy = r_drdy * dvdr + r_dsdy * dvds + r_dtdy * dvdt;
          dfloat dwdz = r_drdz * dwdr + r_dsdz * dwds + r_dtdz * dwdt;

          Ax[id] = (dudx + dvdy + dwdz);
        }
      }
    }
  }
}
