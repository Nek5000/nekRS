/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

@kernel void scalarMultiply(const dlong N,
                            const dfloat alpha,
                            @restrict dfloat*  x,
                            const dlong offset)
{
  for(dlong n = 0; n < N; ++n; @tile(p_threadBlockSize,@outer,@inner))
    if(n < N)
      x[n + offset * N] = alpha * x[n + offset * N];
}
@kernel void extractVector(const dlong N,
                           @restrict const dfloat*  x,
                           @restrict dfloat* y,
                           const dlong column)
{
  for(dlong n = 0; n < N; ++n; @tile(p_threadBlockSize,@outer,@inner))
    if(n < N)
      y[n] = x[n + column * N];
}
@kernel void placeVector(const dlong N,
                         @restrict const dfloat*  x,
                         @restrict dfloat* y,
                         const dlong column)
{
  for(dlong n = 0; n < N; ++n; @tile(p_threadBlockSize,@outer,@inner))
    if(n < N)
      y[n + column * N] = x[n];
}
@kernel void scaledAddwOffset(const dlong N,
                              const dfloat alpha,
                              @restrict dfloat*  x,
                              const dlong sourceOffset,
                              const dfloat beta,
                              const dlong destOffset)
{
  for(dlong n = 0; n < N; ++n; @tile(p_threadBlockSize,@outer,@inner))
    if(n < N)
      x[n + destOffset * N] = alpha * x[n + sourceOffset * N] + beta * x[n + destOffset * N];
}
@kernel void multiScaledAddwOffset(const dlong N,
                              const dlong m,
                              @restrict const dfloat * alphas,
                              @restrict dfloat*  x,
                              const dfloat beta,
                              const dlong destOffset)
{
  for(dlong n = 0; n < N; ++n; @tile(p_threadBlockSize,@outer,@inner)){
    if(n < N){
      for(dlong k = 0; k < m-1; ++k){
        x[n + destOffset * N] = -alphas[k] * x[n + k * N] + beta * x[n + destOffset * N];
      }
    }
  }
}
@kernel void subtractedMultiScaledAddwOffset(const dlong N,
                              const dlong m,
                              @restrict const dfloat * alphas,
                              @restrict dfloat*  x,
                              const dfloat beta,
                              const dlong k)
{
  for(dlong n = 0; n < N; ++n; @tile(p_threadBlockSize,@outer,@inner)){
    if(n < N){
      for(dlong j = m-1; j >= k + 1; j--){
        x[n + k * N] = -alphas[j] * x[n + j * N] + beta * x[n + k * N];
      }
    }
  }
}
@kernel void scaledAddwOffsetTwoVec(const dlong N,
                                    const dfloat alpha,
                                    @restrict const dfloat*  x,
                                    const dlong sourceOffset,
                                    const dfloat beta,
                                    @restrict dfloat* y,
                                    const dlong destOffset)
{
  for(dlong n = 0; n < N; ++n; @tile(p_threadBlockSize,@outer,@inner))
    if(n < N)
      y[n + destOffset * N] = alpha * x[n + sourceOffset * N] + beta * y[n + destOffset * N];
}
// TODO: optimize
@kernel void accumulate(const dlong N,
                        @restrict const dfloat* alpha,
                        const dlong m,
                        @restrict const dfloat*  x,
                        @restrict dfloat* y)
{
  for(dlong n = 0; n < N; ++n; @tile(p_threadBlockSize,@outer,@inner))
    if(n < N) {
      // y = alpha[0] * o_xx[:,0]
      y[n] = alpha[0] * x[n];
      for(dlong k = 1; k < m; ++k)
        // y += alpha[k] * o_xx[:,k]
        y[n] += alpha[k] * x[n + k * N];
    }
}

@kernel void innerProduct(const dlong N,
                          @restrict const dfloat*  w,
                          const dlong wOffset,
                          @restrict const dfloat*  x,
                          const dlong xOffset,
                          @restrict dfloat*  wx)
{
  for(dlong b = 0; b < (N + p_threadBlockSize - 1) / p_threadBlockSize; ++b; @outer(0)) {
    @shared volatile dfloat s_wx[p_threadBlockSize];

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) {
      const dlong id = t + b * p_threadBlockSize;
      s_wx[t] = (id < N) ? (w[id + N * wOffset] * x[id + N * xOffset]) : 0.f;
    }

    @barrier("local");

#if p_threadBlockSize > 512
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 512) s_wx[t] += s_wx[t + 512];
    @barrier("local");
#endif

#if p_threadBlockSize > 256
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 256) s_wx[t] += s_wx[t + 256];
    @barrier("local");
#endif

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 128) s_wx[t] += s_wx[t + 128];
    @barrier("local");

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 64) s_wx[t] += s_wx[t + 64];
    @barrier("local");

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 32) s_wx[t] += s_wx[t + 32];
    @barrier("local");

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 16) s_wx[t] += s_wx[t + 16];
    //    @barrier("local");

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t <  8) s_wx[t] += s_wx[t +  8];
    //    @barrier("local");

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t <  4) s_wx[t] += s_wx[t +  4];
    //    @barrier("local");

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t <  2) s_wx[t] += s_wx[t +  2];
    //    @barrier("local");

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t <  1) wx[b] = s_wx[0] + s_wx[1];
  }
}

@kernel void weightedInnerProduct2(const dlong N,
                                   @restrict const dfloat*  w,
                                   @restrict const dfloat*  x,
                                   const dlong xOffset,
                                   @restrict const dfloat*  y,
                                   const dlong yOffset,
                                   @restrict dfloat*  wxy)
{
  for(dlong b = 0; b < (N + p_threadBlockSize - 1) / p_threadBlockSize; ++b; @outer(0)) {
    @shared volatile dfloat s_wxy[p_threadBlockSize];

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) {
      const dlong id = t + p_threadBlockSize * b;
      s_wxy[t] = (id < N) ? w[id] * x[id + N * xOffset] * y[id + N * yOffset] : 0.f;
    }

    @barrier("local");
#if p_threadBlockSize > 512
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 512) s_wxy[t] += s_wxy[t + 512];
    @barrier("local");
#endif
#if p_threadBlockSize > 256
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 256) s_wxy[t] += s_wxy[t + 256];
    @barrier("local");
#endif

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 128) s_wxy[t] += s_wxy[t + 128];
    @barrier("local");

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 64) s_wxy[t] += s_wxy[t + 64];
    @barrier("local");

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 32) s_wxy[t] += s_wxy[t + 32];
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 16) s_wxy[t] += s_wxy[t + 16];
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t <  8) s_wxy[t] += s_wxy[t + 8];
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t <  4) s_wxy[t] += s_wxy[t + 4];
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t <  2) s_wxy[t] += s_wxy[t + 2];

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t <  1) wxy[b] = s_wxy[0] + s_wxy[1];
  }
}
@kernel void multiWeightedInnerProduct2(const dlong N,
                                   const dlong Nblock,
                                   const dlong m,
                                   @restrict const dfloat*  w,
                                   @restrict const dfloat*  x,
                                   @restrict const dfloat*  y,
                                   const dlong offset,
                                   @restrict dfloat*  wxy)
{
  for(dlong b = 0; b < (N + p_threadBlockSize - 1) / p_threadBlockSize; ++b; @outer(0)) {
    @shared volatile dfloat s_wxy[p_threadBlockSize];
    @exclusive dfloat w_loc;
    @exclusive dfloat y_loc;

    for(int v = 0 ; v < m; ++v){

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) {
      const dlong id = t + p_threadBlockSize * b;
      if(v == 0 && id < N){
        w_loc = w[id];
        y_loc = y[id+N*offset];
      }
      s_wxy[t] = (id < N) ? w_loc * x[id + N * v] * y_loc : 0.f;
    }

    @barrier("local");
#if p_threadBlockSize > 512
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 512) s_wxy[t] += s_wxy[t + 512];
    @barrier("local");
#endif
#if p_threadBlockSize > 256
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 256) s_wxy[t] += s_wxy[t + 256];
    @barrier("local");
#endif

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 128) s_wxy[t] += s_wxy[t + 128];
    @barrier("local");

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 64) s_wxy[t] += s_wxy[t + 64];
    @barrier("local");

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 32) s_wxy[t] += s_wxy[t + 32];
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t < 16) s_wxy[t] += s_wxy[t + 16];
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t <  8) s_wxy[t] += s_wxy[t + 8];
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t <  4) s_wxy[t] += s_wxy[t + 4];
    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t <  2) s_wxy[t] += s_wxy[t + 2];

    for(int t = 0; t < p_threadBlockSize; ++t; @inner(0)) if(t <  1) wxy[b+v*Nblock] = s_wxy[0] + s_wxy[1];
  }
  }
}