//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"
#include "plugins/velRecycling.hpp"
#include "plugins/avg.hpp"

#include "casedata.h"

/* UDF Functions */                                                      

void UDF_LoadKernels(nrs_t *nrs)
{
  velRecycling::buildKernel(nrs);
  avg::buildKernel(nrs);
}

void UDF_Setup(nrs_t *nrs)
{
  // setup scratch space
  platform_t* platform = platform_t::getInstance();
  nrs->o_usrwrk = platform->device.malloc(nrs->NVfields*nrs->fieldOffset*sizeof(dfloat));

  // recycling
  const dfloat wbar  = 1.0;
  const int bID      = 1; 
  dfloat zRecycLayer = 0.25*ZLENGTH;
  const hlong offset = NELSLAB * round(NSLABS * zRecycLayer/ZLENGTH); 
  velRecycling::setup(nrs, nrs->o_usrwrk, offset, bID, wbar);

  avg::setup(nrs);
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  mesh_t *mesh = nrs->mesh;

  velRecycling::copy();
  avg::run(time);

  if (nrs->isOutputStep) {
    occa::memory o_UZ = nrs->o_U + 2*nrs->fieldOffset * sizeof(dfloat);
    const dfloat ubar = nrs->linAlg->innerProd(mesh->Nlocal, o_UZ, mesh->o_LMM, platform->comm.mpiComm)/mesh->volume;
    if (platform->comm.mpiRank == 0) printf(" uBulk: %g\n", ubar);

    avg::outfld();
  }
}
