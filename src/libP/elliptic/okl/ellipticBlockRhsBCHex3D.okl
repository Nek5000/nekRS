/*

   The MIT License (MIT)

   Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

 */

#if 1
void surfaceTerms(int sk,
                  int fld,
                  int offset,
                  int m,
                  int i,
                  int j,
                  const dfloat t,
                  const dfloat* sgeo,
                  const dfloat* x,
                  const dfloat* y,
                  const dfloat* z,
                  const int* vmapM,
                  const int* mapB,
                  dfloat s_q[2][p_Nq][p_Nq],
                  dfloat s_ndq[2][p_Nq][p_Nq])
{
  const dlong idM = vmapM[sk];

  const dfloat nx  = sgeo[sk * p_Nsgeo + p_NXID];
  const dfloat ny  = sgeo[sk * p_Nsgeo + p_NYID];
  const dfloat nz  = sgeo[sk * p_Nsgeo + p_NZID];
  const dfloat WsJ = sgeo[sk * p_Nsgeo + p_WSJID];

  dfloat dudxP = 0, dudyP = 0, dudzP = 0, uP = 0;

  const int bc = mapB[idM + fld * offset];
  if(bc > 0)
    ellipticBoundaryConditions3D(bc,
                                 fld,
                                 t,
                                 x[idM],
                                 y[idM],
                                 z[idM],
                                 nx,
                                 ny,
                                 nz,
                                 0.f,
                                 0.f,
                                 0.f,
                                 0.f,
                                 uP,
                                 dudxP,
                                 dudyP,
                                 dudzP);

  s_q  [m][j][i]  = uP;
  s_ndq[m][j][i]  = -WsJ * (nx * dudxP + ny * dudyP + nz * dudzP);
}

// AK: just one time called, very bad but not important for now
@kernel void ellipticBlockRhsBCHex3D(const dlong Nelements,
                                     const int fld,
                                     const dlong offset,
                                     @restrict const dfloat*  ggeo,
                                     @restrict const dfloat*  sgeo,
                                     @restrict const dfloat*  D,
                                     @restrict const dfloat*  S,
                                     @restrict const dfloat*  MM,
                                     @restrict const dlong* vmapM,
                                     @restrict const dfloat*  sMT,
                                     @restrict const dfloat* lambda,
                                     const dfloat t,
                                     @restrict const dfloat*  x,
                                     @restrict const dfloat*  y,
                                     @restrict const dfloat*  z,
                                     @restrict const int*  mapB,
                                     @restrict dfloat*  rhs)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[2][p_Nq][p_Nq];
    @shared dfloat s_ndq[2][p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_rhs[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
    // face 0 & 5
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        s_D[j][i] = D[p_Nq * j + i];
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; ++k) {
          r_q[k] = 0.;
          r_rhs[k] = 0.;
        }

        const dlong sk0 = e * p_Nfp * p_Nfaces + 0 * p_Nfp + i + j * p_Nq;
        const dlong sk5 = e * p_Nfp * p_Nfaces + 5 * p_Nfp + i + j * p_Nq;

        surfaceTerms(sk0, fld, offset, 0, i, j, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
        surfaceTerms(sk5, fld, offset, 1, i, j, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
      }
    }

    @barrier("local");

    // face 0 & 5
    for(int j = 0; j < p_Nq; ++j; @inner(1))
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //face 0
        r_q[0] = s_q[0][j][i];
        r_rhs[0] += s_ndq[0][j][i];

        //face 5
        r_q[p_Nq - 1] = s_q[1][j][i];
        r_rhs[p_Nq - 1] += s_ndq[1][j][i];
      }

    @barrier("local");

    // face 1 & 3
    for(int k = 0; k < p_Nq; ++k; @inner(1))
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        const dlong sk1 = e * p_Nfp * p_Nfaces + 1 * p_Nfp + i + k * p_Nq;
        const dlong sk3 = e * p_Nfp * p_Nfaces + 3 * p_Nfp + i + k * p_Nq;

        surfaceTerms(sk1, fld, offset, 0, i, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
        surfaceTerms(sk3, fld, offset, 1, i, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
      }

    @barrier("local");

    // face 1 & 3
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        if (j == 0) {//face 1
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            r_q[k]    = s_q[0][k][i];
            r_rhs[k] += s_ndq[0][k][i];
          }
        }
        if (j == p_Nq - 1) {//face 3
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            r_q[k]    = s_q[1][k][i];
            r_rhs[k] += s_ndq[1][k][i];
          }
        }
      }
    }

    @barrier("local");

    // face 2 & 4
    for(int k = 0; k < p_Nq; ++k; @inner(1))
      for(int j = 0; j < p_Nq; ++j; @inner(0)) {
        const dlong sk2 = e * p_Nfp * p_Nfaces + 2 * p_Nfp + j + k * p_Nq;
        const dlong sk4 = e * p_Nfp * p_Nfaces + 4 * p_Nfp + j + k * p_Nq;

        surfaceTerms(sk2, fld, offset, 0, j, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
        surfaceTerms(sk4, fld, offset, 1, j, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
      }

    @barrier("local");

    // face 2 & 4
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        if (i == p_Nq - 1) {//face 2
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            r_q[k] = s_q[0][k][j];
            r_rhs[k] += s_ndq[0][k][j];
          }
        }
        if (i == 0) {//face 4
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            r_q[k] = s_q[1][k][j];
            r_rhs[k] += s_ndq[1][k][j];
          }
        }
      }
    }

    @barrier("local");

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; k++) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // prefetch geometric factors
          const dlong gbase = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_q[0][j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0.f;
          dfloat qs = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            qr += s_D[i][m] * s_q[0][j][m];
            qs += s_D[j][m] * s_q[0][m][i];
          }

          //reuse the s_ndq array
          s_ndq[0][j][i] = (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_ndq[1][j][i] = (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          // put this here for a performance bump
          r_Gqt = (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          r_Auk = r_GwJ * lambda[fld] * r_q[k];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            r_Auk    += s_D[m][j] * s_ndq[0][m][i];
            r_rhs[m] += s_D[k][m] * r_Gqt;   // DT(m,k)*ut(i,j,k,e)
            r_Auk    += s_D[m][i] * s_ndq[1][j][m];
          }

          r_rhs[k] += r_Auk;
        }
      }
    }

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          rhs[id + fld * offset] -= r_rhs[k];
        }
      }
    }
  }
}

// AK: just one time called, very bad but not important for now
@kernel void ellipticBlockRhsVarBCHex3D(const dlong Nelements,
                                        const int fld,
                                        const dlong offset,
                                        @restrict const dfloat*  ggeo,
                                        @restrict const dfloat*  sgeo,
                                        @restrict const dfloat*  D,
                                        @restrict const dfloat*  S,
                                        @restrict const dfloat*  MM,
                                        @restrict const dlong* vmapM,
                                        @restrict const dfloat*  sMT,
                                        @restrict const dfloat* lambda,
                                        const dfloat t,
                                        @restrict const dfloat*  x,
                                        @restrict const dfloat*  y,
                                        @restrict const dfloat*  z,
                                        @restrict const int*  mapB,
                                        @restrict dfloat*  rhs)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[2][p_Nq][p_Nq];
    @shared dfloat s_ndq[2][p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_rhs[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
    // face 0 & 5
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        s_D[j][i] = D[p_Nq * j + i];
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; ++k) {
          r_q[k] = 0.;
          r_rhs[k] = 0.;
        }

        const dlong sk0 = e * p_Nfp * p_Nfaces + 0 * p_Nfp + i + j * p_Nq;
        const dlong sk5 = e * p_Nfp * p_Nfaces + 5 * p_Nfp + i + j * p_Nq;

        surfaceTerms(sk0, fld, offset, 0, i, j, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
        surfaceTerms(sk5, fld, offset, 1, i, j, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
      }
    }

    @barrier("local");

    // face 0 & 5
    for(int j = 0; j < p_Nq; ++j; @inner(1))
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //face 0
        r_q[0] = s_q[0][j][i];
        r_rhs[0] += s_ndq[0][j][i];

        //face 5
        r_q[p_Nq - 1] = s_q[1][j][i];
        r_rhs[p_Nq - 1] += s_ndq[1][j][i];
      }

    @barrier("local");

    // face 1 & 3
    for(int k = 0; k < p_Nq; ++k; @inner(1))
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        const dlong sk1 = e * p_Nfp * p_Nfaces + 1 * p_Nfp + i + k * p_Nq;
        const dlong sk3 = e * p_Nfp * p_Nfaces + 3 * p_Nfp + i + k * p_Nq;

        surfaceTerms(sk1, fld, offset, 0, i, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
        surfaceTerms(sk3, fld, offset, 1, i, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
      }

    @barrier("local");

    // face 1 & 3
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        if (j == 0) {//face 1
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            r_q[k]    = s_q[0][k][i];
            r_rhs[k] += s_ndq[0][k][i];
          }
        }
        if (j == p_Nq - 1) {//face 3
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            r_q[k]    = s_q[1][k][i];
            r_rhs[k] += s_ndq[1][k][i];
          }
        }
      }
    }

    @barrier("local");

    // face 2 & 4
    for(int k = 0; k < p_Nq; ++k; @inner(1))
      for(int j = 0; j < p_Nq; ++j; @inner(0)) {
        const dlong sk2 = e * p_Nfp * p_Nfaces + 2 * p_Nfp + j + k * p_Nq;
        const dlong sk4 = e * p_Nfp * p_Nfaces + 4 * p_Nfp + j + k * p_Nq;

        surfaceTerms(sk2, fld, offset, 0, j, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
        surfaceTerms(sk4, fld, offset, 1, j, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
      }

    @barrier("local");

    // face 2 & 4
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        if (i == p_Nq - 1) {//face 2
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            r_q[k] = s_q[0][k][j];
            r_rhs[k] += s_ndq[0][k][j];
          }
        }
        if (i == 0) {//face 4
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            r_q[k] = s_q[1][k][j];
            r_rhs[k] += s_ndq[1][k][j];
          }
        }
      }
    }

    @barrier("local");

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; k++) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // prefetch geometric factors
          const dlong gbase = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_q[0][j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0.f;
          dfloat qs = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            qr += s_D[i][m] * s_q[0][j][m];
            qs += s_D[j][m] * s_q[0][m][i];
          }

          const dlong base   = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat lam_0 = lambda[base + 0 * offset + 2 * fld * offset];
          const dfloat lam_1 = lambda[base + 1 * offset + 2 * fld * offset];

          //reuse the s_ndq array
          s_ndq[0][j][i] = lam_0 * (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_ndq[1][j][i] = lam_0 * (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          // put this here for a performance bump
          r_Gqt = lam_0 * (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          r_Auk = r_GwJ * lam_1 * r_q[k];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            r_Auk    += s_D[m][j] * s_ndq[0][m][i];
            r_rhs[m] += s_D[k][m] * r_Gqt;   // DT(m,k)*ut(i,j,k,e)
            r_Auk    += s_D[m][i] * s_ndq[1][j][m];
          }

          r_rhs[k] += r_Auk;
        }
      }
    }

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          rhs[id + fld * offset] -= r_rhs[k];
        }
      }
    }
  }
}

#endif

#if 0

void surfaceTerms(int sk,
                  int m,
                  int i,
                  int j,
                  const dfloat t,
                  const dfloat* sgeo,
                  const dfloat* x,
                  const dfloat* y,
                  const dfloat* z,
                  const int* vmapM,
                  const int* mapB,
                  dfloat s_q[2][p_Nq][p_Nq],
                  dfloat s_ndq[2][p_Nq][p_Nq])
{
  const dlong idM = vmapM[sk];

  const dfloat nx  = sgeo[sk * p_Nsgeo + p_NXID];
  const dfloat ny  = sgeo[sk * p_Nsgeo + p_NYID];
  const dfloat nz  = sgeo[sk * p_Nsgeo + p_NZID];
  const dfloat WsJ = sgeo[sk * p_Nsgeo + p_WSJID];

  dfloat dudxP = 0, dudyP = 0, dudzP = 0, uP = 0;

  const int bc = mapB[idM];
  const int fld = 0;
  if(bc > 0)
    ellipticBoundaryConditions3D(bc,
                                 fld,
                                 t,
                                 x[idM],
                                 y[idM],
                                 z[idM],
                                 nx,
                                 ny,
                                 nz,
                                 0.f,
                                 0.f,
                                 0.f,
                                 0.f,
                                 uP,
                                 dudxP,
                                 dudyP,
                                 dudzP);

  s_q  [m][j][i]  = uP;
  s_ndq[m][j][i]  = -WsJ * (nx * dudxP + ny * dudyP + nz * dudzP);
}

// AK: just one time called, very bad but not important for now
@kernel void ellipticBlockRhsBCHex3D(const dlong Nelements,
                                     const int fld,
                                     const dlong offset,
                                     @restrict const dfloat*  ggeo,
                                     @restrict const dfloat*  sgeo,
                                     @restrict const dfloat*  D,
                                     @restrict const dfloat*  S,
                                     @restrict const dfloat*  MM,
                                     @restrict const dlong* vmapM,
                                     @restrict const dfloat*  sMT,
                                     @restrict const dfloat* lambda,
                                     const dfloat t,
                                     @restrict const dfloat*  x,
                                     @restrict const dfloat*  y,
                                     @restrict const dfloat*  z,
                                     @restrict const int*  mapB,
                                     @restrict dfloat*  rhs)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[2][p_Nq][p_Nq];
    @shared dfloat s_ndq[2][p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_rhs[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    // for all face nodes of all elements
    // face 0 & 5
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq * j + i]; // D is column major

#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; ++k) {
          r_q[k] = 0.;
          r_rhs[k] = 0.;
        }

        const dlong sk0 = e * p_Nfp * p_Nfaces + 0 * p_Nfp + i + j * p_Nq;
        const dlong sk5 = e * p_Nfp * p_Nfaces + 5 * p_Nfp + i + j * p_Nq;

        surfaceTerms(sk0, 0, i, j, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
        surfaceTerms(sk5, 1, i, j, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
      }
    }

    @barrier("local");

    // face 0 & 5
    for(int j = 0; j < p_Nq; ++j; @inner(1))
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        //face 0
        r_q[0] = s_q[0][j][i];
        r_rhs[0] += s_ndq[0][j][i];

        //face 5
        r_q[p_Nq - 1] = s_q[1][j][i];
        r_rhs[p_Nq - 1] += s_ndq[1][j][i];
      }

    @barrier("local");

    // face 1 & 3
    for(int k = 0; k < p_Nq; ++k; @inner(1))
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        const dlong sk1 = e * p_Nfp * p_Nfaces + 1 * p_Nfp + i + k * p_Nq;
        const dlong sk3 = e * p_Nfp * p_Nfaces + 3 * p_Nfp + i + k * p_Nq;

        surfaceTerms(sk1, 0, i, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
        surfaceTerms(sk3, 1, i, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
      }

    @barrier("local");

    // face 1 & 3
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        if (j == 0) {//face 1
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            r_q[k] = s_q[0][k][i]; //TW += => =
            r_rhs[k] += s_ndq[0][k][i];
          }
        }
        if (j == p_Nq - 1) {//face 3
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            r_q[k] = s_q[1][k][i]; //TW += => =
            r_rhs[k] += s_ndq[1][k][i];
          }
        }
      }
    }

    @barrier("local");

    // face 2 & 4
    for(int k = 0; k < p_Nq; ++k; @inner(1))
      for(int j = 0; j < p_Nq; ++j; @inner(0)) {
        const dlong sk2 = e * p_Nfp * p_Nfaces + 2 * p_Nfp + j + k * p_Nq;
        const dlong sk4 = e * p_Nfp * p_Nfaces + 4 * p_Nfp + j + k * p_Nq;

        surfaceTerms(sk2, 0, j, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
        surfaceTerms(sk4, 1, j, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
      }

    @barrier("local");

    // face 2 & 4
    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        if (i == p_Nq - 1) {//face 2
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            r_q[k] = s_q[0][k][j]; //TW += => =
            r_rhs[k] += s_ndq[0][k][j];
          }
        }
        if (i == 0) {//face 4
#pragma unroll p_Nq
          for (int k = 0; k < p_Nq; k++) {
            r_q[k] = s_q[1][k][j]; //TW += => =
            r_rhs[k] += s_ndq[1][k][j];
          }
        }
      }
    }

    @barrier("local");

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; k++) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // prefetch geometric factors
          const dlong gbase = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // share u(:,:,k)
          s_q[0][j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0.f;
          dfloat qs = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            qr += s_D[i][m] * s_q[0][j][m];
            qs += s_D[j][m] * s_q[0][m][i];
          }

          //reuse the s_ndq array
          s_ndq[0][j][i] = (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_ndq[1][j][i] = (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          // put this here for a performance bump
          r_Gqt = (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          r_Auk = r_GwJ * r_q[k];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            r_Auk    += s_D[m][j] * s_ndq[0][m][i];
            r_rhs[m] += s_D[k][m] * r_Gqt;   // DT(m,k)*ut(i,j,k,e)
            r_Auk    += s_D[m][i] * s_ndq[1][j][m];
          }

          r_rhs[k] += r_Auk;
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          rhs[id + fld * offset] -= r_rhs[k];
        }
      }
    }
  }
}

#endif

#if 0
// AK: This implemantation is restricted to small number of Nfields
void surfaceBlockTerms(int sk,
                       int fld,
                       int offset,
                       int m,
                       int i,
                       int j,
                       const dfloat t,
                       const dfloat* sgeo,
                       const dfloat* x,
                       const dfloat* y,
                       const dfloat* z,
                       const int* vmapM,
                       const int* mapB,
                       dfloat s_q[p_eNfields][2][p_Nq][p_Nq],
                       dfloat s_ndq[p_eNfields][2][p_Nq][p_Nq])
{
  const dlong idM = vmapM[sk];

  const dfloat nx  = sgeo[sk * p_Nsgeo + p_NXID];
  const dfloat ny  = sgeo[sk * p_Nsgeo + p_NYID];
  const dfloat nz  = sgeo[sk * p_Nsgeo + p_NZID];
  const dfloat WsJ = sgeo[sk * p_Nsgeo + p_WSJID];

  dfloat dudxP = 0, dudyP = 0, dudzP = 0, uP = 0;
  const int bc = mapB[idM + fld * offset];

  if(bc > 0)
    ellipticBoundaryConditions3D(bc,
                                 fld,
                                 t,
                                 x[idM],
                                 y[idM],
                                 z[idM],
                                 nx,
                                 ny,
                                 nz,
                                 0.f,
                                 0.f,
                                 0.f,
                                 0.f,
                                 uP,
                                 dudxP,
                                 dudyP,
                                 dudzP);
  s_q  [fld][m][j][i]  = uP;
  s_ndq[fld][m][j][i]  = -WsJ * (nx * dudxP + ny * dudyP + nz * dudzP);
}
// AK: just one time called, very bad but not important for now
@kernel void ellipticBlockRhsBCHex3D(const dlong Nelements,
                                     const dlong offset,
                                     @restrict const dfloat*  ggeo,
                                     @restrict const dfloat*  sgeo,
                                     @restrict const dfloat*  D,
                                     @restrict const dfloat*  S,
                                     @restrict const dfloat*  MM,
                                     @restrict const dlong* vmapM,
                                     @restrict const dfloat*  sMT,
                                     @restrict const dfloat* lambda,
                                     const dfloat t,
                                     @restrict const dfloat*  x,
                                     @restrict const dfloat*  y,
                                     @restrict const dfloat*  z,
                                     @restrict const int*  mapB,
                                     @restrict dfloat*  rhs)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_eNfields][2][p_Nq][p_Nq];
    @shared dfloat s_ndq[p_eNfields][2][p_Nq][p_Nq];

    @exclusive dfloat r_qt[p_eNfields], r_Gqt[p_eNfields], r_Auk[p_eNfields];
    @exclusive dfloat r_q[p_eNfields][p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_rhs[p_eNfields][p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq*p_eNfields
        for(int k = 0; k < p_Nq * p_eNfields; ++k) {
          r_q[0][k]   = 0.f;
          r_rhs[0][k] = 0.f;
        }
      }
    }

    @barrier("local");

// fill values first
    for(int fld = 0; fld < p_eNfields; fld++) {
      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          //load D into local memory
          // s_D[i][j] = d \phi_i at node j
          s_D[j][i] = D[p_Nq * j + i]; // D is column major

#pragma unroll p_Nq
          for(int k = 0; k < p_Nq; ++k) {
            r_q[fld][k] = 0.;
            r_rhs[fld][k] = 0.;
          }

          const dlong sk0 = e * p_Nfp * p_Nfaces + 0 * p_Nfp + i + j * p_Nq;
          const dlong sk5 = e * p_Nfp * p_Nfaces + 5 * p_Nfp + i + j * p_Nq;
          surfaceBlockTerms(sk0, fld, offset, 0, i, j, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
          surfaceBlockTerms(sk5, fld, offset, 1, i, j, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
        }
      }

      @barrier("local");

      // face 0 & 5
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          //face 0
          r_q[fld][0] = s_q[fld][0][j][i];
          r_rhs[fld][0] += s_ndq[fld][0][j][i];

          //face 5
          r_q[fld][p_Nq - 1] = s_q[fld][1][j][i];
          r_rhs[fld][p_Nq - 1] += s_ndq[fld][1][j][i];
        }
      @barrier("local");

      // face 1 & 3
      for(int k = 0; k < p_Nq; ++k; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong sk1 = e * p_Nfp * p_Nfaces + 1 * p_Nfp + i + k * p_Nq;
          const dlong sk3 = e * p_Nfp * p_Nfaces + 3 * p_Nfp + i + k * p_Nq;
          surfaceBlockTerms(sk1, fld, offset, 0, i, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
          surfaceBlockTerms(sk3, fld, offset, 1, i, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
        }

      @barrier("local");

      // face 1 & 3
      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          if (j == 0) {//face 1
#pragma unroll p_Nq
            for (int k = 0; k < p_Nq; k++) {
              r_q[fld][k]    = s_q[fld][0][k][i];  //TW += => =
              r_rhs[fld][k] += s_ndq[fld][0][k][i];
            }
          }
          if (j == p_Nq - 1) {//face 3
#pragma unroll p_Nq
            for (int k = 0; k < p_Nq; k++) {
              r_q[fld][k]    = s_q[fld][1][k][i];//TW += => =
              r_rhs[fld][k] += s_ndq[fld][1][k][i];
            }
          }
        }
      }

      @barrier("local");

      // face 2 & 4
      for(int k = 0; k < p_Nq; ++k; @inner(1))
        for(int j = 0; j < p_Nq; ++j; @inner(0)) {
          const dlong sk2 = e * p_Nfp * p_Nfaces + 2 * p_Nfp + j + k * p_Nq;
          const dlong sk4 = e * p_Nfp * p_Nfaces + 4 * p_Nfp + j + k * p_Nq;
          surfaceBlockTerms(sk2, fld, offset, 0, j, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
          surfaceBlockTerms(sk4, fld, offset, 1, j, k, t, sgeo, x, y, z, vmapM, mapB, s_q, s_ndq);
        }

      @barrier("local");

      // face 2 & 4
      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          if (i == p_Nq - 1) {//face 2
#pragma unroll p_Nq
            for (int k = 0; k < p_Nq; k++) {
              r_q[fld][k]    = s_q[fld][0][k][j];//TW += => =
              r_rhs[fld][k] += s_ndq[fld][0][k][j];
            }
          }
          if (i == 0) {//face 4
#pragma unroll p_Nq
            for (int k = 0; k < p_Nq; k++) {
              r_q[fld][k]    = s_q[fld][1][k][j];//TW += => =
              r_rhs[fld][k] += s_ndq[fld][1][k][j];
            }
          }
        }
      }

// surface values are loaded
    }

    @barrier("local");

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; k++) {
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          // prefetch geometric factors
          const dlong gbase = e * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          for(int fld = 0; fld < p_eNfields; fld++) {
            s_q[fld][0][j][i] = r_q[fld][k];
            r_qt[fld] = 0.f;
          }

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++)
            for(int fld = 0; fld < p_eNfields; fld++)
              r_qt[fld] += s_D[k][m] * r_q[fld][m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          for(int fld = 0; fld < p_eNfields; fld++) {
            dfloat qr = 0.f;
            dfloat qs = 0.f;

#pragma unroll p_Nq
            for(int m = 0; m < p_Nq; m++) {
              qr += s_D[i][m] * s_q[fld][0][j][m];
              qs += s_D[j][m] * s_q[fld][0][m][i];
            }

            //reuse the s_ndq array
            s_ndq[fld][0][j][i] = (r_G01 * qr + r_G11 * qs + r_G12 * r_qt[fld]);
            s_ndq[fld][1][j][i] = (r_G00 * qr + r_G01 * qs + r_G02 * r_qt[fld]);

            // put this here for a performance bump
            r_Gqt[fld] = (r_G02 * qr + r_G12 * qs + r_G22 * r_qt[fld]);
            r_Auk[fld] = r_GwJ * lambda[fld] * r_q[fld][k];
          }
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          for(int fld = 0; fld < p_eNfields; fld++) {
#pragma unroll p_Nq
            for(int m = 0; m < p_Nq; m++) {
              r_Auk[fld]    += s_D[m][j] * s_ndq[fld][0][m][i];
              r_rhs[fld][m] += s_D[k][m] * r_Gqt[fld]; // DT(m,k)*ut(i,j,k,e)
              r_Auk[fld]    += s_D[m][i] * s_ndq[fld][1][j][m];
            }
            r_rhs[fld][k] += r_Auk[fld];
          }
        }
      }
    }

    // write out

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        for(int fld = 0; fld < p_eNfields; fld++) {
#pragma unroll p_Nq
          for(int k = 0; k < p_Nq; k++) {
            const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
            rhs[id + fld * offset] -= r_rhs[fld][k];
          }
        }
      }
    }
  }
}

#endif